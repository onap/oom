[tox]
minversion = 1.6
envlist =
 docs,
 docs-linkcheck,
 gitlint,
 checkbashisms,
 pre-commit,
skipsdist=true

[doc8]
ignore-path-errors=docs/helm-search.txt;D001

[testenv:doc8]
deps =
    -r{toxinidir}/requirements.txt
    -chttps://git.onap.org/doc/plain/etc/upper-constraints.os.txt
    -chttps://git.onap.org/doc/plain/etc/upper-constraints.onap.txt
commands =
 - doc8 docs/

[testenv:docs]
deps =
    -r{toxinidir}/requirements.txt
    -chttps://git.onap.org/doc/plain/etc/upper-constraints.os.txt
    -chttps://git.onap.org/doc/plain/etc/upper-constraints.onap.txt
commands =
 sphinx-build -q -W -b html -n -d {envtmpdir}/doctrees ./docs/ {toxinidir}/docs/_build/html

[testenv:docs-linkcheck]
deps =
    -r{toxinidir}/requirements.txt
    -chttps://git.onap.org/doc/plain/etc/upper-constraints.os.txt
    -chttps://git.onap.org/doc/plain/etc/upper-constraints.onap.txt
commands = sphinx-build -q -W -b linkcheck -d {envtmpdir}/doctrees ./docs/ {toxinidir}/docs/_build/linkcheck

[testenv:spelling]
#basepython = python3
whitelist_externals = wget
deps =
    -r{toxinidir}/requirements.txt
    -chttps://git.onap.org/doc/plain/etc/upper-constraints.os.txt
    -chttps://git.onap.org/doc/plain/etc/upper-constraints.onap.txt
changedir={toxinidir}/docs
commands =
    wget -nv https://git.onap.org/doc/plain/docs/spelling_wordlist.txt -O spelling_wordlist.txt
    sphinx-build -b spelling -d {envtmpdir}/doctrees . _build/spelling

[testenv:gitlint]
basepython = python3
deps =
    -r{toxinidir}/requirements.txt
    -chttps://git.onap.org/doc/plain/etc/upper-constraints.os.txt
    -chttps://git.onap.org/doc/plain/etc/upper-constraints.onap.txt
commands =
  gitlint

[testenv:checkbashisms]
deps =
whitelist_externals = sh
                      find
                      checkbashisms
commands =
    sh -c 'which checkbashisms>/dev/null  || sudo yum install devscripts-minimal || sudo apt-get install devscripts \
        || (echo "checkbashisms command not found - please install it (e.g. sudo apt-get install devscripts | \
        yum install devscripts-minimal )" >&2 && exit 1)'
    find . -not -path '*/\.*' -name *.sh -exec checkbashisms \{\} +
    find . -not -path '*/\.*' -name *.failover -exec checkbashisms -f \{\} +
    sh -c "! find . -not -path '*/\.*' -name *.sh -exec grep 'local .*=' \{\} + || exit 2"
    sh -c "! find . -not -path '*/\.*' -name *.failover -exec grep 'local .*=' \{\} + || exit 2"

[testenv:autopep8]
deps =
    -r{toxinidir}/requirements.txt
    -chttps://git.onap.org/doc/plain/etc/upper-constraints.os.txt
    -chttps://git.onap.org/doc/plain/etc/upper-constraints.onap.txt
commands =
    autopep8 --max-line-length 120 --in-place --recursive kubernetes/ TOSCA/ docs/

[testenv:pylint]
deps =
    -r{toxinidir}/requirements.txt
    -chttps://git.onap.org/doc/plain/etc/upper-constraints.os.txt
    -chttps://git.onap.org/doc/plain/etc/upper-constraints.onap.txt
whitelist_externals = find
commands =
    find kubernetes/ TOSCA/ docs/ -name *.py -exec pylint --max-line-length=120 --disable=missing-docstring --method-rgx="(([a-z_][a-zA-Z0-9_]{2,})|(_[a-z0-9_]*)|(__[a-zA-Z][a-zA-Z0-9_]+__))$" --variable-rgx="[a-zA-Z_][a-zA-Z0-9_]{1,30}$" --reports=y --score=y  --output-format=colorized  \{\} +

[testenv:pre-commit-install]
basepython = python3
deps = pre-commit
commands =
    pre-commit install
    pre-commit install --hook-type commit-msg

[testenv:pre-commit-uninstall]
basepython = python3
deps = pre-commit
commands =
    pre-commit uninstall
    pre-commit uninstall --hook-type commit-msg

[testenv:pre-commit]
basepython = python3
deps = pre-commit
passenv = HOME
commands =
    pre-commit run --all-files --show-diff-on-failure
    pre-commit run gitlint --hook-stage commit-msg --commit-msg-filename .git/COMMIT_EDITMSG
    # Gitlint only proposes a pre-commit configuration for the commit-msg stage but none for the commit stage.
    # Its default arguments --passed and --msg-filename are different from CI recommandations.
    # As a result, the line above is always skipped in jenkins CI since there cannot be a .git/COMMIT_EDITMSG file.
    # A dedicated gitlint profile for CI is proposed above. Also to behave fine locally, this profile must have access
    # to the HOME variable so that Gitlint can retrieve Git user settings.
