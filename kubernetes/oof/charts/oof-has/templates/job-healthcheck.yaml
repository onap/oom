{{/*
# Copyright 2018 Intel Corporation, Inc
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
*/}}

apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "common.fullname" . }}-healthcheck
  namespace: {{ include "common.namespace" . }}
  labels:
    app: {{ include "common.name" . }}
    chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  replicas: {{ .Values.replicaCount }}
  template:
    metadata:
      labels:
        app: {{ include "common.name" . }}
        release: {{ .Release.Name }}
    spec:
      initContainers:
      - image:  "{{ .Values.global.readinessRepository }}/{{ .Values.global.readinessImage }}"
        imagePullPolicy: {{ .Values.global.pullPolicy | default .Values.pullPolicy }}
        name: {{ include "common.name" . }}-readiness
        command:
        - /root/ready.py
        args:
        - --container-name
        - oof-has-api
        env:
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
      containers:
      - image: "{{ include "common.repository" . }}/{{ .Values.global.image.optf_has }}"
        imagePullPolicy: {{ .Values.pullPolicy }}
        name: {{ include "common.name" . }}-healthcheck
        command:
          - "/bin/sh"
          - "-c"
          - |
             echo "INSERT HEALTHCHECK PLAN";
             sleep 15;
             resp="FAILURE";
             until [ $resp = "200" ]; do
             resp=$(curl -s -o /dev/null --write-out %{http_code} -X POST http://{{.Values.config.music.serviceName}}.{{ include "common.namespace" . }}:{{.Values.config.music.port}}/MUSIC/rest/v2/keyspaces/conductor/tables/plans/rows?id=healthcheck \
             -H "Content-Type: application/json" \
             -H "ns: conductor" \
             -H "Authorization: Basic Y29uZHVjdG9yOmMwbmR1Y3Qwcg==" \
             --data @healthcheck.json);
             echo $resp;
             sleep 2;
             done;
        workingDir: /has
        volumeMounts:
          - mountPath: /etc/localtime
            name: localtime
            readOnly: true
          - mountPath: /has/healthcheck.json
            name: {{ .Values.global.commonConfigPrefix }}-config
            subPath: healthcheck.json
        resources:
{{ toYaml .Values.resources | indent 10 }}
      nodeSelector:
        {{- if .Values.nodeSelector }}
{{ toYaml .Values.nodeSelector | indent 8 }}
        {{- end -}}
        {{- if .Values.affinity }}
      affinity:
{{ toYaml .Values.affinity | indent 8 }}
        {{- end }}
      volumes:
      - name: localtime
        hostPath:
          path: /etc/localtime
      - name: {{ .Values.global.commonConfigPrefix }}-config
        configMap:
          name: {{ .Values.global.commonConfigPrefix }}-configmap
          items:
          - key: healthcheck.json
            path: healthcheck.json
      restartPolicy: OnFailure
      imagePullSecrets:
      - name: "{{ include "common.namespace" . }}-docker-registry-key"