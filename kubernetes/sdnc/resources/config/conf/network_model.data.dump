-- MySQL dump 10.13  Distrib 5.6.22, for Linux (x86_64)
--
-- Host: sdnctldb01    Database: sdnctl
-- ------------------------------------------------------
-- Server version	5.6.36-enterprise-commercial-advanced-log

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

--
-- Table structure for table `NETWORK_MODEL`
--

DROP TABLE IF EXISTS `NETWORK_MODEL`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `NETWORK_MODEL` (
  `customization_uuid` varchar(255) NOT NULL,
  `service_uuid` varchar(255) NOT NULL,
  `model_yaml` longblob,
  `invariant_uuid` varchar(255) DEFAULT NULL,
  `uuid` varchar(255) DEFAULT NULL,
  `network_type` varchar(255) DEFAULT NULL,
  `network_role` varchar(255) DEFAULT NULL,
  `network_technology` varchar(255) DEFAULT NULL,
  `trunk_network_indicator` char(1) DEFAULT NULL,
  `network_scope` varchar(255) DEFAULT NULL,
  `naming_policy` varchar(255) DEFAULT NULL,
  `ecomp_generated_naming` char(1) DEFAULT NULL,
  `is_shared_network` char(1) DEFAULT NULL,
  `is_external_network` char(1) DEFAULT NULL,
  `is_provider_network` char(1) DEFAULT NULL,
  `physical_network_name` varchar(255) DEFAULT NULL,
  `is_bound_to_vpn` char(1) DEFAULT NULL,
  `vpn_binding` varchar(255) DEFAULT NULL,
  `use_ipv4` char(1) DEFAULT NULL,
  `ipv4_dhcp_enabled` char(1) DEFAULT NULL,
  `ipv4_ip_version` char(1) DEFAULT NULL,
  `ipv4_cidr_mask` varchar(255) DEFAULT NULL,
  `eipam_v4_address_plan` varchar(255) DEFAULT NULL,
  `use_ipv6` char(1) DEFAULT NULL,
  `ipv6_dhcp_enabled` char(1) DEFAULT NULL,
  `ipv6_ip_version` char(1) DEFAULT NULL,
  `ipv6_cidr_mask` varchar(255) DEFAULT NULL,
  `eipam_v6_address_plan` varchar(255) DEFAULT NULL,
  `version` varchar(255) DEFAULT NULL,
  PRIMARY KEY (`customization_uuid`),
  KEY `FK_NETWORK_MODEL` (`service_uuid`),
  CONSTRAINT `FK_NETWORK_MODEL` FOREIGN KEY (`service_uuid`) REFERENCES `SERVICE_MODEL` (`service_uuid`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `NETWORK_MODEL`
--

LOCK TABLES `NETWORK_MODEL` WRITE;
/*!40000 ALTER TABLE `NETWORK_MODEL` DISABLE KEYS */;
INSERT INTO `NETWORK_MODEL` VALUES ('367a8ba9-057a-4506-b106-fbae818597c6','6794ec22-95ff-4b00-8846-b1148e90df54','!!com.att.sdnctl.uebclient.SdncNetworkServiceModel\ndescription: null\nimports:\n- Service_Admin: {file: resource-ServiceAdmin-template.yml}\n- IP_MUX_Demux: {file: resource-IpMuxDemux-template.yml}\n- Tunnel_Xconn: {file: resource-TunnelXconn-template.yml}\n- vHNF for DHV Test: {file: resource-VhnfForDhvTest-template.yml}\nmetadata: {invariantUUID: 7b0fafc1-83df-4590-9460-b5a8d9f9f277, UUID: 6794ec22-95ff-4b00-8846-b1148e90df54,\n  name: SD-WAN, description: \'Standard Wan connector, redoing this for sdnc again\n    as they got already deployed.\', type: Service, category: Network L1-3, serviceEcompNaming: false,\n  serviceHoming: false}\ntopology_template:\n  node_templates:\n    Pri_IP_MUX_Demux 1:\n      type: com.att.d2.resource.vf.IpMuxDemux\n      metadata: {invariantUUID: f110ef53-a0a6-4d72-ab91-fd88a835e8c4, UUID: 79b0a3cc-c5f9-4831-aa72-b2884ed0bd55,\n        customizationUUID: 211bcbd5-de25-41bb-a758-edd32220461d, version: \'1.0\', name: IP_MUX_Demux,\n        description: 1/17, type: VF, category: Allotted Resource, subcategory: Allotted Resource}\n    Pri_Service_Admin 5:\n      type: com.att.d2.resource.vf.ServiceAdmin\n      metadata: {invariantUUID: 462edf71-1a3c-487b-bf55-497460ab7de3, UUID: b51acc89-1c55-4586-b82b-6480b16339e9,\n        customizationUUID: 22b1ed87-2ca5-42f5-9e2e-20ad5bfb097e, version: \'1.0\', name: Service_Admin,\n        description: Service Version, type: VF, category: Allotted Resource, subcategory: Allotted Resource}\n    Sec_IP_MUX_Demux 3:\n      type: com.att.d2.resource.vf.IpMuxDemux\n      metadata: {invariantUUID: f110ef53-a0a6-4d72-ab91-fd88a835e8c4, UUID: 79b0a3cc-c5f9-4831-aa72-b2884ed0bd55,\n        customizationUUID: 96e090a4-93dd-43a2-9d87-a746ee7e53cd, version: \'1.0\', name: IP_MUX_Demux,\n        description: 1/17, type: VF, category: Allotted Resource, subcategory: Allotted Resource}\n    Pri_Tunnel_Xconn 9:\n      type: com.att.d2.resource.vf.TunnelXconn\n      metadata: {invariantUUID: b7a1b78e-6b6b-4b36-9698-8c9530da14af, UUID: a2a57fb1-213d-45a4-acd8-6a0f7b4e54b1,\n        customizationUUID: 5b9bee43-f537-4fb3-9e8b-4de9f714d28a, version: \'1.0\', name: Tunnel_Xconn,\n        description: Tunnel, type: VF, category: Allotted Resource, subcategory: Allotted Resource}\n    Sec_Service_Admin 7:\n      type: com.att.d2.resource.vf.ServiceAdmin\n      metadata: {invariantUUID: 462edf71-1a3c-487b-bf55-497460ab7de3, UUID: b51acc89-1c55-4586-b82b-6480b16339e9,\n        customizationUUID: 5431e571-3df5-423a-99bc-0b020ecac97b, version: \'1.0\', name: Service_Admin,\n        description: Service Version, type: VF, category: Allotted Resource, subcategory: Allotted Resource}\n    Sec_Tunnel_Xconn 11:\n      type: com.att.d2.resource.vf.TunnelXconn\n      metadata: {invariantUUID: b7a1b78e-6b6b-4b36-9698-8c9530da14af, UUID: a2a57fb1-213d-45a4-acd8-6a0f7b4e54b1,\n        customizationUUID: 367a8ba9-057a-4506-b106-fbae818597c6, version: \'1.0\', name: Tunnel_Xconn,\n        description: Tunnel, type: VF, category: Allotted Resource, subcategory: Allotted Resource}\n    vHNF for DHV Test 17:\n      type: com.att.d2.resource.vf.VhnfForDhvTest\n      metadata: {invariantUUID: 6ea0b528-e303-4686-aa77-aa2fcbdccb96, UUID: 619c7cd3-76a9-46a8-b01b-c1f236b14d68,\n        customizationUUID: 2eb202d1-b36b-4c63-821f-4a163abaed42, version: \'1.0\', name: vHNF for DHV Test,\n        description: \'vHNF for DHV testing 1_19_17. \', type: VF, category: Network L2-3,\n        subcategory: Infrastructure}\n  groups:\n    vhnffordhvtest17..VhnfForDhvTest..base_TEST..module-0:\n      type: com.att.d2.groups.VfModule\n      metadata: {vfModuleModelName: VhnfForDhvTest..base_TEST..module-0, vfModuleModelInvariantUUID: f5696ec0-ec71-4916-bf3b-93a654efcba4,\n        vfModuleModelUUID: ebc3d18c-3e62-4c24-bcd6-961e98701a0a, vfModuleModelVersion: \'1\',\n        vfModuleModelCustomizationUUID: 63f9560a-4603-4e3b-8fb7-55f8ea06ee21}\n      properties: {min_vf_module_instances: 1, vf_module_label: base_TEST, max_vf_module_instances: 1,\n        vf_module_type: Base, vf_module_description: null, initial_count: 1, volume_group: false}\n  substitution_mappings:\n    node_type: com.att.d2.service.SdWan\n    capabilities:\n      vHNF for DHV Test 17.disk.write.bytes:\n        type: com.att.d2.capabilities.metric.Ceilometer\n        description: A node type that includes the Metric capability indicates that it can be monitored using ceilometer.\n        occurrences: [1, UNBOUNDED]\n        properties:\n          initiator: {type: string, default: source, required: false}\n          network_name: {type: string, default: PRIVATE, required: false}\n          description: {type: string, default: Volume of writes, description: Description of the metric,\n            required: false}\n          type: {type: string, default: Cumulative, description: \'Type of the metric\n              value, for an example, Cumulative, Delta, Gauge and etc.\', required: true}\n          secure: {type: boolean, default: false, required: false}\n          ports:\n            type: map\n            required: false\n            entry_schema: {type: PortSpec}\n          port_name: {type: string, required: false}\n          unit: {type: string, default: B, description: Unit of the metric value,\n            required: true}\n          protocol: {type: string, default: tcp, required: false}\n          port: {type: PortDef, required: false}\n          name: {type: string, default: disk.write.bytes, description: Ceilometer metric type name to monitor. (The name ceilometer is using),\n            required: true}\n          category: {type: string, default: compute, description: \'Category of the\n              metric, for an example, compute, disk, network, storage and etc.\', required: false}\n          url_path: {type: string, required: false}\n      vHNF for DHV Test 17.disk.device.write.bytes.rate:\n        type: com.att.d2.capabilities.metric.Ceilometer\n        description: A node type that includes the Metric capability indicates that it can be monitored using ceilometer.\n        occurrences: [1, UNBOUNDED]\n        properties:\n          initiator: {type: string, default: source, required: false}\n          network_name: {type: string, default: PRIVATE, required: false}\n          description: {type: string, default: Average rate of writes, description: Description of the metric,\n            required: false}\n          type: {type: string, default: Gauge, description: \'Type of the metric value,\n              for an example, Cumulative, Delta, Gauge and etc.\', required: true}\n          secure: {type: boolean, default: false, required: false}\n          ports:\n            type: map\n            required: false\n            entry_schema: {type: PortSpec}\n          port_name: {type: string, required: false}\n          unit: {type: string, default: B/s, description: Unit of the metric value,\n            required: true}\n          protocol: {type: string, default: tcp, required: false}\n          port: {type: PortDef, required: false}\n          name: {type: string, default: disk.device.write.bytes.rate, description: Ceilometer metric type name to monitor. (The name ceilometer is using),\n            required: true}\n          category: {type: string, default: disk, description: \'Category of the metric,\n              for an example, compute, disk, network, storage and etc.\', required: false}\n          url_path: {type: string, required: false}\n      Sec_IP_MUX_Demux 3.feature:\n        type: tosca.capabilities.Node\n        occurrences: [1, UNBOUNDED]\n      vHNF for DHV Test 17.disk.usage:\n        type: com.att.d2.capabilities.metric.Ceilometer\n        description: A node type that includes the Metric capability indicates that it can be monitored using ceilometer.\n        occurrences: [1, UNBOUNDED]\n        properties:\n          initiator: {type: string, default: source, required: false}\n          network_name: {type: string, default: PRIVATE, required: false}\n          description: {type: string, default: The physical size in bytes of the image container on the host,\n            description: Description of the metric, required: false}\n          type: {type: string, default: Gauge, description: \'Type of the metric value,\n              for an example, Cumulative, Delta, Gauge and etc.\', required: true}\n          secure: {type: boolean, default: false, required: false}\n          ports:\n            type: map\n            required: false\n            entry_schema: {type: PortSpec}\n          port_name: {type: string, required: false}\n          unit: {type: string, default: B, description: Unit of the metric value,\n            required: true}\n          protocol: {type: string, default: tcp, required: false}\n          port: {type: PortDef, required: false}\n          name: {type: string, default: disk.usage, description: Ceilometer metric type name to monitor. (The name ceilometer is using),\n            required: true}\n          category: {type: string, default: disk, description: \'Category of the metric,\n              for an example, compute, disk, network, storage and etc.\', required: false}\n          url_path: {type: string, required: false}\n      vHNF for DHV Test 17.disk.device.latency:\n        type: com.att.d2.capabilities.metric.Ceilometer\n        description: A node type that includes the Metric capability indicates that it can be monitored using ceilometer.\n        occurrences: [1, UNBOUNDED]\n        properties:\n          initiator: {type: string, default: source, required: false}\n          network_name: {type: string, default: PRIVATE, required: false}\n          description: {type: string, default: Average disk latency per device, description: Description of the metric,\n            required: false}\n          type: {type: string, default: Gauge, description: \'Type of the metric value,\n              for an example, Cumulative, Delta, Gauge and etc.\', required: true}\n          secure: {type: boolean, default: false, required: false}\n          ports:\n            type: map\n            required: false\n            entry_schema: {type: PortSpec}\n          port_name: {type: string, required: false}\n          unit: {type: string, default: ms, description: Unit of the metric value,\n            required: true}\n          protocol: {type: string, default: tcp, required: false}\n          port: {type: PortDef, required: false}\n          name: {type: string, default: disk.device.latency, description: Ceilometer metric type name to monitor. (The name ceilometer is using),\n            required: true}\n          category: {type: string, default: disk, description: \'Category of the metric,\n              for an example, compute, disk, network, storage and etc.\', required: false}\n          url_path: {type: string, required: false}\n      vHNF for DHV Test 17.memory.resident:\n        type: com.att.d2.capabilities.metric.Ceilometer\n        description: A node type that includes the Metric capability indicates that it can be monitored using ceilometer.\n        occurrences: [1, UNBOUNDED]\n        properties:\n          initiator: {type: string, default: source, required: false}\n          network_name: {type: string, default: PRIVATE, required: false}\n          description: {type: string, default: Volume of RAM used by the instance on the physical machine,\n            description: Description of the metric, required: false}\n          type: {type: string, default: Gauge, description: \'Type of the metric value,\n              for an example, Cumulative, Delta, Gauge and etc.\', required: true}\n          secure: {type: boolean, default: false, required: false}\n          ports:\n            type: map\n            required: false\n            entry_schema: {type: PortSpec}\n          port_name: {type: string, required: false}\n          unit: {type: string, default: MB, description: Unit of the metric value,\n            required: true}\n          protocol: {type: string, default: tcp, required: false}\n          port: {type: PortDef, required: false}\n          name: {type: string, default: memory.resident, description: Ceilometer metric type name to monitor. (The name ceilometer is using),\n            required: true}\n          category: {type: string, default: compute, description: \'Category of the\n              metric, for an example, compute, disk, network, storage and etc.\', required: false}\n          url_path: {type: string, required: false}\n      vHNF for DHV Test 17.network.outgoing.packets.rate:\n        type: com.att.d2.capabilities.metric.Ceilometer\n        description: A node type that includes the Metric capability indicates that it can be monitored using ceilometer.\n        occurrences: [1, UNBOUNDED]\n        properties:\n          initiator: {type: string, default: source, required: false}\n          network_name: {type: string, default: PRIVATE, required: false}\n          description: {type: string, default: Average rate of outgoing packets, description: Description of the metric,\n            required: false}\n          type: {type: string, default: Gauge, description: \'Type of the metric value,\n              for an example, Cumulative, Delta, Gauge and etc.\', required: true}\n          secure: {type: boolean, default: false, required: false}\n          ports:\n            type: map\n            required: false\n            entry_schema: {type: PortSpec}\n          port_name: {type: string, required: false}\n          unit: {type: string, default: packet/s, description: Unit of the metric value,\n            required: true}\n          protocol: {type: string, default: tcp, required: false}\n          port: {type: PortDef, required: false}\n          name: {type: string, default: network.outgoing.packets.rate, description: Ceilometer metric type name to monitor. (The name ceilometer is using),\n            required: true}\n          category: {type: string, default: network, description: \'Category of the\n              metric, for an example, compute, disk, network, storage and etc.\', required: false}\n          url_path: {type: string, required: false}\n      vHNF for DHV Test 17.disk.device.write.bytes:\n        type: com.att.d2.capabilities.metric.Ceilometer\n        description: A node type that includes the Metric capability indicates that it can be monitored using ceilometer.\n        occurrences: [1, UNBOUNDED]\n        properties:\n          initiator: {type: string, default: source, required: false}\n          network_name: {type: string, default: PRIVATE, required: false}\n          description: {type: string, default: Volume of writes, description: Description of the metric,\n            required: false}\n          type: {type: string, default: Cumulative, description: \'Type of the metric\n              value, for an example, Cumulative, Delta, Gauge and etc.\', required: true}\n          secure: {type: boolean, default: false, required: false}\n          ports:\n            type: map\n            required: false\n            entry_schema: {type: PortSpec}\n          port_name: {type: string, required: false}\n          unit: {type: string, default: B, description: Unit of the metric value,\n            required: true}\n          protocol: {type: string, default: tcp, required: false}\n          port: {type: PortDef, required: false}\n          name: {type: string, default: disk.device.write.bytes, description: Ceilometer metric type name to monitor. (The name ceilometer is using),\n            required: true}\n          category: {type: string, default: disk, description: \'Category of the metric,\n              for an example, compute, disk, network, storage and etc.\', required: false}\n          url_path: {type: string, required: false}\n      vHNF for DHV Test 17.disk.device.allocation:\n        type: com.att.d2.capabilities.metric.Ceilometer\n        description: A node type that includes the Metric capability indicates that it can be monitored using ceilometer.\n        occurrences: [1, UNBOUNDED]\n        properties:\n          initiator: {type: string, default: source, required: false}\n          network_name: {type: string, default: PRIVATE, required: false}\n          description: {type: string, default: The amount of disk per device occupied by the instance on the host machine,\n            description: Description of the metric, required: false}\n          type: {type: string, default: Gauge, description: \'Type of the metric value,\n              for an example, Cumulative, Delta, Gauge and etc.\', required: true}\n          secure: {type: boolean, default: false, required: false}\n          ports:\n            type: map\n            required: false\n            entry_schema: {type: PortSpec}\n          port_name: {type: string, required: false}\n          unit: {type: string, default: B, description: Unit of the metric value,\n            required: true}\n          protocol: {type: string, default: tcp, required: false}\n          port: {type: PortDef, required: false}\n          name: {type: string, default: disk.device.allocation, description: Ceilometer metric type name to monitor. (The name ceilometer is using),\n            required: true}\n          category: {type: string, default: disk, description: \'Category of the metric,\n              for an example, compute, disk, network, storage and etc.\', required: false}\n          url_path: {type: string, required: false}\n      Pri_Service_Admin 5.feature:\n        type: tosca.capabilities.Node\n        occurrences: [1, UNBOUNDED]\n      vHNF for DHV Test 17.disk.allocation:\n        type: com.att.d2.capabilities.metric.Ceilometer\n        description: A node type that includes the Metric capability indicates that it can be monitored using ceilometer.\n        occurrences: [1, UNBOUNDED]\n        properties:\n          initiator: {type: string, default: source, required: false}\n          network_name: {type: string, default: PRIVATE, required: false}\n          description: {type: string, default: The amount of disk occupied by the instance on the host machine,\n            description: Description of the metric, required: false}\n          type: {type: string, default: Gauge, description: \'Type of the metric value,\n              for an example, Cumulative, Delta, Gauge and etc.\', required: true}\n          secure: {type: boolean, default: false, required: false}\n          ports:\n            type: map\n            required: false\n            entry_schema: {type: PortSpec}\n          port_name: {type: string, required: false}\n          unit: {type: string, default: B, description: Unit of the metric value,\n            required: true}\n          protocol: {type: string, default: tcp, required: false}\n          port: {type: PortDef, required: false}\n          name: {type: string, default: disk.allocation, description: Ceilometer metric type name to monitor. (The name ceilometer is using),\n            required: true}\n          category: {type: string, default: disk, description: \'Category of the metric,\n              for an example, compute, disk, network, storage and etc.\', required: false}\n          url_path: {type: string, required: false}\n      vHNF for DHV Test 17.disk.device.write.requests:\n        type: com.att.d2.capabilities.metric.Ceilometer\n        description: A node type that includes the Metric capability indicates that it can be monitored using ceilometer.\n        occurrences: [1, UNBOUNDED]\n        properties:\n          initiator: {type: string, default: source, required: false}\n          network_name: {type: string, default: PRIVATE, required: false}\n          description: {type: string, default: Number of write requests, description: Description of the metric,\n            required: false}\n          type: {type: string, default: Cumulative, description: \'Type of the metric\n              value, for an example, Cumulative, Delta, Gauge and etc.\', required: true}\n          secure: {type: boolean, default: false, required: false}\n          ports:\n            type: map\n            required: false\n            entry_schema: {type: PortSpec}\n          port_name: {type: string, required: false}\n          unit: {type: string, default: request, description: Unit of the metric value,\n            required: true}\n          protocol: {type: string, default: tcp, required: false}\n          port: {type: PortDef, required: false}\n          name: {type: string, default: disk.device.write.requests, description: Ceilometer metric type name to monitor. (The name ceilometer is using),\n            required: true}\n          category: {type: string, default: disk, description: \'Category of the metric,\n              for an example, compute, disk, network, storage and etc.\', required: false}\n          url_path: {type: string, required: false}\n      vHNF for DHV Test 17.attachment:\n        type: tosca.capabilities.Attachment\n        occurrences: [1, UNBOUNDED]\n      vHNF for DHV Test 17.disk.capacity:\n        type: com.att.d2.capabilities.metric.Ceilometer\n        description: A node type that includes the Metric capability indicates that it can be monitored using ceilometer.\n        occurrences: [1, UNBOUNDED]\n        properties:\n          initiator: {type: string, default: source, required: false}\n          network_name: {type: string, default: PRIVATE, required: false}\n          description: {type: string, default: The amount of disk that the instance can see,\n            description: Description of the metric, required: false}\n          type: {type: string, default: Gauge, description: \'Type of the metric value,\n              for an example, Cumulative, Delta, Gauge and etc.\', required: true}\n          secure: {type: boolean, default: false, required: false}\n          ports:\n            type: map\n            required: false\n            entry_schema: {type: PortSpec}\n          port_name: {type: string, required: false}\n          unit: {type: string, default: B, description: Unit of the metric value,\n            required: true}\n          protocol: {type: string, default: tcp, required: false}\n          port: {type: PortDef, required: false}\n          name: {type: string, default: disk.capacity, description: Ceilometer metric type name to monitor. (The name ceilometer is using),\n            required: true}\n          category: {type: string, default: disk, description: \'Category of the metric,\n              for an example, compute, disk, network, storage and etc.\', required: false}\n          url_path: {type: string, required: false}\n      vHNF for DHV Test 17.network.incoming.packets.rate:\n        type: com.att.d2.capabilities.metric.Ceilometer\n        description: A node type that includes the Metric capability indicates that it can be monitored using ceilometer.\n        occurrences: [1, UNBOUNDED]\n        properties:\n          initiator: {type: string, default: source, required: false}\n          network_name: {type: string, default: PRIVATE, required: false}\n          description: {type: string, default: Average rate of incoming packets, description: Description of the metric,\n            required: false}\n          type: {type: string, default: Gauge, description: \'Type of the metric value,\n              for an example, Cumulative, Delta, Gauge and etc.\', required: true}\n          secure: {type: boolean, default: false, required: false}\n          ports:\n            type: map\n            required: false\n            entry_schema: {type: PortSpec}\n          port_name: {type: string, required: false}\n          unit: {type: string, default: packet/s, description: Unit of the metric value,\n            required: true}\n          protocol: {type: string, default: tcp, required: false}\n          port: {type: PortDef, required: false}\n          name: {type: string, default: network.incoming.packets.rate, description: Ceilometer metric type name to monitor. (The name ceilometer is using),\n            required: true}\n          category: {type: string, default: network, description: \'Category of the\n              metric, for an example, compute, disk, network, storage and etc.\', required: false}\n          url_path: {type: string, required: false}\n      vHNF for DHV Test 17.disk.latency:\n        type: com.att.d2.capabilities.metric.Ceilometer\n        description: A node type that includes the Metric capability indicates that it can be monitored using ceilometer.\n        occurrences: [1, UNBOUNDED]\n        properties:\n          initiator: {type: string, default: source, required: false}\n          network_name: {type: string, default: PRIVATE, required: false}\n          description: {type: string, default: Average disk latency, description: Description of the metric,\n            required: false}\n          type: {type: string, default: Gauge, description: \'Type of the metric value,\n              for an example, Cumulative, Delta, Gauge and etc.\', required: true}\n          secure: {type: boolean, default: false, required: false}\n          ports:\n            type: map\n            required: false\n            entry_schema: {type: PortSpec}\n          port_name: {type: string, required: false}\n          unit: {type: string, default: ms, description: Unit of the metric value,\n            required: true}\n          protocol: {type: string, default: tcp, required: false}\n          port: {type: PortDef, required: false}\n          name: {type: string, default: disk.latency, description: Ceilometer metric type name to monitor. (The name ceilometer is using),\n            required: true}\n          category: {type: string, default: disk, description: \'Category of the metric,\n              for an example, compute, disk, network, storage and etc.\', required: false}\n          url_path: {type: string, required: false}\n      vHNF for DHV Test 17.host:\n        type: tosca.capabilities.Container\n        occurrences: [1, UNBOUNDED]\n        valid_source_types: [tosca.nodes.SoftwareComponent]\n        properties:\n          num_cpus: {type: integer, required: false}\n          disk_size: {type: scalar-unit.size, required: false}\n          cpu_frequency: {type: scalar-unit.frequency, required: false}\n          mem_size: {type: scalar-unit.size, required: false}\n      vHNF for DHV Test 17.disk.device.read.bytes.rate:\n        type: com.att.d2.capabilities.metric.Ceilometer\n        description: A node type that includes the Metric capability indicates that it can be monitored using ceilometer.\n        occurrences: [1, UNBOUNDED]\n        properties:\n          initiator: {type: string, default: source, required: false}\n          network_name: {type: string, default: PRIVATE, required: false}\n          description: {type: string, default: Average rate of reads, description: Description of the metric,\n            required: false}\n          type: {type: string, default: Gauge, description: \'Type of the metric value,\n              for an example, Cumulative, Delta, Gauge and etc.\', required: true}\n          secure: {type: boolean, default: false, required: false}\n          ports:\n            type: map\n            required: false\n            entry_schema: {type: PortSpec}\n          port_name: {type: string, required: false}\n          unit: {type: string, default: B/s, description: Unit of the metric value,\n            required: true}\n          protocol: {type: string, default: tcp, required: false}\n          port: {type: PortDef, required: false}\n          name: {type: string, default: disk.device.read.bytes.rate, description: Ceilometer metric type name to monitor. (The name ceilometer is using),\n            required: true}\n          category: {type: string, default: disk, description: \'Category of the metric,\n              for an example, compute, disk, network, storage and etc.\', required: false}\n          url_path: {type: string, required: false}\n      vHNF for DHV Test 17.disk.ephemeral.size:\n        type: com.att.d2.capabilities.metric.Ceilometer\n        description: A node type that includes the Metric capability indicates that it can be monitored using ceilometer.\n        occurrences: [1, UNBOUNDED]\n        properties:\n          initiator: {type: string, default: source, required: false}\n          network_name: {type: string, default: PRIVATE, required: false}\n          description: {type: string, default: Size of ephemeral disk, description: Description of the metric,\n            required: false}\n          type: {type: string, default: Gauge, description: \'Type of the metric value,\n              for an example, Cumulative, Delta, Gauge and etc.\', required: true}\n          secure: {type: boolean, default: false, required: false}\n          ports:\n            type: map\n            required: false\n            entry_schema: {type: PortSpec}\n          port_name: {type: string, required: false}\n          unit: {type: string, default: GB, description: Unit of the metric value,\n            required: true}\n          protocol: {type: string, default: tcp, required: false}\n          port: {type: PortDef, required: false}\n          name: {type: string, default: disk.ephemeral.size, description: Ceilometer metric type name to monitor. (The name ceilometer is using),\n            required: true}\n          category: {type: string, default: compute, description: \'Category of the\n              metric, for an example, compute, disk, network, storage and etc.\', required: false}\n          url_path: {type: string, required: false}\n      vHNF for DHV Test 17.cpu_util:\n        type: com.att.d2.capabilities.metric.Ceilometer\n        description: A node type that includes the Metric capability indicates that it can be monitored using ceilometer.\n        occurrences: [1, UNBOUNDED]\n        properties:\n          initiator: {type: string, default: source, required: false}\n          network_name: {type: string, default: PRIVATE, required: false}\n          description: {type: string, default: Average CPU utilization, description: Description of the metric,\n            required: false}\n          type: {type: string, default: Gauge, description: \'Type of the metric value,\n              for an example, Cumulative, Delta, Gauge and etc.\', required: true}\n          secure: {type: boolean, default: false, required: false}\n          ports:\n            type: map\n            required: false\n            entry_schema: {type: PortSpec}\n          port_name: {type: string, required: false}\n          unit: {type: string, default: \'%\', description: Unit of the metric value,\n            required: true}\n          protocol: {type: string, default: tcp, required: false}\n          port: {type: PortDef, required: false}\n          name: {type: string, default: cpu_util, description: Ceilometer metric type name to monitor. (The name ceilometer is using),\n            required: true}\n          category: {type: string, default: compute, description: \'Category of the\n              metric, for an example, compute, disk, network, storage and etc.\', required: false}\n          url_path: {type: string, required: false}\n      vHNF for DHV Test 17.disk.write.requests:\n        type: com.att.d2.capabilities.metric.Ceilometer\n        description: A node type that includes the Metric capability indicates that it can be monitored using ceilometer.\n        occurrences: [1, UNBOUNDED]\n        properties:\n          initiator: {type: string, default: source, required: false}\n          network_name: {type: string, default: PRIVATE, required: false}\n          description: {type: string, default: Number of write requests, description: Description of the metric,\n            required: false}\n          type: {type: string, default: Cumulative, description: \'Type of the metric\n              value, for an example, Cumulative, Delta, Gauge and etc.\', required: true}\n          secure: {type: boolean, default: false, required: false}\n          ports:\n            type: map\n            required: false\n            entry_schema: {type: PortSpec}\n          port_name: {type: string, required: false}\n          unit: {type: string, default: request, description: Unit of the metric value,\n            required: true}\n          protocol: {type: string, default: tcp, required: false}\n          port: {type: PortDef, required: false}\n          name: {type: string, default: disk.write.requests, description: Ceilometer metric type name to monitor. (The name ceilometer is using),\n            required: true}\n          category: {type: string, default: compute, description: \'Category of the\n              metric, for an example, compute, disk, network, storage and etc.\', required: false}\n          url_path: {type: string, required: false}\n      vHNF for DHV Test 17.disk.read.requests:\n        type: com.att.d2.capabilities.metric.Ceilometer\n        description: A node type that includes the Metric capability indicates that it can be monitored using ceilometer.\n        occurrences: [1, UNBOUNDED]\n        properties:\n          initiator: {type: string, default: source, required: false}\n          network_name: {type: string, default: PRIVATE, required: false}\n          description: {type: string, default: Number of read requests, description: Description of the metric,\n            required: false}\n          type: {type: string, default: Cumulative, description: \'Type of the metric\n              value, for an example, Cumulative, Delta, Gauge and etc.\', required: true}\n          secure: {type: boolean, default: false, required: false}\n          ports:\n            type: map\n            required: false\n            entry_schema: {type: PortSpec}\n          port_name: {type: string, required: false}\n          unit: {type: string, default: request, description: Unit of the metric value,\n            required: true}\n          protocol: {type: string, default: tcp, required: false}\n          port: {type: PortDef, required: false}\n          name: {type: string, default: disk.read.requests, description: Ceilometer metric type name to monitor. (The name ceilometer is using),\n            required: true}\n          category: {type: string, default: compute, description: \'Category of the\n              metric, for an example, compute, disk, network, storage and etc.\', required: false}\n          url_path: {type: string, required: false}\n      vHNF for DHV Test 17.cpu:\n        type: com.att.d2.capabilities.metric.Ceilometer\n        description: A node type that includes the Metric capability indicates that it can be monitored using ceilometer.\n        occurrences: [1, UNBOUNDED]\n        properties:\n          initiator: {type: string, default: source, required: false}\n          network_name: {type: string, default: PRIVATE, required: false}\n          description: {type: string, default: CPU time used, description: Description of the metric,\n            required: false}\n          type: {type: string, default: Cumulative, description: \'Type of the metric\n              value, for an example, Cumulative, Delta, Gauge and etc.\', required: true}\n          secure: {type: boolean, default: false, required: false}\n          ports:\n            type: map\n            required: false\n            entry_schema: {type: PortSpec}\n          port_name: {type: string, required: false}\n          unit: {type: string, default: ns, description: Unit of the metric value,\n            required: true}\n          protocol: {type: string, default: tcp, required: false}\n          port: {type: PortDef, required: false}\n          name: {type: string, default: cpu, description: Ceilometer metric type name to monitor. (The name ceilometer is using),\n            required: true}\n          category: {type: string, default: compute, description: \'Category of the\n              metric, for an example, compute, disk, network, storage and etc.\', required: false}\n          url_path: {type: string, required: false}\n      vHNF for DHV Test 17.disk.write.bytes.rate:\n        type: com.att.d2.capabilities.metric.Ceilometer\n        description: A node type that includes the Metric capability indicates that it can be monitored using ceilometer.\n        occurrences: [1, UNBOUNDED]\n        properties:\n          initiator: {type: string, default: source, required: false}\n          network_name: {type: string, default: PRIVATE, required: false}\n          description: {type: string, default: Average rate of writes, description: Description of the metric,\n            required: false}\n          type: {type: string, default: Gauge, description: \'Type of the metric value,\n              for an example, Cumulative, Delta, Gauge and etc.\', required: true}\n          secure: {type: boolean, default: false, required: false}\n          ports:\n            type: map\n            required: false\n            entry_schema: {type: PortSpec}\n          port_name: {type: string, required: false}\n          unit: {type: string, default: B/s, description: Unit of the metric value,\n            required: true}\n          protocol: {type: string, default: tcp, required: false}\n          port: {type: PortDef, required: false}\n          name: {type: string, default: disk.write.bytes.rate, description: Ceilometer metric type name to monitor. (The name ceilometer is using),\n            required: true}\n          category: {type: string, default: compute, description: \'Category of the\n              metric, for an example, compute, disk, network, storage and etc.\', required: false}\n          url_path: {type: string, required: false}\n      vHNF for DHV Test 17.network.incoming.bytes:\n        type: com.att.d2.capabilities.metric.Ceilometer\n        description: A node type that includes the Metric capability indicates that it can be monitored using ceilometer.\n        occurrences: [1, UNBOUNDED]\n        properties:\n          initiator: {type: string, default: source, required: false}\n          network_name: {type: string, default: PRIVATE, required: false}\n          description: {type: string, default: Number of incoming bytes, description: Description of the metric,\n            required: false}\n          type: {type: string, default: Cumulative, description: \'Type of the metric\n              value, for an example, Cumulative, Delta, Gauge and etc.\', required: true}\n          secure: {type: boolean, default: false, required: false}\n          ports:\n            type: map\n            required: false\n            entry_schema: {type: PortSpec}\n          port_name: {type: string, required: false}\n          unit: {type: string, default: B, description: Unit of the metric value,\n            required: true}\n          protocol: {type: string, default: tcp, required: false}\n          port: {type: PortDef, required: false}\n          name: {type: string, default: network.incoming.bytes, description: Ceilometer metric type name to monitor. (The name ceilometer is using),\n            required: true}\n          category: {type: string, default: network, description: \'Category of the\n              metric, for an example, compute, disk, network, storage and etc.\', required: false}\n          url_path: {type: string, required: false}\n      vHNF for DHV Test 17.scalable:\n        type: tosca.capabilities.Scalable\n        occurrences: [1, UNBOUNDED]\n        properties:\n          max_instances: {type: integer, default: 1, required: false}\n          min_instances: {type: integer, default: 1, required: false}\n          default_instances: {type: integer, required: false}\n      vHNF for DHV Test 17.cpu.delta:\n        type: com.att.d2.capabilities.metric.Ceilometer\n        description: A node type that includes the Metric capability indicates that it can be monitored using ceilometer.\n        occurrences: [1, UNBOUNDED]\n        properties:\n          initiator: {type: string, default: source, required: false}\n          network_name: {type: string, default: PRIVATE, required: false}\n          description: {type: string, default: CPU time used since previous datapoint,\n            description: Description of the metric, required: false}\n          type: {type: string, default: Delta, description: \'Type of the metric value,\n              for an example, Cumulative, Delta, Gauge and etc.\', required: true}\n          secure: {type: boolean, default: false, required: false}\n          ports:\n            type: map\n            required: false\n            entry_schema: {type: PortSpec}\n          port_name: {type: string, required: false}\n          unit: {type: string, default: ns, description: Unit of the metric value,\n            required: true}\n          protocol: {type: string, default: tcp, required: false}\n          port: {type: PortDef, required: false}\n          name: {type: string, default: cpu.delta, description: Ceilometer metric type name to monitor. (The name ceilometer is using),\n            required: true}\n          category: {type: string, default: compute, description: \'Category of the\n              metric, for an example, compute, disk, network, storage and etc.\', required: false}\n          url_path: {type: string, required: false}\n      vHNF for DHV Test 17.instance:\n        type: com.att.d2.capabilities.metric.Ceilometer\n        description: A node type that includes the Metric capability indicates that it can be monitored using ceilometer.\n        occurrences: [1, UNBOUNDED]\n        properties:\n          initiator: {type: string, default: source, required: false}\n          network_name: {type: string, default: PRIVATE, required: false}\n          description: {type: string, default: Existence of instance, description: Description of the metric,\n            required: false}\n          type: {type: string, default: Gauge, description: \'Type of the metric value,\n              for an example, Cumulative, Delta, Gauge and etc.\', required: true}\n          secure: {type: boolean, default: false, required: false}\n          ports:\n            type: map\n            required: false\n            entry_schema: {type: PortSpec}\n          port_name: {type: string, required: false}\n          unit: {type: string, default: instance, description: Unit of the metric value,\n            required: true}\n          protocol: {type: string, default: tcp, required: false}\n          port: {type: PortDef, required: false}\n          name: {type: string, default: instance, description: Ceilometer metric type name to monitor. (The name ceilometer is using),\n            required: true}\n          category: {type: string, default: compute, description: \'Category of the\n              metric, for an example, compute, disk, network, storage and etc.\', required: false}\n          url_path: {type: string, required: false}\n      vHNF for DHV Test 17.memory:\n        type: com.att.d2.capabilities.metric.Ceilometer\n        description: A node type that includes the Metric capability indicates that it can be monitored using ceilometer.\n        occurrences: [1, UNBOUNDED]\n        properties:\n          initiator: {type: string, default: source, required: false}\n          network_name: {type: string, default: PRIVATE, required: false}\n          description: {type: string, default: Volume of RAM allocated to the instance,\n            description: Description of the metric, required: false}\n          type: {type: string, default: Gauge, description: \'Type of the metric value,\n              for an example, Cumulative, Delta, Gauge and etc.\', required: true}\n          secure: {type: boolean, default: false, required: false}\n          ports:\n            type: map\n            required: false\n            entry_schema: {type: PortSpec}\n          port_name: {type: string, required: false}\n          unit: {type: string, default: MB, description: Unit of the metric value,\n            required: true}\n          protocol: {type: string, default: tcp, required: false}\n          port: {type: PortDef, required: false}\n          name: {type: string, default: memory, description: Ceilometer metric type name to monitor. (The name ceilometer is using),\n            required: true}\n          category: {type: string, default: compute, description: \'Category of the\n              metric, for an example, compute, disk, network, storage and etc.\', required: false}\n          url_path: {type: string, required: false}\n      vHNF for DHV Test 17.disk.read.bytes:\n        type: com.att.d2.capabilities.metric.Ceilometer\n        description: A node type that includes the Metric capability indicates that it can be monitored using ceilometer.\n        occurrences: [1, UNBOUNDED]\n        properties:\n          initiator: {type: string, default: source, required: false}\n          network_name: {type: string, default: PRIVATE, required: false}\n          description: {type: string, default: Volume of reads, description: Description of the metric,\n            required: false}\n          type: {type: string, default: Cumulative, description: \'Type of the metric\n              value, for an example, Cumulative, Delta, Gauge and etc.\', required: true}\n          secure: {type: boolean, default: false, required: false}\n          ports:\n            type: map\n            required: false\n            entry_schema: {type: PortSpec}\n          port_name: {type: string, required: false}\n          unit: {type: string, default: B, description: Unit of the metric value,\n            required: true}\n          protocol: {type: string, default: tcp, required: false}\n          port: {type: PortDef, required: false}\n          name: {type: string, default: disk.read.bytes, description: Ceilometer metric type name to monitor. (The name ceilometer is using),\n            required: true}\n          category: {type: string, default: compute, description: \'Category of the\n              metric, for an example, compute, disk, network, storage and etc.\', required: false}\n          url_path: {type: string, required: false}\n      vHNF for DHV Test 17.disk.iops:\n        type: com.att.d2.capabilities.metric.Ceilometer\n        description: A node type that includes the Metric capability indicates that it can be monitored using ceilometer.\n        occurrences: [1, UNBOUNDED]\n        properties:\n          initiator: {type: string, default: source, required: false}\n          network_name: {type: string, default: PRIVATE, required: false}\n          description: {type: string, default: Average disk iops, description: Description of the metric,\n            required: false}\n          type: {type: string, default: Gauge, description: \'Type of the metric value,\n              for an example, Cumulative, Delta, Gauge and etc.\', required: true}\n          secure: {type: boolean, default: false, required: false}\n          ports:\n            type: map\n            required: false\n            entry_schema: {type: PortSpec}\n          port_name: {type: string, required: false}\n          unit: {type: string, default: count/s, description: Unit of the metric value,\n            required: true}\n          protocol: {type: string, default: tcp, required: false}\n          port: {type: PortDef, required: false}\n          name: {type: string, default: disk.iops, description: Ceilometer metric type name to monitor. (The name ceilometer is using),\n            required: true}\n          category: {type: string, default: disk, description: \'Category of the metric,\n              for an example, compute, disk, network, storage and etc.\', required: false}\n          url_path: {type: string, required: false}\n      vHNF for DHV Test 17.disk.device.usage:\n        type: com.att.d2.capabilities.metric.Ceilometer\n        description: A node type that includes the Metric capability indicates that it can be monitored using ceilometer.\n        occurrences: [1, UNBOUNDED]\n        properties:\n          initiator: {type: string, default: source, required: false}\n          network_name: {type: string, default: PRIVATE, required: false}\n          description: {type: string, default: The physical size in bytes of the image container on the host per device,\n            description: Description of the metric, required: false}\n          type: {type: string, default: Gauge, description: \'Type of the metric value,\n              for an example, Cumulative, Delta, Gauge and etc.\', required: true}\n          secure: {type: boolean, default: false, required: false}\n          ports:\n            type: map\n            required: false\n            entry_schema: {type: PortSpec}\n          port_name: {type: string, required: false}\n          unit: {type: string, default: B, description: Unit of the metric value,\n            required: true}\n          protocol: {type: string, default: tcp, required: false}\n          port: {type: PortDef, required: false}\n          name: {type: string, default: disk.device.usage, description: Ceilometer metric type name to monitor. (The name ceilometer is using),\n            required: true}\n          category: {type: string, default: disk, description: \'Category of the metric,\n              for an example, compute, disk, network, storage and etc.\', required: false}\n          url_path: {type: string, required: false}\n      vHNF for DHV Test 17.disk.device.read.requests:\n        type: com.att.d2.capabilities.metric.Ceilometer\n        description: A node type that includes the Metric capability indicates that it can be monitored using ceilometer.\n        occurrences: [1, UNBOUNDED]\n        properties:\n          initiator: {type: string, default: source, required: false}\n          network_name: {type: string, default: PRIVATE, required: false}\n          description: {type: string, default: Number of read requests, description: Description of the metric,\n            required: false}\n          type: {type: string, default: Cumulative, description: \'Type of the metric\n              value, for an example, Cumulative, Delta, Gauge and etc.\', required: true}\n          secure: {type: boolean, default: false, required: false}\n          ports:\n            type: map\n            required: false\n            entry_schema: {type: PortSpec}\n          port_name: {type: string, required: false}\n          unit: {type: string, default: request, description: Unit of the metric value,\n            required: true}\n          protocol: {type: string, default: tcp, required: false}\n          port: {type: PortDef, required: false}\n          name: {type: string, default: disk.device.read.requests, description: Ceilometer metric type name to monitor. (The name ceilometer is using),\n            required: true}\n          category: {type: string, default: disk, description: \'Category of the metric,\n              for an example, compute, disk, network, storage and etc.\', required: false}\n          url_path: {type: string, required: false}\n      Sec_Service_Admin 7.feature:\n        type: tosca.capabilities.Node\n        occurrences: [1, UNBOUNDED]\n      vHNF for DHV Test 17.disk.device.capacity:\n        type: com.att.d2.capabilities.metric.Ceilometer\n        description: A node type that includes the Metric capability indicates that it can be monitored using ceilometer.\n        occurrences: [1, UNBOUNDED]\n        properties:\n          initiator: {type: string, default: source, required: false}\n          network_name: {type: string, default: PRIVATE, required: false}\n          description: {type: string, default: The amount of disk per device that the instance can see,\n            description: Description of the metric, required: false}\n          type: {type: string, default: Gauge, description: \'Type of the metric value,\n              for an example, Cumulative, Delta, Gauge and etc.\', required: true}\n          secure: {type: boolean, default: false, required: false}\n          ports:\n            type: map\n            required: false\n            entry_schema: {type: PortSpec}\n          port_name: {type: string, required: false}\n          unit: {type: string, default: B, description: Unit of the metric value,\n            required: true}\n          protocol: {type: string, default: tcp, required: false}\n          port: {type: PortDef, required: false}\n          name: {type: string, default: disk.device.capacity, description: Ceilometer metric type name to monitor. (The name ceilometer is using),\n            required: true}\n          category: {type: string, default: disk, description: \'Category of the metric,\n              for an example, compute, disk, network, storage and etc.\', required: false}\n          url_path: {type: string, required: false}\n      vHNF for DHV Test 17.os:\n        type: tosca.capabilities.OperatingSystem\n        occurrences: [1, UNBOUNDED]\n        properties:\n          type: {type: string, required: false}\n          distribution: {type: string, required: false}\n          version: {type: version, required: false}\n          architecture: {type: string, required: false}\n      Sec_Tunnel_Xconn 11.feature:\n        type: tosca.capabilities.Node\n        occurrences: [1, UNBOUNDED]\n      vHNF for DHV Test 17.binding:\n        type: tosca.capabilities.network.Bindable\n        occurrences: [0, UNBOUNDED]\n        valid_source_types: [com.att.d2.resource.cp.nodes.heat.network.contrailV2.VLANSubInterface]\n      vHNF for DHV Test 17.disk.read.bytes.rate:\n        type: com.att.d2.capabilities.metric.Ceilometer\n        description: A node type that includes the Metric capability indicates that it can be monitored using ceilometer.\n        occurrences: [1, UNBOUNDED]\n        properties:\n          initiator: {type: string, default: source, required: false}\n          network_name: {type: string, default: PRIVATE, required: false}\n          description: {type: string, default: Average rate of reads, description: Description of the metric,\n            required: false}\n          type: {type: string, default: Gauge, description: \'Type of the metric value,\n              for an example, Cumulative, Delta, Gauge and etc.\', required: true}\n          secure: {type: boolean, default: false, required: false}\n          ports:\n            type: map\n            required: false\n            entry_schema: {type: PortSpec}\n          port_name: {type: string, required: false}\n          unit: {type: string, default: B/s, description: Unit of the metric value,\n            required: true}\n          protocol: {type: string, default: tcp, required: false}\n          port: {type: PortDef, required: false}\n          name: {type: string, default: disk.read.bytes.rate, description: Ceilometer metric type name to monitor. (The name ceilometer is using),\n            required: true}\n          category: {type: string, default: compute, description: \'Category of the\n              metric, for an example, compute, disk, network, storage and etc.\', required: false}\n          url_path: {type: string, required: false}\n      vHNF for DHV Test 17.disk.device.read.bytes:\n        type: com.att.d2.capabilities.metric.Ceilometer\n        description: A node type that includes the Metric capability indicates that it can be monitored using ceilometer.\n        occurrences: [1, UNBOUNDED]\n        properties:\n          initiator: {type: string, default: source, required: false}\n          network_name: {type: string, default: PRIVATE, required: false}\n          description: {type: string, default: Volume of reads, description: Description of the metric,\n            required: false}\n          type: {type: string, default: Cumulative, description: \'Type of the metric\n              value, for an example, Cumulative, Delta, Gauge and etc.\', required: true}\n          secure: {type: boolean, default: false, required: false}\n          ports:\n            type: map\n            required: false\n            entry_schema: {type: PortSpec}\n          port_name: {type: string, required: false}\n          unit: {type: string, default: B, description: Unit of the metric value,\n            required: true}\n          protocol: {type: string, default: tcp, required: false}\n          port: {type: PortDef, required: false}\n          name: {type: string, default: disk.device.read.bytes, description: Ceilometer metric type name to monitor. (The name ceilometer is using),\n            required: true}\n          category: {type: string, default: disk, description: \'Category of the metric,\n              for an example, compute, disk, network, storage and etc.\', required: false}\n          url_path: {type: string, required: false}\n      vHNF for DHV Test 17.feature:\n        type: tosca.capabilities.Node\n        occurrences: [1, UNBOUNDED]\n      Pri_Tunnel_Xconn 9.feature:\n        type: tosca.capabilities.Node\n        occurrences: [1, UNBOUNDED]\n      vHNF for DHV Test 17.vcpus:\n        type: com.att.d2.capabilities.metric.Ceilometer\n        description: A node type that includes the Metric capability indicates that it can be monitored using ceilometer.\n        occurrences: [1, UNBOUNDED]\n        properties:\n          initiator: {type: string, default: source, required: false}\n          network_name: {type: string, default: PRIVATE, required: false}\n          description: {type: string, default: Number of virtual CPUs allocated to the instance,\n            description: Description of the metric, required: false}\n          type: {type: string, default: Gauge, description: \'Type of the metric value,\n              for an example, Cumulative, Delta, Gauge and etc.\', required: true}\n          secure: {type: boolean, default: false, required: false}\n          ports:\n            type: map\n            required: false\n            entry_schema: {type: PortSpec}\n          port_name: {type: string, required: false}\n          unit: {type: string, default: vcpu, description: Unit of the metric value,\n            required: true}\n          protocol: {type: string, default: tcp, required: false}\n          port: {type: PortDef, required: false}\n          name: {type: string, default: vcpus, description: Ceilometer metric type name to monitor. (The name ceilometer is using),\n            required: true}\n          category: {type: string, default: compute, description: \'Category of the\n              metric, for an example, compute, disk, network, storage and etc.\', required: false}\n          url_path: {type: string, required: false}\n      vHNF for DHV Test 17.disk.device.iops:\n        type: com.att.d2.capabilities.metric.Ceilometer\n        description: A node type that includes the Metric capability indicates that it can be monitored using ceilometer.\n        occurrences: [1, UNBOUNDED]\n        properties:\n          initiator: {type: string, default: source, required: false}\n          network_name: {type: string, default: PRIVATE, required: false}\n          description: {type: string, default: Average disk iops per device, description: Description of the metric,\n            required: false}\n          type: {type: string, default: Gauge, description: \'Type of the metric value,\n              for an example, Cumulative, Delta, Gauge and etc.\', required: true}\n          secure: {type: boolean, default: false, required: false}\n          ports:\n            type: map\n            required: false\n            entry_schema: {type: PortSpec}\n          port_name: {type: string, required: false}\n          unit: {type: string, default: count/s, description: Unit of the metric value,\n            required: true}\n          protocol: {type: string, default: tcp, required: false}\n          port: {type: PortDef, required: false}\n          name: {type: string, default: disk.device.iops, description: Ceilometer metric type name to monitor. (The name ceilometer is using),\n            required: true}\n          category: {type: string, default: disk, description: \'Category of the metric,\n              for an example, compute, disk, network, storage and etc.\', required: false}\n          url_path: {type: string, required: false}\n      vHNF for DHV Test 17.network.incoming.packets:\n        type: com.att.d2.capabilities.metric.Ceilometer\n        description: A node type that includes the Metric capability indicates that it can be monitored using ceilometer.\n        occurrences: [1, UNBOUNDED]\n        properties:\n          initiator: {type: string, default: source, required: false}\n          network_name: {type: string, default: PRIVATE, required: false}\n          description: {type: string, default: Number of incoming packets, description: Description of the metric,\n            required: false}\n          type: {type: string, default: Cumulative, description: \'Type of the metric\n              value, for an example, Cumulative, Delta, Gauge and etc.\', required: true}\n          secure: {type: boolean, default: false, required: false}\n          ports:\n            type: map\n            required: false\n            entry_schema: {type: PortSpec}\n          port_name: {type: string, required: false}\n          unit: {type: string, default: packet, description: Unit of the metric value,\n            required: true}\n          protocol: {type: string, default: tcp, required: false}\n          port: {type: PortDef, required: false}\n          name: {type: string, default: network.incoming.packets, description: Ceilometer metric type name to monitor. (The name ceilometer is using),\n            required: true}\n          category: {type: string, default: network, description: \'Category of the\n              metric, for an example, compute, disk, network, storage and etc.\', required: false}\n          url_path: {type: string, required: false}\n      vHNF for DHV Test 17.disk.write.requests.rate:\n        type: com.att.d2.capabilities.metric.Ceilometer\n        description: A node type that includes the Metric capability indicates that it can be monitored using ceilometer.\n        occurrences: [1, UNBOUNDED]\n        properties:\n          initiator: {type: string, default: source, required: false}\n          network_name: {type: string, default: PRIVATE, required: false}\n          description: {type: string, default: Average rate of write requests, description: Description of the metric,\n            required: false}\n          type: {type: string, default: Gauge, description: \'Type of the metric value,\n              for an example, Cumulative, Delta, Gauge and etc.\', required: true}\n          secure: {type: boolean, default: false, required: false}\n          ports:\n            type: map\n            required: false\n            entry_schema: {type: PortSpec}\n          port_name: {type: string, required: false}\n          unit: {type: string, default: request/s, description: Unit of the metric value,\n            required: true}\n          protocol: {type: string, default: tcp, required: false}\n          port: {type: PortDef, required: false}\n          name: {type: string, default: disk.write.requests.rate, description: Ceilometer metric type name to monitor. (The name ceilometer is using),\n            required: true}\n          category: {type: string, default: compute, description: \'Category of the\n              metric, for an example, compute, disk, network, storage and etc.\', required: false}\n          url_path: {type: string, required: false}\n      vHNF for DHV Test 17.network.incoming.bytes.rate:\n        type: com.att.d2.capabilities.metric.Ceilometer\n        description: A node type that includes the Metric capability indicates that it can be monitored using ceilometer.\n        occurrences: [1, UNBOUNDED]\n        properties:\n          initiator: {type: string, default: source, required: false}\n          network_name: {type: string, default: PRIVATE, required: false}\n          description: {type: string, default: Average rate of incoming bytes, description: Description of the metric,\n            required: false}\n          type: {type: string, default: Gauge, description: \'Type of the metric value,\n              for an example, Cumulative, Delta, Gauge and etc.\', required: true}\n          secure: {type: boolean, default: false, required: false}\n          ports:\n            type: map\n            required: false\n            entry_schema: {type: PortSpec}\n          port_name: {type: string, required: false}\n          unit: {type: string, default: B/s, description: Unit of the metric value,\n            required: true}\n          protocol: {type: string, default: tcp, required: false}\n          port: {type: PortDef, required: false}\n          name: {type: string, default: network.incoming.bytes.rate, description: Ceilometer metric type name to monitor. (The name ceilometer is using),\n            required: true}\n          category: {type: string, default: network, description: \'Category of the\n              metric, for an example, compute, disk, network, storage and etc.\', required: false}\n          url_path: {type: string, required: false}\n      vHNF for DHV Test 17.network.outpoing.packets:\n        type: com.att.d2.capabilities.metric.Ceilometer\n        description: A node type that includes the Metric capability indicates that it can be monitored using ceilometer.\n        occurrences: [1, UNBOUNDED]\n        properties:\n          initiator: {type: string, default: source, required: false}\n          network_name: {type: string, default: PRIVATE, required: false}\n          description: {type: string, default: Number of outgoing packets, description: Description of the metric,\n            required: false}\n          type: {type: string, default: Cumulative, description: \'Type of the metric\n              value, for an example, Cumulative, Delta, Gauge and etc.\', required: true}\n          secure: {type: boolean, default: false, required: false}\n          ports:\n            type: map\n            required: false\n            entry_schema: {type: PortSpec}\n          port_name: {type: string, required: false}\n          unit: {type: string, default: packet, description: Unit of the metric value,\n            required: true}\n          protocol: {type: string, default: tcp, required: false}\n          port: {type: PortDef, required: false}\n          name: {type: string, default: network.outpoing.packets, description: Ceilometer metric type name to monitor. (The name ceilometer is using),\n            required: true}\n          category: {type: string, default: network, description: \'Category of the\n              metric, for an example, compute, disk, network, storage and etc.\', required: false}\n          url_path: {type: string, required: false}\n      vHNF for DHV Test 17.memory.usage:\n        type: com.att.d2.capabilities.metric.Ceilometer\n        description: A node type that includes the Metric capability indicates that it can be monitored using ceilometer.\n        occurrences: [1, UNBOUNDED]\n        properties:\n          initiator: {type: string, default: source, required: false}\n          network_name: {type: string, default: PRIVATE, required: false}\n          description: {type: string, default: Volume of RAM used by the instance from the amount of its allocated memory,\n            description: Description of the metric, required: false}\n          type: {type: string, default: Gauge, description: \'Type of the metric value,\n              for an example, Cumulative, Delta, Gauge and etc.\', required: true}\n          secure: {type: boolean, default: false, required: false}\n          ports:\n            type: map\n            required: false\n            entry_schema: {type: PortSpec}\n          port_name: {type: string, required: false}\n          unit: {type: string, default: MB, description: Unit of the metric value,\n            required: true}\n          protocol: {type: string, default: tcp, required: false}\n          port: {type: PortDef, required: false}\n          name: {type: string, default: memory.usage, description: Ceilometer metric type name to monitor. (The name ceilometer is using),\n            required: true}\n          category: {type: string, default: compute, description: \'Category of the\n              metric, for an example, compute, disk, network, storage and etc.\', required: false}\n          url_path: {type: string, required: false}\n      vHNF for DHV Test 17.network.outgoing.bytes:\n        type: com.att.d2.capabilities.metric.Ceilometer\n        description: A node type that includes the Metric capability indicates that it can be monitored using ceilometer.\n        occurrences: [1, UNBOUNDED]\n        properties:\n          initiator: {type: string, default: source, required: false}\n          network_name: {type: string, default: PRIVATE, required: false}\n          description: {type: string, default: Number of outgoing bytes, description: Description of the metric,\n            required: false}\n          type: {type: string, default: Cumulative, description: \'Type of the metric\n              value, for an example, Cumulative, Delta, Gauge and etc.\', required: true}\n          secure: {type: boolean, default: false, required: false}\n          ports:\n            type: map\n            required: false\n            entry_schema: {type: PortSpec}\n          port_name: {type: string, required: false}\n          unit: {type: string, default: B, description: Unit of the metric value,\n            required: true}\n          protocol: {type: string, default: tcp, required: false}\n          port: {type: PortDef, required: false}\n          name: {type: string, default: network.outgoing.bytes, description: Ceilometer metric type name to monitor. (The name ceilometer is using),\n            required: true}\n          category: {type: string, default: network, description: \'Category of the\n              metric, for an example, compute, disk, network, storage and etc.\', required: false}\n          url_path: {type: string, required: false}\n      vHNF for DHV Test 17.endpoint:\n        type: tosca.capabilities.Endpoint.Admin\n        occurrences: [1, UNBOUNDED]\n        properties:\n          port_name: {type: string, required: false}\n          protocol: {type: string, default: tcp, required: false}\n          port: {type: PortDef, required: false}\n          initiator: {type: string, default: source, required: false}\n          network_name: {type: string, default: PRIVATE, required: false}\n          ports:\n            type: map\n            required: false\n            entry_schema: {type: PortSpec}\n          secure: {type: boolean, default: true, required: false}\n          url_path: {type: string, required: false}\n      vHNF for DHV Test 17.network.outgoing.bytes.rate:\n        type: com.att.d2.capabilities.metric.Ceilometer\n        description: A node type that includes the Metric capability indicates that it can be monitored using ceilometer.\n        occurrences: [1, UNBOUNDED]\n        properties:\n          initiator: {type: string, default: source, required: false}\n          network_name: {type: string, default: PRIVATE, required: false}\n          description: {type: string, default: Average rate of outgoing bytes, description: Description of the metric,\n            required: false}\n          type: {type: string, default: Gauge, description: \'Type of the metric value,\n              for an example, Cumulative, Delta, Gauge and etc.\', required: true}\n          secure: {type: boolean, default: false, required: false}\n          ports:\n            type: map\n            required: false\n            entry_schema: {type: PortSpec}\n          port_name: {type: string, required: false}\n          unit: {type: string, default: B/s, description: Unit of the metric value,\n            required: true}\n          protocol: {type: string, default: tcp, required: false}\n          port: {type: PortDef, required: false}\n          name: {type: string, default: network.outgoing.bytes.rate, description: Ceilometer metric type name to monitor. (The name ceilometer is using),\n            required: true}\n          category: {type: string, default: network, description: \'Category of the\n              metric, for an example, compute, disk, network, storage and etc.\', required: false}\n          url_path: {type: string, required: false}\n      Pri_IP_MUX_Demux 1.feature:\n        type: tosca.capabilities.Node\n        occurrences: [1, UNBOUNDED]\n      vHNF for DHV Test 17.disk.root.size:\n        type: com.att.d2.capabilities.metric.Ceilometer\n        description: A node type that includes the Metric capability indicates that it can be monitored using ceilometer.\n        occurrences: [1, UNBOUNDED]\n        properties:\n          initiator: {type: string, default: source, required: false}\n          network_name: {type: string, default: PRIVATE, required: false}\n          description: {type: string, default: Size of root disk, description: Description of the metric,\n            required: false}\n          type: {type: string, default: Gauge, description: \'Type of the metric value,\n              for an example, Cumulative, Delta, Gauge and etc.\', required: true}\n          secure: {type: boolean, default: false, required: false}\n          ports:\n            type: map\n            required: false\n            entry_schema: {type: PortSpec}\n          port_name: {type: string, required: false}\n          unit: {type: string, default: GB, description: Unit of the metric value,\n            required: true}\n          protocol: {type: string, default: tcp, required: false}\n          port: {type: PortDef, required: false}\n          name: {type: string, default: disk.root.size, description: Ceilometer metric type name to monitor. (The name ceilometer is using),\n            required: true}\n          category: {type: string, default: compute, description: \'Category of the\n              metric, for an example, compute, disk, network, storage and etc.\', required: false}\n          url_path: {type: string, required: false}\n      vHNF for DHV Test 17.disk.device.write.requests.rate:\n        type: com.att.d2.capabilities.metric.Ceilometer\n        description: A node type that includes the Metric capability indicates that it can be monitored using ceilometer.\n        occurrences: [1, UNBOUNDED]\n        properties:\n          initiator: {type: string, default: source, required: false}\n          network_name: {type: string, default: PRIVATE, required: false}\n          description: {type: string, default: Average rate of write requests, description: Description of the metric,\n            required: false}\n          type: {type: string, default: Gauge, description: \'Type of the metric value,\n              for an example, Cumulative, Delta, Gauge and etc.\', required: true}\n          secure: {type: boolean, default: false, required: false}\n          ports:\n            type: map\n            required: false\n            entry_schema: {type: PortSpec}\n          port_name: {type: string, required: false}\n          unit: {type: string, default: request/s, description: Unit of the metric value,\n            required: true}\n          protocol: {type: string, default: tcp, required: false}\n          port: {type: PortDef, required: false}\n          name: {type: string, default: disk.device.write.requests.rate, description: Ceilometer metric type name to monitor. (The name ceilometer is using),\n            required: true}\n          category: {type: string, default: disk, description: \'Category of the metric,\n              for an example, compute, disk, network, storage and etc.\', required: false}\n          url_path: {type: string, required: false}\n      vHNF for DHV Test 17.disk.device.read.requests.rate:\n        type: com.att.d2.capabilities.metric.Ceilometer\n        description: A node type that includes the Metric capability indicates that it can be monitored using ceilometer.\n        occurrences: [1, UNBOUNDED]\n        properties:\n          initiator: {type: string, default: source, required: false}\n          network_name: {type: string, default: PRIVATE, required: false}\n          description: {type: string, default: Average rate of read requests, description: Description of the metric,\n            required: false}\n          type: {type: string, default: Gauge, description: \'Type of the metric value,\n              for an example, Cumulative, Delta, Gauge and etc.\', required: true}\n          secure: {type: boolean, default: false, required: false}\n          ports:\n            type: map\n            required: false\n            entry_schema: {type: PortSpec}\n          port_name: {type: string, required: false}\n          unit: {type: string, default: request/s, description: Unit of the metric value,\n            required: true}\n          protocol: {type: string, default: tcp, required: false}\n          port: {type: PortDef, required: false}\n          name: {type: string, default: disk.device.read.requests.rate, description: Ceilometer metric type name to monitor. (The name ceilometer is using),\n            required: true}\n          category: {type: string, default: disk, description: \'Category of the metric,\n              for an example, compute, disk, network, storage and etc.\', required: false}\n          url_path: {type: string, required: false}\n    requirements:\n      Sec_IP_MUX_Demux 3.dependency:\n        occurrences: [0, UNBOUNDED]\n        capability: tosca.capabilities.Node\n        node: tosca.nodes.Root\n        relationship: tosca.relationships.DependsOn\n      Pri_Tunnel_Xconn 9.service_dependency:\n        occurrences: [1, 1]\n        capability: com.att.d2.capabilities.AllottedResource\n        node: tosca.services.Root\n        relationship: tosca.relationships.DependsOn\n      Pri_IP_MUX_Demux 1.dependency:\n        occurrences: [0, UNBOUNDED]\n        capability: tosca.capabilities.Node\n        node: tosca.nodes.Root\n        relationship: tosca.relationships.DependsOn\n      Pri_Service_Admin 5.dependency:\n        occurrences: [0, UNBOUNDED]\n        capability: tosca.capabilities.Node\n        node: tosca.nodes.Root\n        relationship: tosca.relationships.DependsOn\n      Pri_IP_MUX_Demux 1.service_dependency:\n        occurrences: [1, 1]\n        capability: com.att.d2.capabilities.AllottedResource\n        node: tosca.services.Root\n        relationship: tosca.relationships.DependsOn\n      Pri_Service_Admin 5.service_dependency:\n        occurrences: [1, 1]\n        capability: com.att.d2.capabilities.AllottedResource\n        node: tosca.services.Root\n        relationship: tosca.relationships.DependsOn\n      Sec_IP_MUX_Demux 3.service_dependency:\n        occurrences: [1, 1]\n        capability: com.att.d2.capabilities.AllottedResource\n        node: tosca.services.Root\n        relationship: tosca.relationships.DependsOn\n      vHNF for DHV Test 17.dependency:\n        occurrences: [0, UNBOUNDED]\n        capability: tosca.capabilities.Node\n        node: tosca.nodes.Root\n        relationship: tosca.relationships.DependsOn\n      vHNF for DHV Test 17.local_storage:\n        occurrences: [0, UNBOUNDED]\n        capability: tosca.capabilities.Attachment\n        node: tosca.nodes.BlockStorage\n        relationship: tosca.relationships.AttachesTo\n      vHNF for DHV Test 17.link:\n        occurrences: [1, 1]\n        capability: tosca.capabilities.network.Linkable\n        relationship: tosca.relationships.network.LinksTo\n      Pri_Tunnel_Xconn 9.dependency:\n        occurrences: [0, UNBOUNDED]\n        capability: tosca.capabilities.Node\n        node: tosca.nodes.Root\n        relationship: tosca.relationships.DependsOn\n      Sec_Tunnel_Xconn 11.service_dependency:\n        occurrences: [1, 1]\n        capability: com.att.d2.capabilities.AllottedResource\n        node: tosca.services.Root\n        relationship: tosca.relationships.DependsOn\n      Sec_Service_Admin 7.dependency:\n        occurrences: [0, UNBOUNDED]\n        capability: tosca.capabilities.Node\n        node: tosca.nodes.Root\n        relationship: tosca.relationships.DependsOn\n      Sec_Tunnel_Xconn 11.dependency:\n        occurrences: [0, UNBOUNDED]\n        capability: tosca.capabilities.Node\n        node: tosca.nodes.Root\n        relationship: tosca.relationships.DependsOn\n      Sec_Service_Admin 7.service_dependency:\n        occurrences: [1, 1]\n        capability: com.att.d2.capabilities.AllottedResource\n        node: tosca.services.Root\n        relationship: tosca.relationships.DependsOn\ntosca_definitions_version: tosca_simple_yaml_1_0\n','b7a1b78e-6b6b-4b36-9698-8c9530da14af','a2a57fb1-213d-45a4-acd8-6a0f7b4e54b1',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL);
/*!40000 ALTER TABLE `NETWORK_MODEL` ENABLE KEYS */;
UNLOCK TABLES;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2017-10-12 20:48:13
