<?xml version="1.0" encoding="UTF-8"?>
<!--
# Copyright Â© 2018 Amdocs, Bell Canada, AT&T
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
-->
<!DOCTYPE xml>
<configuration scan="true" scanPeriod="30 seconds" debug="true">
  <include resource="org/springframework/boot/logging/logback/base.xml" />

  <property name="componentName" value="AAI-BAS" />
  <property name="logDirectory" value="/var/log/onap/${componentName}" />

  <!-- default EELF log file names -->
  <property name="generalLogName" value="error" />
  <property name="metricsLogName" value="metrics" />
  <property name="auditLogName" value="audit" />
  <property name="debugLogName" value="debug" />

  <property name="errorLogPattern"
	    value="%d{yyyy-MM-dd'T'HH:mm:ss.SSSXXX}|%mdc{RequestId}|%thread|%mdc{ServiceName}|%mdc{PartnerName}|%mdc{TargetEntity}|%mdc{TargetServiceName}|%.-5level|%logger|%mdc{ClassName}|%msg%n" />

  <property name="auditLogPattern"
	    value="%d{yyyy-MM-dd'T'HH:mm:ss.SSSXXX}|%mdc{BeginTimestamp}|%mdc{EndTimestamp}|%mdc{RequestId}|%mdc{ServiceInstanceId}|%thread|%mdc{ServerFQDN}|%mdc{ServiceName}|%mdc{PartnerName}|%mdc{StatusCode}|%mdc{ResponseCode}|%mdc{ResponseDescription}|%logger|%.-5level|||%mdc{ElapsedTime}|%mdc{RemoteHost}|%mdc{ClientAddress}|%mdc{ClassName}|||%msg%n" />

  <property name="metricsLogPattern"
	    value="%d{yyyy-MM-dd'T'HH:mm:ss.SSSXXX}|%mdc{BeginTimestamp}|%mdc{EndTimestamp}|%mdc{RequestId}|%mdc{ServiceInstanceId}|%thread|%mdc{ServerFQDN}|%mdc{ServiceName}|%mdc{PartnerName}|%mdc{TargetEntity}|%mdc{TargetServiceName}|%mdc{StatusCode}|%mdc{ResponseCode}|%mdc{ResponseDescription}|%logger|%.-5level|||%mdc{ElapsedTime}|%mdc{RemoteHost}|%mdc{ClientAddress}|%mdc{ClassName}|||%msg%n" />

  <!-- ============================================================================ -->
  <!-- EELF Appenders -->
  <!-- ============================================================================ -->

  <appender name="EELF"
	    class="ch.qos.logback.core.rolling.RollingFileAppender">
    <file>${logDirectory}/${generalLogName}.log</file>
    <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
      <fileNamePattern>${logDirectory}/${generalLogName}.%d{yyyy-MM-dd}.log.zip
      </fileNamePattern>
      <maxHistory>60</maxHistory>
    </rollingPolicy>
    <encoder>
      <pattern>${errorLogPattern}</pattern>
    </encoder>
  </appender>
  <appender name="asyncEELF" class="ch.qos.logback.classic.AsyncAppender">
    <!-- deny all events with a level below INFO, that is TRACE and DEBUG -->
    <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
      <level>INFO</level>
    </filter>
    <queueSize>256</queueSize>
    <appender-ref ref="EELF" />
  </appender>

  <!-- EELF Audit Appender. This appender is used to record audit engine related logging events. The audit logger and appender
       are specializations of the EELF application root logger and appender. This can be used to segregate Policy engine events
       from other components, or it can be eliminated to record these events as part of the application root log. -->

  <appender name="EELFAudit"
	    class="ch.qos.logback.core.rolling.RollingFileAppender">
    <file>${logDirectory}/${auditLogName}.log</file>
    <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
      <fileNamePattern>${logDirectory}/${auditLogName}.%d{yyyy-MM-dd}.log.zip
      </fileNamePattern>
      <maxHistory>60</maxHistory>
    </rollingPolicy>
    <encoder>
      <pattern>${auditLogPattern}</pattern>
    </encoder>
  </appender>
  <appender name="asyncEELFAudit" class="ch.qos.logback.classic.AsyncAppender">
    <queueSize>256</queueSize>
    <appender-ref ref="EELFAudit" />
  </appender>

  <appender name="EELFMetrics"
	    class="ch.qos.logback.core.rolling.RollingFileAppender">
    <file>${logDirectory}/${metricsLogName}.log</file>
    <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
      <fileNamePattern>${logDirectory}/${metricsLogName}.%d{yyyy-MM-dd}.log.zip
      </fileNamePattern>
      <maxHistory>60</maxHistory>
    </rollingPolicy>
    <encoder>
      <pattern>${metricsLogPattern}</pattern>
    </encoder>
  </appender>

  <appender name="asyncEELFMetrics" class="ch.qos.logback.classic.AsyncAppender">
    <queueSize>256</queueSize>
    <appender-ref ref="EELFMetrics" />
  </appender>

  <appender name="EELFDebug"
	    class="ch.qos.logback.core.rolling.RollingFileAppender">
    <file>
      ${logDirectory}/${debugLogName}.log
    </file>
    <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
      <fileNamePattern>${logDirectory}/${debugLogName}.%d{yyyy-MM-dd}.log.zip
      </fileNamePattern>
      <maxHistory>60</maxHistory>
    </rollingPolicy>
    <encoder>
      <pattern>${errorLogPattern}</pattern>
    </encoder>
  </appender>

  <appender name="asyncEELFDebug" class="ch.qos.logback.classic.AsyncAppender">
    <!-- allow only events with a level below INFO, that is TRACE and DEBUG -->
    <filter class="ch.qos.logback.core.filter.EvaluatorFilter">
      <evaluator class="ch.qos.logback.classic.boolex.GEventEvaluator">
	<expression>
	  e.level.toInt() &lt; INFO.toInt()
	</expression>
      </evaluator>
      <OnMismatch>DENY</OnMismatch>
      <OnMatch>NEUTRAL</OnMatch>
    </filter>
    <queueSize>256</queueSize>
    <appender-ref ref="EELFDebug" />
    <includeCallerData>false</includeCallerData>
  </appender>

  <!-- ============================================================================ -->
  <!-- Default / root appenders -->
  <!-- This determines the logging level for 3rd party code -->
  <!-- ============================================================================ -->

  <root level="INFO">
    <appender-ref ref="asyncEELF" />
  <appender-ref ref="asyncEELFDebug" />
</root>

  <!-- ============================================================================ -->
  <!--  EELF loggers -->
  <!-- ============================================================================ -->

  <logger name="com.att.eelf" level="INFO" additivity="false">
  <appender-ref ref="asyncEELF" />
</logger>

  <!-- The level of this logger determines the contents of the debug log -->
  <logger name="com.att.eelf.debug" level="INFO" additivity="false">
  <appender-ref ref="asyncEELFDebug" />
</logger>

  <logger name="com.att.eelf.audit" level="INFO" additivity="false">
  <appender-ref ref="asyncEELFAudit" />
</logger>

  <logger name="com.att.eelf.metrics" level="INFO" additivity="false">
  <appender-ref ref="asyncEELFMetrics" />
</logger>

  <!-- ============================================================================ -->
  <!-- Non-EELF loggers -->
  <!-- ============================================================================ -->

  <!-- ATT packages including DMAAP message routing -->
  <logger name="com.att" level="INFO" />

  <!-- Spring related loggers -->
  <logger name="org.springframework" level="WARN" />
  <logger name="org.springframework.beans" level="WARN" />
  <logger name="org.springframework.web" level="WARN" />

  <!-- Other Loggers that may help troubleshoot -->
  <logger name="org.apache" level="WARN" />
  <logger name="org.apache.commons" level="WARN" />

  <!-- Camel Related Loggers (including restlet/servlet/jaxrs/cxf logging. May aid in troubleshooting) -->
  <logger name="org.apache.camel" level="WARN" />
  <logger name="org.apache.cxf" level="WARN" />
  <logger name="org.apache.camel.processor.interceptor" level="WARN" />
  <logger name="org.apache.cxf.jaxrs.interceptor" level="WARN" />
  <logger name="org.apache.cxf.service" level="WARN" />
  <logger name="org.restlet" level="WARN" />
  <logger name="org.apache.camel.component.restlet" level="WARN" />

  <!-- logback internals logging -->
  <logger name="ch.qos.logback.classic" level="WARN" />
  <logger name="ch.qos.logback.core" level="WARN" />

</configuration>
