#
# ============LICENSE_START=======================================================
# org.onap.aai
# ================================================================================
# Copyright Â© 2018 AT&T Intellectual Property. All rights reserved.
# ================================================================================
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ============LICENSE_END=========================================================

aai.config.checktime=1000

# this could come from siteconfig.pl?
aai.config.nodename=AutomaticallyOverwritten

aai.server.url.base=https://aai.{{ include "common.namespace" . }}:8443/aai/
aai.server.url=https://aai.{{ include "common.namespace" . }}:8443/aai/{{ .Values.global.config.schema.version.api.default }}/
aai.global.callback.url=https://aai.{{ include "common.namespace" . }}:8443/aai/

{{ if .Values.global.config.basic.auth.enabled }}
aai.tools.enableBasicAuth=true
aai.tools.username={{ .Values.global.config.basic.auth.username }}
aai.tools.password={{ .Values.global.config.basic.auth.passwd }}
{{ end }}

aai.truststore.filename={{ .Values.global.config.truststore.filename }}
aai.truststore.passwd.x={{ .Values.global.config.truststore.passwd }}
aai.keystore.filename={{ .Values.global.config.keystore.filename }}
aai.keystore.passwd.x={{ .Values.global.config.keystore.passwd }}

aai.notification.current.version={{ .Values.global.config.schema.version.api.default }}
aai.notificationEvent.default.status=UNPROCESSED
aai.notificationEvent.default.eventType={{ .Values.global.config.notification.eventType }}
aai.notificationEvent.default.domain={{ .Values.global.config.notification.domain }}
aai.notificationEvent.default.sourceName=aai
aai.notificationEvent.default.sequenceNumber=0
aai.notificationEvent.default.severity=NORMAL
aai.notificationEvent.default.version={{ .Values.global.config.schema.version.api.default }}
# This one lets us enable/disable resource-version checking on updates/deletes
aai.resourceversion.enableflag=true
aai.logging.maxStackTraceEntries=10
aai.default.api.version={{ .Values.global.config.schema.version.api.default }}

# Used by Data Grooming
aai.grooming.default.max.fix={{ .Values.config.maxFix.dataGrooming | int }}
aai.grooming.default.sleep.minutes={{ .Values.config.sleepMinutes.dataGrooming | int }}

# Used by DupeTool
aai.dupeTool.default.max.fix={{ .Values.config.maxFix.dupeTool | int }}
aai.dupeTool.default.sleep.minutes={{ .Values.config.sleepMinutes.dupeTool | int }}


aai.model.proc.max.levels=50
aai.edgeTag.proc.max.levels=50

# Used by the ForceDelete tool
aai.forceDel.protected.nt.list=cloud-region
aai.forceDel.protected.edge.count=10
aai.forceDel.protected.descendant.count=10

#used by the dataGrooming and dataSnapshot cleanup tasks
aai.cron.enable.datagroomingcleanup={{ .Values.config.cron.dataCleanup.dataGrooming.enabled }}
aai.cron.enable.datasnapshotcleanup={{ .Values.config.cron.dataCleanup.dataSnapshot.enabled }}
aai.datagrooming.agezip={{ .Values.config.cron.dataCleanup.dataGrooming.ageZip | int }}
aai.datagrooming.agedelete={{ .Values.config.cron.dataCleanup.dataGrooming.ageDelete | int  }}

aai.datasnapshot.agezip={{ .Values.config.cron.dataCleanup.dataSnapshot.ageZip | int }}
aai.datasnapshot.agedelete={{ .Values.config.cron.dataCleanup.dataSnapshot.ageDelete | int }}

#used by the dataSnapshot and dataGrooming tasks
aai.cron.enable.dataSnapshot={{ .Values.config.cron.dataSnapshot.enabled }}

aai.cron.enable.dataGrooming={{ .Values.config.cron.dataGrooming.enabled }}

#used by the dataGrooming tasks
aai.datagrooming.enableautofix=true
aai.datagrooming.enabledupefixon=true
aai.datagrooming.enabledontfixorphans=true
aai.datagrooming.enabletimewindowminutes=true
aai.datagrooming.enableskiphostcheck=false
aai.datagrooming.enablesleepminutes=false
aai.datagrooming.enableedgesonly=false
aai.datagrooming.enableskipedgechecks=false
aai.datagrooming.enablemaxfix=false
aai.datagrooming.enablesinglecommits=false
aai.datagrooming.enabledupecheckoff=false
aai.datagrooming.enableghost2checkoff=false
aai.datagrooming.enableghost2fixon=false
aai.datagrooming.enablef=false

# used by the dataGrooming to set values
aai.datagrooming.timewindowminutesvalue=10500
aai.datagrooming.sleepminutesvalue=100
aai.datagrooming.maxfixvalue=10
aai.datagrooming.fvalue=10

#timeout for traversal enabled flag
aai.graphadmin.timeoutenabled={{ .Values.config.timeout.enabled }}
#default timeout limit added for graphadmin if not overridden (in ms)
aai.graphadmin.timeoutlimit={{ .Values.config.timeout.limit }}

#timeout app specific -1 to bypass for that app id, a whole number to override the timeout with that value (in ms)
aai.graphadmin.timeout.appspecific={{ .Values.global.config.realtime.clients }}

# Disable the process check which are oriented towards linux OS
# These props should only be true for local on windows
aai.disable.check.snapshot.running=false
aai.disable.check.grooming.running=false

# Specify the params listed right here that you would have send to the dataSnapshot shell script
# JUST_TAKE_SNAPSHOT
# THREADED_SNAPSHOT 2 DEBUG
# THREADED_SNAPSHOT 2
aai.datasnapshot.params={{ .Values.config.cron.dataSnapshot.params }}
