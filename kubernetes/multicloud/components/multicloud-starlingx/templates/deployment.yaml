{{/*
# Copyright (c) 2019 Intel Corporation.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
*/}}

apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "common.fullname" . }}
  namespace: {{ include "common.namespace" . }}
  labels:
    app: {{ include "common.name" . }}
    chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
    release: {{ include "common.release" . }}
    heritage: {{ .Release.Service }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: {{ include "common.name" . }}
  template:
    metadata:
      labels:
        app: {{ include "common.name" . }}
        release: {{ include "common.release" . }}
      name: {{ include "common.name" . }}
      annotations:
        sidecar.istio.io/inject: "{{.Values.istioSidecar}}"
    spec:
      containers:
      - env:
        - name: MSB_PROTO
          value: "{{ if (include "common.needTLS" .) }}https{{ else }}http{{ end }}"
        - name: MSB_ADDR
          value: "{{ .Values.config.msbgateway }}.{{ include "common.namespace" . }}"
        - name: MSB_PORT
          value: "{{- if (include "common.needTLS" .) }}{{ .Values.config.msbPort }}{{ else }}{{ .Values.config.msbPlainPort }}{{ end }}"
        - name: AAI_ADDR
          value: "aai.{{ include "common.namespace" . }}"
        - name: AAI_PORT
          value: "{{- if (include "common.needTLS" .) }}{{ .Values.config.aai.aaiPort }}{{ else }}{{ .Values.config.aai.aaiPlainPort }}{{ end }}"
        - name: AAI_SCHEMA_VERSION
          value: "{{ .Values.config.aai.schemaVersion }}"
        - name: AAI_USERNAME
          value: "{{ .Values.config.aai.username }}"
        - name: AAI_PASSWORD
          value: "{{ .Values.config.aai.password }}"
        - name: SSL_ENABLED
          value: "{{- if (include "common.needTLS" .) }}{{ .Values.config.ssl_enabled }}{{ else }}false{{ end }}"
        name: {{ include "common.name" . }}
        volumeMounts:
        - mountPath: "{{ .Values.log.path }}"
          name: starlingx-log
        - mountPath: /opt/starlingx/starlingx/pub/config/log.yml
          name: starlingx-logconfig
          subPath: log.yml
        - mountPath: /opt/artifacts/
          name: artifact-data
        resources: {{ include "common.resources" . | nindent 12 }}
        image: {{ include "repositoryGenerator.repository" . }}/{{ .Values.image }}
        imagePullPolicy: {{ .Values.global.pullPolicy | default .Values.pullPolicy }}
        ports:
        - containerPort: {{ .Values.service.internalPort }}
        # disable liveness probe when breakpoints set in debugger
        # so K8s doesn't restart unresponsive container
        {{ if .Values.liveness.enabled }}
        livenessProbe:
          httpGet:
            path: /api/multicloud-starlingx/v0/swagger.json
            port: {{ .Values.service.internalPort }}
            scheme: {{ if (include "common.needTLS" .) }}HTTPS{{ else }}HTTP{{ end }}
          initialDelaySeconds: {{ .Values.liveness.initialDelaySeconds }}
          periodSeconds: {{ .Values.liveness.periodSeconds }}
          timeoutSeconds: {{ .Values.liveness.timeoutSeconds }}
          successThreshold: {{ .Values.liveness.successThreshold }}
          failureThreshold: {{ .Values.liveness.failureThreshold }}
        {{ end }}
      # side car containers
      {{ include "common.log.sidecar" . | nindent 7 }}
      - image: {{ include "repositoryGenerator.repository" . }}/{{ .Values.memcached }}
        imagePullPolicy: {{ .Values.global.pullPolicy | default .Values.pullPolicy }}
        name: memcached
      - image: {{ include "repositoryGenerator.repository" . }}/{{ .Values.global.artifactImage }}
        name: framework-artifactbroker
        command: ["/opt/app/distribution/bin/artifact-dist.sh"]
        args: ["/opt/app/distribution/etc/mounted/config.json"]
        ports:
        - containerPort: 9014
          protocol: TCP
        volumeMounts:
        - mountPath: /opt/app/distribution/etc/mounted/config.json
          name: starlingx-logconfig
          subPath: config.json
        - mountPath: /data
          name: artifact-data
      serviceAccountName: {{ include "common.fullname" (dict "suffix" "read" "dot" . )}}
      volumes:
      - name: starlingx-log
        emptyDir: {}
      {{ include "common.log.volumes" (dict "dot" . "configMapNamePrefix" (tpl .Values.logConfigMapNamePrefix . )) | nindent 7 }}
      - name: starlingx-logconfig
        configMap:
          name: {{ include "common.fullname" . }}-log-configmap
      - name: artifact-data
        emptyDir: {}
      imagePullSecrets:
      - name: "{{ include "common.namespace" . }}-docker-registry-key"
      restartPolicy: Always
