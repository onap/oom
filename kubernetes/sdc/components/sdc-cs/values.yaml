# Copyright © 2017 Amdocs, AT&T, Bell Canada
# Modifications Copyright © 2018  ZTE
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

#################################################################
# Global configuration defaults.
#################################################################
global:
  nodePortPrefix: 302
  readinessImage: onap/oom/readiness:6.2.0
  loggingRepository: docker.elastic.co
  loggingImage: beats/filebeat:5.5.0
  sdc_cassandra:
    #This flag allows SDC to instantiate its own cluster, serviceName
    #should be sdc-cs if this flag is enabled
    localCluster: false
    #Cassandra login details
    username: cassandra
    password: cassandra
    # in case of a local cassandra cluster
    # flag to enable the DB creation via k8ssandra-operator
    useOperator: true
    # if useOperator set to "true", set "enableServiceAccount to "false"
    # as the SA is created by the Operator
    enableServiceAccount: false

    #The cassandra service name to connect to (default: shared cassandra service)
    #in case of using k8ssandra-operator in the common cassandra installation
    #the service name is:
    serviceName: cassandra-dc1-service
    #in case of local k8ssandra-operator instance it is
    #serviceName: sdc-cs-dc1-service
    #in case the older cassandra installation is used:
    #serviceName: cassandra

    #Shared cassandra cluster replicaCount, should be changed if localCluster is enabled
    #to match with its own cluster replica
    replicaCount: 3
    clusterName: cassandra
    #datacenter name (use "dc1" in case of k8ssandra-operator, otherwise "Pod")
    dataCenter: dc1
    #cqlVersion for cassandra 3.11.* must be "3.4.4" and cassandra 4.0.* must be "3.4.5"
    #and cassandra 4.1.* must be "3.4.6"
    cqlVersion: "3.4.6"

#################################################################
# Application configuration defaults.
#################################################################

#Used only if localCluster is enabled. Instantiates SDC's own cassandra cluster
cassandra:
  nameOverride: sdc-cs
  replicaCount: 3
  service:
    name: sdc-cs
  serviceAccount:
    nameOverride: sdc-cs
  persistence:
    mountSubPath: sdc/sdc-cs/CS
    enabled: true
  k8ssandraOperator:
    config:
      clusterName: sdc-cs

cassandraConfiguration:
  cassandraPort: 9042
  cql_version: 3.4.6
  catalogPort: 8080
  disableHttp: true
  sslPort: 8443
  ssl: false
  socketConnectTimeout: 40000
  socketReadTimeout: 40000
  truststorePath: /tmp/writable-config/sdctool/config/tmp.trust
  truststorePassword: Aa123456
  cassandra_user: asdc_user
  cassandra_password: Aa1234%^!
  readConsistencyLevel: LOCAL_QUORUM
  writeConsistencyLevel: LOCAL_QUORUM

janusgraph:
  keyspace: sdctitan
  cfgFile: /tmp/writable-config/sdctool/config/janusgraph.properties
  dbCache:
    enabled: false
    cleanWait: 20
    time: 18000
    size: 0.5
  txCache:
    size: '1000000'
  storage:
    lockRetries: 5
    lockWaitTime: 500
    backend: cql
    connectionTimeout: 5000
  graph:
    replaceInstance: true
    inMemory: false
    lockTimeout: 1800
  reconnectInterval: 3
  healthCheckReadTimeout: 8

# application image
repository: nexus3.onap.org:10001
image: onap/sdc-cassandra:1.14-20250819T095101Z
cassandraInitImage: onap/sdc-cassandra-init:1.14-20250819T095101Z
pullPolicy: Always

config:
  release: latest
  maxHeapSize: "1536M"
  heapNewSize: "512M"

# Annotations to control the execution and deletion of the job
# Can be used to delete a job before an Upgrade
#
# jobAnnotations:
#   # In case of an ArgoCD deployment this Hook deletes the job before syncing
#   argocd.argoproj.io/hook: Sync
#   argocd.argoproj.io/hook-delete-policy: BeforeHookCreation
#
#   # In case of an Helm/Flux deployment this Hook deletes the job
#   # This is what defines this resource as a hook. Without this line, the
#   # job is considered part of the release.
#   "helm.sh/hook": "pre-upgrade,pre-rollback,post-install"
#   "helm.sh/hook-delete-policy": "before-hook-creation"
#   "helm.sh/hook-weight": "1"

#environment file
env:
  name: AUTO

# default number of instances
replicaCount: 1

nodeSelector: {}

affinity: {}

# probe configuration parameters
liveness:
  initialDelaySeconds: 120
  periodSeconds: 120
  # necessary to disable liveness probe when setting breakpoints
  # in debugger so K8s doesn't restart unresponsive container
  enabled: true

readiness:
  initialDelaySeconds: 120
  periodSeconds: 60

service:
  type: ClusterIP
  name: sdc-cs
  portName: sdc-cs
  externalPort: 9042
  internalPort: 9042
  jobPort: 8080

## Persist data to a persitent volume
persistence:
  enabled: true

  ## A manually managed Persistent Volume and Claim
  ## Requires persistence.enabled: true
  ## If defined, PVC must be created manually before volume will be bound
  # existingClaim:
  volumeReclaimPolicy: Retain

  ## database data Persistent Volume Storage Class
  ## If defined, storageClassName: <storageClass>
  ## If set to "-", storageClassName: "", which disables dynamic provisioning
  ## If undefined (the default) or set to null, no storageClassName spec is
  ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
  ##   GKE, AWS & OpenStack)
  ##
  # storageClass: "-"
  accessMode: ReadWriteOnce
  size: 2Gi
  mountPath: /dockerdata-nfs
  mountSubPath: /sdc/sdc-cs/CS

ingress:
  enabled: false

#Pods Service Account
serviceAccount:
  nameOverride: sdc-cs
  roles:
    - read

wait_for_job_container:
  containers:
    - '{{ include "common.name" . }}-job'

# Resource Limit flavor -By Default using small
flavor: small
# Segregation for Different environment (Small and Large)
resources:
  small:
    limits:
      cpu: 1200m
      memory: 2Gi
    requests:
      cpu: 300m
      memory: 500Mi
  large:
    limits:
      cpu: 1600m
      memory: "2Gi"
    requests:
      cpu: 400m
      memory: 600Mi
  unlimited: {}

securityContext:
  user_id: 1000
  group_id: 1000

volumes:
  importConfTmpSizeLimit: 100Mi
  writableScriptsSizeLimit: 1.2Gi
  cassandraConfigSizeLimit: 100Mi

resources_initContainer:
  limits:
    cpu: "100m"
    memory: "500Mi"
  requests:
    cpu: "3m"
    memory: "20Mi"

readinessCheck:
  wait_for:
    services:
      - '{{ .Values.global.sdc_cassandra.serviceName }}'
