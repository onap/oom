# Copyright © 2017 Amdocs, AT&T, Bell Canada
# Modifications Copyright © 2018  ZTE
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: {{ include "common.fullname" . }}
  namespace: {{ include "common.namespace" . }}
  labels:
    app: {{ include "common.name" . }}
    chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
    release: {{ include "common.release" . }}
    heritage: {{ .Release.Service }}
spec:
  replicas: {{ .Values.replicaCount }}
  template:
    metadata:
      labels:
        app: {{ include "common.name" . }}
        release: {{ include "common.release" . }}
    spec:
      initContainers:
      {{- if .Values.initJob.enabled }}
      - name: {{ include "common.name" . }}-job-completion
        image: "{{ .Values.global.readinessRepository }}/{{ .Values.global.readinessImage }}"
        imagePullPolicy: "{{ .Values.global.pullPolicy | default .Values.pullPolicy }}"
        command:
        - /root/job_complete.py
        args:
        - --job-name
        - {{ include "common.fullname" . }}-workflow-init
        env:
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
      {{ end }}
      containers:
        - name: {{ include "common.name" . }}
          image: "{{ include "common.repository" . }}/{{ .Values.image }}"
          imagePullPolicy: {{ .Values.global.pullPolicy | default .Values.pullPolicy }}
          ports:
          - containerPort: {{ template "wfd-be.internalPort" . }}
          # disable liveness probe when breakpoints set in debugger
          # so K8s doesn't restart unresponsive container
          {{ if .Values.liveness.enabled }}
          livenessProbe:
            tcpSocket:
              port: {{ template "wfd-be.internalPort" . }}
            initialDelaySeconds: {{ .Values.liveness.initialDelaySeconds }}
            periodSeconds: {{ .Values.liveness.periodSeconds }}
          {{ end }}
          readinessProbe:
            tcpSocket:
              port: {{ template "wfd-be.internalPort" . }}
            initialDelaySeconds: {{ .Values.readiness.initialDelaySeconds }}
            periodSeconds: {{ .Values.readiness.periodSeconds }}
          env:
          - name: JAVA_OPTIONS
            value: {{ .Values.config.javaOptions }}
          - name: CS_HOSTS
            value: "{{ .Values.global.cassandra.serviceName }}"
          - name: CS_PORT
            value: "{{ .Values.config.cassandraClientPort }}"
          - name: CS_AUTHENTICATE
            value: "{{ .Values.config.cassandraAuthenticationEnabled }}"
          - name: CS_USER
            valueFrom:
              secretKeyRef: {name: {{ include "common.release" . }}-sdc-cs-secrets, key: sdc_user}
          - name: CS_PASSWORD
            valueFrom:
              secretKeyRef: {name: {{ include "common.release" . }}-sdc-cs-secrets, key: sdc_password}
          - name: CS_SSL_ENABLED
            value: "{{ .Values.config.cassandraSSLEnabled }}"
          - name: CS_TRUST_STORE_PATH
            value: "{{ .Values.config.cassandraTrustStorePath }}"
          - name: CS_TRUST_STORE_PASSWORD
            valueFrom:
              secretKeyRef: {name: {{ include "common.release" . }}-sdc-cs-secrets, key: cs_truststore_password}
          - name: SDC_PROTOCOL
            value: "{{ .Values.config.sdcProtocol }}"
          - name: SDC_ENDPOINT
            value: "{{ .Values.config.sdcEndpoint }}"
          - name: SDC_USER
            value: "{{ .Values.config.sdcExternalUser }}"
          - name: SDC_PASSWORD
            valueFrom:
              secretKeyRef: {name: {{ include "common.release" . }}-sdc-cs-secrets, key: wf_external_user_password}
          - name: SERVER_SSL_ENABLED
            value: "{{ .Values.config.serverSSLEnabled }}"
          - name: SERVER_SSL_KEYSTORE_TYPE
            value: "{{ .Values.config.serverSSLKeyStoreType }}"
          - name: SERVER_SSL_KEYSTORE_PATH
            value: "{{ .Values.config.serverSSLKeyStorePath }}"
          - name: SERVER_SSL_KEY_PASSWORD
            valueFrom:
              secretKeyRef: {name: {{ include "common.release" . }}-sdc-cs-secrets, key: keystore_password}
          - name: SERVER_SSL_TRUSTSTORE_TYPE
            value: "{{ .Values.config.serverSSLTrustStoreType }}"
          - name: SERVER_SSL_TRUSTSTORE_PATH
            value: "{{ .Values.config.serverSSLTrustStorePath }}"
          - name: SERVER_SSL_TRUST_PASSWORD
            valueFrom:
              secretKeyRef: {name: {{ include "common.release" . }}-sdc-cs-secrets, key: truststore_password}
          volumeMounts:
          - name: sdc-cert
            mountPath: /keystore
            subPath: org.onap.sdc.p12
          - name: sdc-cert
            mountPath: /truststore
            subPath: org.onap.sdc.trust.jks
      volumes:
        - name: sdc-cert
          secret:
            secretName: sdc-cert
      imagePullSecrets:
      - name: "{{ include "common.namespace" . }}-docker-registry-key"
