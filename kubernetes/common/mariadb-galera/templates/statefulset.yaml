# Copyright Â© 2018 Amdocs, Bell Canada
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

apiVersion: apps/v1beta1
kind: StatefulSet
metadata:
  name: {{ include "common.fullname" . }}
  namespace: {{ include "common.namespace" . }}
  labels: {{- include "common.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  serviceName: {{ template "common.fullname" . }}
  template:
    metadata:
      labels: {{- include "common.labels" . | nindent 8 }}
      annotations: {{- include "common.tplValue" (dict "value" .Values.podAnnotations "context" $) | nindent 8 }}
    spec:
      {{- if .Values.nodeSelector }}
      nodeSelector:
{{ toYaml .Values.nodeSelector | indent 8 }}
      {{- end }}
      volumes:
      {{- if .Values.externalConfig }}
      - name: config
        configMap:
          name: {{ include "common.fullname" . }}-external-config
      {{- end}}
      {{- if and .Values.persistence.enabled .Values.persistence.existingClaim }}
      - name: {{ include "common.fullname" . }}-data
        persistentVolumeClaim:
          claimName: {{ .Values.persistence.existingClaim }}
      {{- end }}
      - name: localtime
        hostPath:
          path: /etc/localtime
      imagePullSecrets:
      - name: {{ include "common.namespace" . }}-docker-registry-key
      containers:
        - name: {{ include "common.name" . }}
          {{- if .Values.securityContext.enabled }}
          securityContext:
            fsGroup: {{ .Values.securityContext.fsGroup }}
            runAsUser: {{ .Values.securityContext.runAsUser }}
          {{- end }}
          image: "{{ include "common.repository" . }}/{{ .Values.image }}"
          imagePullPolicy: {{ .Values.global.pullPolicy | default .Values.pullPolicy | quote}}
          env:
          - name: MARIADB_GALERA_CLUSTER_NAME
            value: {{ .Values.galera.name | quote }}
          - name: MARIADB_GALERA_CLUSTER_ADDRESS
            value: "gcomm://{{ include "common.servicename" . }}-headless.{{ .Release.Namespace }}.svc.{{ .Values.clusterDomain }}"
          - name: MARIADB_ROOT_PASSWORD
            valueFrom:
              secretKeyRef:
                name: {{ template "common.fullname" . }}
                key: db-root-password
          - name: MARIADB_USER
            value: {{ default "" .Values.config.userName | quote }}
          - name: MARIADB_PASSWORD
            valueFrom:
              secretKeyRef:
                name: {{ template "common.fullname" . }}
                key: user-password
          - name: MARIADB_DATABASE
            value: {{ default "" .Values.config.mysqlDatabase | quote }}
          - name: MARIADB_GALERA_MARIABACKUP_PASSWORD
            valueFrom:
              secretKeyRef:
                name: {{ template "common.fullname" . }}
                key: db-backup-root-password
          ports:
          {{- range $index, $ports := .Values.service.ports }}
          - containerPort: {{ $ports.internalPort }}
            name: {{ $ports.name }}
          {{- end }}
          {{- range $index, $ports := .Values.service.headlessPorts }}
          - containerPort: {{ $ports.internalPort }}
            name: {{ $ports.name }}
          {{- end }}
          readinessProbe:
            exec:
              command:
                - bash
                - -ec
                - |
                  exec mysqladmin status -uroot -p$MARIADB_ROOT_PASSWORD
            initialDelaySeconds: {{ .Values.readiness.initialDelaySeconds }}
            periodSeconds: {{ .Values.readiness.periodSeconds }}
            timeoutSeconds: {{ .Values.readiness.timeoutSeconds }}
            successThreshold: {{ .Values.readiness.successThreshold }}
            failureThreshold: {{ .Values.readiness.failureThreshold }}
      {{- if eq .Values.liveness.enabled true }}
          livenessProbe:
            exec:
              command:
                - bash
                - -ec
                - |
                  exec mysqladmin status -uroot -p$MARIADB_ROOT_PASSWORD
            initialDelaySeconds: {{ .Values.liveness.initialDelaySeconds }}
            periodSeconds: {{ .Values.liveness.periodSeconds }}
            timeoutSeconds: {{ .Values.liveness.timeoutSeconds }}
            successThreshold: {{ .Values.liveness.successThreshold }}
            failureThreshold: {{ .Values.liveness.failureThreshold }}
      {{- end }}
          resources:
{{ include "common.resources" . }}
          volumeMounts:
          {{- if .Values.externalConfig }}
          - mountPath: /etc/config
            name: config
          {{- end}}
          {{- if .Values.persistence.enabled }}
          - mountPath: /bitnami/mariadb
            name: {{ include "common.fullname" . }}-data
          {{- end }}
          - mountPath: /etc/localtime
            name: localtime
            readOnly: true
{{- if and .Values.persistence.enabled (not .Values.persistence.existingClaim) }}
      {{- if .Values.securityContext.enabled }}
      initContainers:
      - name: mariadb-galera-prepare
        image: "{{ include "common.repository" . }}/{{ .Values.imageInit }}"
        imagePullPolicy: {{ .Values.global.pullPolicy | default .Values.pullPolicy | quote}}
        command:
        - "sh"
        - "-c"
        - "chown -R {{.Values.securityContext.runAsUser }}:{{.Values.securityContext.fsGroup }} /data"
        volumeMounts:
          - name: {{ include "common.fullname" . }}-data
            mountPath: /data
      {{- end }}
  volumeClaimTemplates:
  - metadata:
      name: {{ include "common.fullname" . }}-data
      labels:
        app.kubernetes.io/name: {{ include "common.name" . }}
        app.kubernetes.io/instance: {{ .Release.Name }}
        app.kubernetes.io/managed-by: {{ .Release.Service }}
    spec:
      accessModes:
      - {{ .Values.persistence.accessMode | quote }}
      storageClassName: {{ include "common.storageClass" . }}
      resources:
        requests:
          storage: {{ .Values.persistence.size | quote }}
{{- end }}
