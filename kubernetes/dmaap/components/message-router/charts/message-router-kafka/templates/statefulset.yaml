# Copyright © 2017 Amdocs, Bell Canada
# Modifications Copyright © 2018 AT&T
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

apiVersion: apps/v1beta1
kind: StatefulSet
metadata:
  name: {{ include "common.fullname" . }}
  namespace: {{ include "common.namespace" . }}
  labels:
    app: {{ include "common.name" . }}
    chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  serviceName: {{ .Values.service.name }}
  replicas: {{ .Values.replicaCount }}
  podManagementPolicy: Parallel
  template:
    metadata:
      labels:
        app:  {{ include "common.name" . }}
        release: {{ .Release.Name }}
    spec:
      podAntiAffinity:
         {{if eq .Values.podAntiAffinityType "hard" -}}
         requiredDuringSchedulingIgnoredDuringExecution:
         {{- else -}}
         preferredDuringSchedulingIgnoredDuringExecution:
         {{- end}}
         - weight: 1
           podAffinityTerm:
             labelSelector:
                matchExpressions:
                  - key: "app"
                    operator: In
                    values:
                    - {{ include "common.name" . }}
             topologyKey: "kubernetes.io/hostname"
      {{- if .Values.nodeAffinity }}
      nodeAffinity:
        {{ toYaml .Values.nodeAffinity | indent 10 }}
      {{- end }}
      initContainers:
      - name: {{ include "common.name" . }}-initcontainer
        image: "{{ .Values.global.ubuntuInitRepository }}/{{ .Values.ubuntuInitImage }}"
        imagePullPolicy: {{ .Values.global.pullPolicy | default .Values.pullPolicy }}
      - command:
        - /root/ready.py
        args:
        - --container-name
        - {{ .Values.zookeeper.name }}
        env:
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        image: "{{ .Values.global.readinessRepository }}/{{ .Values.global.readinessImage }}"
        imagePullPolicy: {{ .Values.global.pullPolicy | default .Values.pullPolicy }}
        name: {{ include "common.name" . }}-readiness
      - command:
        -  sh
        - -exec
        - |
          chown -R 1000:1000 /opt/kafka/data;
          cp /opt/kafka/tmpconfig/server.properties /opt/kafka/config/;
          chown 1000:1000 /opt/kafka/config/server.properties;
          cd /opt/kafka/config;
          ls;
        image: "{{ .Values.busyBoxRepository }}/{{ .Values.busyBoxImage }}"
        imagePullPolicy: {{ .Values.global.pullPolicy | default .Values.pullPolicy }}
        volumeMounts:
        - mountPath: /opt/kafka/data
          name: kafka-data
        - mountPath: /opt/kafka/tmpconfig/server.properties
          subPath: server.properties
          name: server
        - mountPath: /opt/kafka/config
          name: config-data
        name: {{ include "common.name" . }}-permission-fixer
      containers:
      - name: {{ include "common.name" .  }}
        image: "{{ include "common.repository" . }}/{{ .Values.image }}"
        imagePullPolicy:  {{ .Values.global.pullPolicy | default .Values.pullPolicy }}
        command:
        - sh
        - -exc
        - |
          export KAFKA_BROKER_ID=${HOSTNAME##*-} && \
          export ENDPOINT_PORT=$(( $KAFKA_BROKER_ID + {{ .Values.service.baseNodePort }} )) && \
          export KAFKA_ADVERTISED_LISTENERS=EXTERNAL_SASL_PLAINTEXT://$(HOST_IP):$(( $KAFKA_BROKER_ID + {{ .Values.service.baseNodePort }} )),INTERNAL_SASL_PLAINTEXT://:{{ .Values.service.internalPort }} && \
          exec start-kafka.sh
        resources:
{{ include "common.resources" . | indent 12 }}
        ports:
        - containerPort: {{ .Values.service.internalPort }}
        - containerPort: {{ .Values.service.externalPort }}
       {{ if eq .Values.liveness.enabled true }}
        livenessProbe:
          tcpSocket:
            port: {{ .Values.service.internalPort }}
          initialDelaySeconds: {{ .Values.liveness.initialDelaySeconds }}
          periodSeconds: {{ .Values.liveness.periodSeconds }}
          timeoutSeconds: {{ .Values.liveness.timeoutSeconds }}
        {{ end }}
        readinessProbe:
          tcpSocket:
            port: {{ .Values.service.internalPort }}
          initialDelaySeconds: {{ .Values.readiness.initialDelaySeconds }}
          periodSeconds: {{ .Values.readiness.periodSeconds }}
          timeoutSeconds: {{ .Values.readiness.timeoutSeconds }}
        env:
        - name: HOST_IP
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: status.hostIP
        - name: aaf_locate_url
          value: https://aaf-locate.{{ include "common.namespace" . }}:8095

        volumeMounts:
        - mountPath: /etc/localtime
          name: localtime
          readOnly: true
        - mountPath: /var/run/docker.sock
          name: docker-socket
        - mountPath: /opt/kafka/tmpconfig/server.properties
          subPath: server.properties
          name: server
        - mountPath: /opt/kafka/config/server.properties
          subPath: server.properties
          name: config-data
        - mountPath: /opt/kafka/config/log4j.properties
          subPath: log4j.properties
          name: log4j
        - mountPath: /opt/kafka/config/cadi.properties
          subPath: cadi.properties
          name: cadi
        - mountPath: /opt/kafka/data
          name: kafka-data
        - mountPath: /etc/kafka/secrets/cert/org.onap.dmaap.mr.trust.jks
          subPath: org.onap.dmaap.mr.trust.jks
          name:  aaf-certs-secret
        - mountPath: /etc/kafka/secrets/cert/org.onap.dmaap.mr.keyfile
          subPath: org.onap.dmaap.mr.keyfile
          name:  aaf-certs-secret
        - mountPath: /etc/kafka/secrets/cert/org.onap.dmaap.mr.p12
          subPath: org.onap.dmaap.mr.p12
          name:  aaf-certs-secret
      {{- if .Values.tolerations }}
      tolerations:
        {{ toYaml .Values.tolerations | indent 10 }}
      {{- end }}
      volumes:
      - name: localtime
        hostPath:
          path: /etc/localtime
      - name: config-data
        emptyDir: {}
      - name: docker-socket
        hostPath:
          path: /var/run/docker.sock
      - name: aaf-certs-secret
        secret:
          secretName: {{ include "common.fullname" . }}-aaf-certs-secret
      - name: server
        configMap:
          name: {{ include "common.fullname" . }}-server-prop-configmap
      - name: log4j
        configMap:
          name: {{ include "common.fullname" . }}-log4j-prop-configmap
      - name: cadi
        configMap:
          name: {{ include "common.fullname" . }}-cadi-prop-configmap
{{ if not .Values.persistence.enabled }}
      - name: kafka-data
        emptyDir: {}
{{ else }}
  volumeClaimTemplates:
    - metadata:
        name: kafka-data
        labels:
          app: {{ include "common.fullname" . }}
          chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
          release: "{{ .Release.Name }}"
          heritage: "{{ .Release.Service }}"
      spec:
        accessModes:
          - {{ .Values.persistence.accessMode | quote }}
        resources:
          requests:
            storage: {{ .Values.persistence.size | quote }}
        selector:
          matchLabels:
            release: "{{ .Release.Name }}"
            app: {{ .Values.service.name }}
            chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
            heritage: "{{ .Release.Service }}"
{{ end }}
      imagePullSecrets:
      - name: "{{ include "common.namespace" . }}-docker-registry-key"