{{/*
#============LICENSE_START========================================================
# ================================================================================
# Copyright (c) 2021 ZTE Intellectual Property. All rights reserved.
# ================================================================================
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ============LICENSE_END=========================================================
*/}}

apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "common.fullname" . }}
  namespace: {{ include "common.namespace" . }}
  labels:
    app: {{ include "common.name" . }}
    chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
    release: {{ include "common.release" . }}
    heritage: {{ .Release.Service }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: {{ include "common.name" . }}
  template:
    metadata:
      labels:
        app: {{ include "common.name" . }}
        release: {{ include "common.release" . }}
    spec:
      initContainers:
        - name: init-consul
          image: {{ include "repositoryGenerator.repository" . }}/{{ .Values.global.consulLoaderImage }}
          imagePullPolicy: {{ .Values.global.pullPolicy | default .Values.pullPolicy }}
          args:
            - --key
            - k8s-plugin|/plugin-configs/k8s-plugin.json
            - --key
            - dmaap-plugin|/plugin-configs/dmaap-plugin.json
          resources: {"tosca_definitions_version":"cloudify_dsl_1_3","imports":["https://www.getcloudify.org/spec/cloudify/4.5.5/types.yaml","plugin:k8splugin?version=>=3.4.3,<4.0.0","plugin:dcaepolicyplugin?version=2.4.0","plugin:pgaas?version=1.3.0"],"inputs":{"msb_hostname":{"type":"string","default":"msb-iag.onap"},"pgaas_cluster_name":{"type":"string","default":"dcae-pg-primary.onap"},"database_name":{"type":"string","default":"holmes"},"hr_image":{"type":"string","default":"nexus3.onap.org:10001/onap/holmes/rule-management:1.2.9"},"service_component_type":{"type":"string","default":"holmes-rule-mgmt"},"service_id":{"type":"string","default":"holmes-rule-mgmt"},"service_component_name_override":{"type":"string","default":"holmes-rule-mgmt"},"dcae-analytics-holmes-rule-mgt_cpu_limit":{"type":"string","default":"250m"},"dcae-analytics-holmes-rule-mgt_cpu_request":{"type":"string","default":"250m"},"dcae-analytics-holmes-rule-mgt_memory_limit":{"type":"string","default":"1024Mi"},"dcae-analytics-holmes-rule-mgt_memory_request":{"type":"string","default":"256Mi"}},"node_templates":{"pgaasvm":{"type":"dcae.nodes.pgaas.database","properties":{"writerfqdn":{"get_input":"pgaas_cluster_name"},"name":{"get_input":"database_name"}}},"holmesrules":{"type":"dcae.nodes.ContainerizedServiceComponent","interfaces":{"cloudify.interfaces.lifecycle":{"start":{"inputs":{"envs":{"URL_JDBC":{"get_attribute":["pgaasvm","admin","host"]},"JDBC_PASSWORD":{"get_attribute":["pgaasvm","admin","password"]},"JDBC_USERNAME":{"get_attribute":["pgaasvm","admin","user"]},"MSB_ADDR":{"get_input":"msb_hostname"}},"ports":["9101:0","9104:0"]}}}},"properties":{"service_component_type":{"get_input":"service_component_type"},"service_id":{"get_input":"service_id"},"service_component_name_override":{"get_input":"service_component_name_override"},"application_config":{"holmes.default.rule.volte.scenario1":"ControlLoop-VOLTE-2179b738-fd36-4843-a71a-a8c24c70c55b$$$package org.onap.holmes.droolsRule;\n\nimport org.onap.holmes.common.dmaap.DmaapService;\nimport org.onap.holmes.common.api.stat.VesAlarm;\nimport org.onap.holmes.common.aai.CorrelationUtil;\nimport org.onap.holmes.common.dmaap.entity.PolicyMsg;\nimport org.onap.holmes.common.dropwizard.ioc.utils.ServiceLocatorHolder;\nimport org.onap.holmes.common.utils.DroolsLog;\n \n\nrule \"Relation_analysis_Rule\"\nsalience 200\nno-loop true\n    when\n        $root : VesAlarm(alarmIsCleared == 0,\n            $sourceId: sourceId, sourceId != null && !sourceId.equals(\"\"),\n\t\t\t$sourceName: sourceName, sourceName != null && !sourceName.equals(\"\"),\n\t\t\t$startEpochMicrosec: startEpochMicrosec,\n            eventName in (\"Fault_MultiCloud_VMFailure\"),\n            $eventId: eventId)\n        $child : VesAlarm( eventId != $eventId, parentId == null,\n            CorrelationUtil.getInstance().isTopologicallyRelated(sourceId, $sourceId, $sourceName),\n            eventName in (\"Fault_MME_eNodeB out of service alarm\"),\n            startEpochMicrosec < $startEpochMicrosec + 60000 && startEpochMicrosec > $startEpochMicrosec - 60000 )\n    then\n\t\tDroolsLog.printInfo(\"===========================================================\");\n\t\tDroolsLog.printInfo(\"Relation_analysis_Rule: rootId=\" + $root.getEventId() + \", childId=\" + $child.getEventId());\n\t\t$child.setParentId($root.getEventId());\n\t\tupdate($child);\n\t\t\nend\n\nrule \"root_has_child_handle_Rule\"\nsalience 150\nno-loop true\n\twhen\n\t\t$root : VesAlarm(alarmIsCleared == 0, rootFlag == 0, $eventId: eventId)\n\t\t$child : VesAlarm(eventId != $eventId, parentId == $eventId)\n\tthen\n\t\tDroolsLog.printInfo(\"===========================================================\");\n\t\tDroolsLog.printInfo(\"root_has_child_handle_Rule: rootId=\" + $root.getEventId() + \", childId=\" + $child.getEventId());\n\t\tDmaapService dmaapService = ServiceLocatorHolder.getLocator().getService(DmaapService.class);\n\t\tPolicyMsg policyMsg = dmaapService.getPolicyMsg($root, $child, \"org.onap.holmes.droolsRule\");\n        dmaapService.publishPolicyMsg(policyMsg, \"dcae_cl_out\");\n\t\t$root.setRootFlag(1);\n\t\tupdate($root);\nend\n\nrule \"root_no_child_handle_Rule\"\nsalience 100\nno-loop true\n    when\n        $root : VesAlarm(alarmIsCleared == 0, rootFlag == 0,\n            sourceId != null && !sourceId.equals(\"\"),\n\t\t\tsourceName != null && !sourceName.equals(\"\"),\n            eventName in (\"Fault_MultiCloud_VMFailure\"))\n    then\n\t\tDroolsLog.printInfo(\"===========================================================\");\n\t\tDroolsLog.printInfo(\"root_no_child_handle_Rule: rootId=\" + $root.getEventId());\n\t\tDmaapService dmaapService = ServiceLocatorHolder.getLocator().getService(DmaapService.class);\n\t\tPolicyMsg policyMsg = dmaapService.getPolicyMsg($root, null, \"org.onap.holmes.droolsRule\");\n        dmaapService.publishPolicyMsg(policyMsg, \"dcae_cl_out\");\n\t\t$root.setRootFlag(1);\n\t\tupdate($root);\nend\n\nrule \"root_cleared_handle_Rule\"\nsalience 100\nno-loop true\n    when\n        $root : VesAlarm(alarmIsCleared == 1, rootFlag == 1)\n    then\n\t\tDroolsLog.printInfo(\"===========================================================\");\n\t\tDroolsLog.printInfo(\"root_cleared_handle_Rule: rootId=\" + $root.getEventId());\n\t\tDmaapService dmaapService = ServiceLocatorHolder.getLocator().getService(DmaapService.class);\n\t\tPolicyMsg policyMsg = dmaapService.getPolicyMsg($root, null, \"org.onap.holmes.droolsRule\");\n        dmaapService.publishPolicyMsg(policyMsg, \"dcae_cl_out\");\n\t\tretract($root);\nend\n\nrule \"child_handle_Rule\"\nsalience 100\nno-loop true\n    when\n        $child : VesAlarm(alarmIsCleared == 1, rootFlag == 0)\n    then\n\t\tDroolsLog.printInfo(\"===========================================================\");\n\t\tDroolsLog.printInfo(\"child_handle_Rule: childId=\" + $child.getEventId());\n\t\tretract($child);\nend","msb.hostname":{"get_input":"msb_hostname"},"msb.uri":"/api/microservices/v1/services","services_calls":{},"streams_publishes":{},"streams_subscribes":{}},"image":{"get_input":"hr_image"},"resource_config":{"limits":{"cpu":{"get_input":"dcae-analytics-holmes-rule-mgt_cpu_limit"},"memory":{"get_input":"dcae-analytics-holmes-rule-mgt_memory_limit"}},"requests":{"cpu":{"get_input":"dcae-analytics-holmes-rule-mgt_cpu_request"},"memory":{"get_input":"dcae-analytics-holmes-rule-mgt_memory_request"}}}},"relationships":[{"type":"cloudify.relationships.depends_on","target":"pgaasvm"}]}}}
          volumeMounts:
            - mountPath: /plugin-configs
              name: plugin-configs
      containers:
        - name: {{ include "common.name" . }}
          image: {{ include "repositoryGenerator.repository" . }}/{{ .Values.image }}
          imagePullPolicy: {{ .Values.global.pullPolicy | default .Values.pullPolicy }}
          resources:
{{ include "common.resources" . | indent 12 }}
          ports:
          {{- range $index, $port := .Values.service.ports }}
            - containerPort: {{ $port.port }}
              protocol: TCP
          {{- end }}
          # disable liveness probe when breakpoints set in debugger
          # so K8s doesn't restart unresponsive container
          {{- if eq .Values.liveness.enabled true }}
          livenessProbe:
            tcpSocket:
              {{- range $index, $port := .Values.service.ports }}
              {{- if eq $port.name rule-mgmt }}
              port: {{ $port.port }}
              {{ end }}
              {{ end }}
            initialDelaySeconds: {{ .Values.liveness.initialDelaySeconds }}
            periodSeconds: {{ .Values.liveness.periodSeconds }}
          {{ end }}
          readinessProbe:
            httpGet:
              path: {{ .Values.readiness.path }}
              port: {{ .Values.service.internalPort }}
              scheme: {{ .Values.readiness.scheme }}
            initialDelaySeconds: {{ .Values.readiness.initialDelaySeconds }}
            periodSeconds: {{ .Values.readiness.periodSeconds }}
            failureThreshold: 1
            successThreshold: 1
            timeoutSeconds: 1
          env:
            - name: CONSUL_HOST
              value: consul-server.{{ include "common.namespace" . }}
            - name: CONFIG_BINDING_SERVICE
              value: config-binding-service
            - name: inventory_url
              value: {{ .Values.config.inventory_url }}
            - name: postgres_port
              value: "{{ .Values.postgres.config.pgPort }}"
            - name: cloudify_password
              {{- include "common.secret.envFromSecretFast" (dict "global" . "uid" "cm-pass" "key" "password") | indent 14 }}
            - name: dhandler_url
              value: {{ .Values.config.dhandler_url }}
            - name: cfy_url
              value: {{ .Values.config.cfy_url }}
            - name: cloudify_user
              value: admin
            - name: consul_url
              value: http://consul-server-ui:8500
            - name: postgres_user_dashboard
              {{- include "common.secret.envFromSecretFast" (dict "global" . "uid" "pg-user-creds" "key" "login") | indent 14 }}
            - name: postgres_password_dashboard
              {{- include "common.secret.envFromSecretFast" (dict "global" . "uid" "pg-user-creds" "key" "password") | indent 14 }}
            - name: postgres_db_name
              value: {{ .Values.postgres.config.pgDatabase }}
            - name: postgres_ip
              value: {{ .Values.postgres.service.name2 }}
            - name: msb_hostname
              value: "msb-iag.onap"
            - name: POD_IP
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: status.podIP
        - name: {{ include "common.name" . }}-filebeat
          env:
            - name: POD_IP
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: status.podIP
          image: {{ include "repositoryGenerator.image.logging" . }}
          imagePullPolicy: IfNotPresent
          resources: {}
          volumeMounts:
          - mountPath: /var/log/onap/dashboard
            name: component-log
          - mountPath: /usr/share/filebeat/data
            name: filebeat-data
          - mountPath: /usr/share/filebeat/filebeat.yml
            name: filebeat-conf
            subPath: filebeat.yml
      volumes:
        - emptyDir: {}
          name: component-log
        - emptyDir: {}
          name: filebeat-data
        - configMap:
            defaultMode: 420
            name: {{ include "common.fullname" . }}-filebeat-configmap
          name: filebeat-conf
        - emptyDir: {}
          name: tls-info
        - configMap:
            name: {{ include "common.fullname" . }}-plugins
          name: plugin-configs
      imagePullSecrets:
      - name: "{{ include "common.namespace" . }}-docker-registry-key"
