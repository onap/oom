# Copyright © 2017 Amdocs, Bell Canada
# Modifications Copyright © 2018 AT&T
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

#################################################################
# Global configuration defaults.
#################################################################
global:
  nodePortPrefix: 302
  persistence: {}

#################################################################
# Application configuration defaults.
#################################################################
# application image
image: onap/dmaap/zookeeper:6.0.3
pullPolicy: Always

# flag to enable debugging - application support required
debugEnabled: false


# default number of instances
replicaCount: 3

nodeSelector: {}

nodeAffinity: {}

affinity: {}

tolerations: {}

# probe configuration parameters
liveness:
  initialDelaySeconds: 40
  periodSeconds: 20
  timeoutSeconds: 10
  # necessary to disable liveness probe when setting breakpoints
  # in debugger so K8s doesn't restart unresponsive container
  enabled: true

readiness:
  initialDelaySeconds: 40
  periodSeconds: 20
  timeoutSeconds: 10

#Zookeeper properties
zkConfig:
  tickTime: 2000
  syncLimit: 5
  initLimit: 10
  maxClientCnxns: 200
  autoPurgeSnapRetainCount: 3
  autoPurgePurgeInterval: 24
  heapOptions: -Xmx2G -Xms2G
  kafkaOpts: -Djava.security.auth.login.config=/etc/zookeeper/secrets/jaas/zk_server_jaas.conf -Dzookeeper.kerberos.removeHostFromPrincipal=true -Dzookeeper.kerberos.removeRealmFromPrincipal=true -Dzookeeper.authProvider.1=org.apache.zookeeper.server.auth.SASLAuthenticationProvider -Dzookeeper.requireClientAuthScheme=sasl
  clientPort: 2181

jmx:
  port: 5555

prometheus:
  jmx:
    enabled: false
    image: solsson/kafka-prometheus-jmx-exporter@sha256
    imageTag: 6f82e2b0464f50da8104acd7363fb9b995001ddff77d248379f8788e78946143
    port: 5556

jaas:
  config:
    zkAdminUser: kafka
    zkAdminPassword: kafka_secret
    #zkAdminPasswordExternal= some password

secrets:
  - uid: zk-admin
    type: basicAuth
    externalSecret: '{{ .Values.jaas.config.zkAdminPasswordExternal}}'
    login: '{{ .Values.jaas.config.zkAdminUser }}'
    password: '{{ .Values.jaas.config.zkAdminPassword }}'
    passwordPolicy: required

## Persist data to a persitent volume
persistence:
  enabled: true

  ## A manually managed Persistent Volume and Claim
  ## Requires persistence.enabled: true
  ## If defined, PVC must be created manually before volume will be bound
  # existingClaim:
  volumeReclaimPolicy: Retain

  ## database data Persistent Volume Storage Class
  ## If defined, storageClassName: <storageClass>
  ## If set to "-", storageClassName: "", which disables dynamic provisioning
  ## If undefined (the default) or set to null, no storageClassName spec is
  ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
  ##   GKE, AWS & OpenStack)
  ##
  # storageClass: "-"
  accessMode: ReadWriteOnce
  size: 2Gi
  mountPath: /dockerdata-nfs
  mountSubPath: message-router/data-zookeeper


rollingUpdate:
  maxUnavailable: 1
service:
  type: ClusterIP
  name: message-router-zookeeper
  portName: message-router-zookeeper
  clientPortName: client
  clientPort: 2181
  serverPortName: server
  serverPort: 2888
  leaderElectionPortName: leader-election
  leaderElectionPort: 3888

ingress:
  enabled: false

# Resource Limit flavor -By Default using small
flavor: small
# Segregation for Different environment (Small and Large)
resources:
  small:
    limits:
      cpu: 2000m
      memory: 4Gi
    requests:
      cpu: 500m
      memory: 1Gi
  large:
    limits:
      cpu: 4000m
      memory: 8Gi
    requests:
      cpu: 1000m
      memory: 2Gi
  unlimited: {}
