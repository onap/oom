{{/*
# Copyright © 2017 Amdocs, AT&T, Bell Canada
# Modifications Copyright © 2018 ZTE
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
*/}}

apiVersion: apps/v1
kind: Deployment
metadata: {{- include "common.resourceMetadata" . | nindent 2 }}
spec:
  selector: {{- include "common.selectors" . | nindent 4 }}
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  revisionHistoryLimit: {{ .Values.revisionHistoryLimit }}
  minReadySeconds: {{ .Values.minReadySeconds }}
  strategy:
    type: {{ .Values.updateStrategy.type }}
    rollingUpdate:
      maxUnavailable: {{ .Values.updateStrategy.maxUnavailable }}
      maxSurge: {{ .Values.updateStrategy.maxSurge }}
  template:
    metadata: {{- include "common.templateMetadata" . | nindent 6 }}
    spec:
      initContainers:
      {{ if .Values.global.kafka.useKafka }}
        {{ include "common.readinessCheck.waitFor" (dict "dot" . "wait_for" .Values.readinessCheck.wait_for_service) | nindent 8 }}
      {{ else }}
        {{ include "common.readinessCheck.waitFor" (dict "dot" . "wait_for" .Values.readinessCheck.wait_for_service_without_kafka) | nindent 8 }}
      {{ end }}
        - name: {{ include "common.name" . }}-copy-jetty
          image: {{ include "repositoryGenerator.repository" . }}/{{ .Values.image }}
          imagePullPolicy: {{ .Values.global.pullPolicy | default .Values.pullPolicy }}
          command: ["/bin/sh","-c"]
          args: ['cp -a /app/jetty/ /app/jetty_rw/; mkdir /app/jetty_rw/jetty/ruby_temp']
          resources:
            limits:
              cpu: 400m
              memory: 400Mi
            requests:
              cpu: 30m
              memory: 200Mi
          {{ include "common.containerSecurityContext" . | indent 10 | trim }}
          volumeMounts:
            - name: {{ include "common.fullname" . }}-jetty
              mountPath: /app/jetty_rw
      containers:
        - name: {{ include "common.name" . }}
          image: {{ include "repositoryGenerator.repository" . }}/{{ .Values.image }}
          imagePullPolicy: {{ .Values.global.pullPolicy | default .Values.pullPolicy }}
          ports: {{ include "common.containerPorts" . | nindent 12  }}
          {{ include "common.containerSecurityContext" . | indent 10 | trim }}
          {{ if eq .Values.liveness.enabled true }}
          livenessProbe:
            httpGet:
              path: {{ .Values.liveness.path }}
              port: {{ .Values.service.internalPort }}
            initialDelaySeconds: {{ .Values.liveness.initialDelaySeconds }}
            periodSeconds: {{ .Values.liveness.periodSeconds }}
            timeoutSeconds: {{ .Values.liveness.timeoutSeconds }}
            successThreshold: {{ .Values.liveness.successThreshold }}
            failureThreshold: {{ .Values.liveness.failureThreshold }}
          {{ end }}
          readinessProbe:
            httpGet:
              path: {{ .Values.readiness.path }}
              port: {{ .Values.service.internalPort }}
            initialDelaySeconds: {{ .Values.readiness.initialDelaySeconds }}
            periodSeconds: {{ .Values.readiness.periodSeconds }}
            timeoutSeconds: {{ .Values.readiness.timeoutSeconds }}
            successThreshold: {{ .Values.readiness.successThreshold }}
            failureThreshold: {{ .Values.readiness.failureThreshold }}
          startupProbe:
            httpGet:
              path: {{ .Values.startup.path }}
              port: {{ .Values.service.internalPort }}
            initialDelaySeconds: {{ .Values.startup.initialDelaySeconds }}
            periodSeconds: {{ .Values.startup.periodSeconds }}
            timeoutSeconds: {{ .Values.startup.timeoutSeconds }}
            successThreshold: {{ .Values.startup.successThreshold }}
            failureThreshold: {{ .Values.startup.failureThreshold }}
          resources: {{ include "common.resources" . | nindent 12 }}
          env:
          - name: TMPDIR
            value: '/app/jetty/ruby_temp'
          - name: JAVA_OPTIONS
            value: {{ .Values.config.javaOptions }}
          - name: cassandra_ssl_enabled
            value: {{ .Values.config.cassandraSslEnabled | quote }}
          - name: TLS_CERT
            value: {{ .Values.be.tlsCert }}
          - name: TLS_KEY
            value: {{ .Values.be.tlsKey }}
          - name: TLS_PASSWORD
            value: {{ .Values.be.tlsPassword }}
          - name: KEYSTORE_PATH
            value: {{ .Values.be.keystorePath }}
          - name: KEYSTORE_PASSWORD
            value: {{ .Values.be.keystorePassword }}
          - name: CA_CERT
            value: {{ .Values.be.caCert }}
          - name: TRUSTSTORE_PATH
            value: {{ .Values.be.truststorePath }}
          - name: TRUSTSTORE_PASSWORD
            value: {{ .Values.be.truststorePassword }}
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          {{- if .Values.global.kafka.useKafka }}
          - name: SASL_JAAS_CONFIG
            valueFrom:
              secretKeyRef:
                name: {{ include "common.name" . }}-ku
                key: sasl.jaas.config
          - name: USE_KAFKA
            value: {{ .Values.global.kafka.useKafka | quote }}
          {{- end }}
          volumeMounts:
          - name: {{ include "common.fullname" . }}-jetty
            mountPath: /app/jetty
            subPath: jetty
          - name: {{ include "common.fullname" . }}-logs
            mountPath: /var/log/onap
          - name: {{ include "common.fullname" . }}-tmp
            mountPath: /tmp
          - name: logback
            mountPath: /tmp/logback.xml
            subPath: logback.xml
          - name: http-config
            mountPath: /app/jetty/start.d/http.ini
            subPath: http.ini
          - name: https-config
            mountPath: /app/jetty/start.d/https.ini
            subPath: https.ini
          - name: ssl-config
            mountPath: /app/jetty/start.d/ssl.ini
            subPath: ssl.ini
          - name: catalog-be-config
            mountPath: /app/jetty/config/catalog-be/janusgraph.properties
            subPath: janusgraph.properties
          - name: catalog-be-config
            mountPath: /app/jetty/config/catalog-be/distribution-engine-configuration.yaml
            subPath: distribution-engine-configuration.yaml
          - name: catalog-be-config
            mountPath: /app/jetty/config/catalog-be/configuration.yaml
            subPath: configuration.yaml
          - name: catalog-be-resource-config
            mountPath: /app/jetty/resources/key.properties
            subPath: key.properties
          - name: catalog-be-resource-config
            mountPath: /app/jetty/resources/portal.properties
            subPath: portal.properties
          - name: ready-probe-config
            mountPath: /app/jetty/ready-probe.sh
            subPath: ready-probe.sh

          lifecycle:
            postStart:
              exec:
                command: ["/bin/sh", "-c", "export SRC=/tmp/logback.xml; export DST=/app/jetty/config/catalog-be/; while [ ! -e $DST ]; do echo 'Waiting for $DST...'; sleep 5; done; sleep 2; /bin/cp -f $SRC $DST; echo 'Done copying logback.xml' ; echo 'Running BE_3_setup_key_and_trust_store.sh...' ; /app/jetty/BE_3_setup_key_and_trust_store.sh ; echo 'BE_3_setup_key_and_trust_store.sh completed' "]
        # side car containers
        {{ include "common.log.sidecar" . | nindent 8 }}
      serviceAccountName: {{ include "common.fullname" (dict "suffix" "read" "dot" . )}}
      {{ include "common.podSecurityContext" . | indent 6 | trim }}
      volumes:
      {{ include "common.log.volumes" (dict "dot" . "configMapNamePrefix" (tpl .Values.logConfigMapNamePrefix .)) | nindent 6 }}
      - name: logback
        configMap:
          name : {{ include "common.fullname" . }}-logging-configmap
      - name: {{ include "common.fullname" . }}-logs
        emptyDir:
          sizeLimit: {{ .Values.volumes.logSizeLimit }}
      - name: {{ include "common.fullname" . }}-tmp
        emptyDir:
          sizeLimit: {{ .Values.volumes.tmpSizeLimit }}
      - name: {{ include "common.fullname" . }}-jetty
        emptyDir:
          sizeLimit: {{ .Values.volumes.jettySizeLimit }}
      - name: http-config
        configMap:
          name: {{ include "common.release" . }}-sdc-http-be-configmap
          defaultMode: 0755
      - name: https-config
        configMap:
          name: {{ include "common.release" . }}-sdc-https-be-configmap
          defaultMode: 0755
      - name: ssl-config
        configMap:
          name: {{ include "common.release" . }}-sdc-ssl-be-configmap
          defaultMode: 0755
      - name: catalog-be-config
        configMap:
          name: {{ include "common.release" . }}-sdc-catalog-be-configmap
          defaultMode: 0755
      - name: catalog-be-resource-config
        configMap:
          name: {{ include "common.release" . }}-sdc-catalog-be-resource-configmap
          defaultMode: 0755
      - name: ready-probe-config
        configMap:
          name: {{ include "common.release" . }}-sdc-be-ready-probe-configmap
          defaultMode: 0755
      {{- include "common.imagePullSecrets" . | nindent 6 }}
