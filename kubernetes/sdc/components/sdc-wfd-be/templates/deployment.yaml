{{/*
# Copyright © 2017 Amdocs, AT&T, Bell Canada
# Modifications Copyright © 2018  ZTE
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
*/}}

apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "common.fullname" . }}
  namespace: {{ include "common.namespace" . }}
  labels:
    app: {{ include "common.name" . }}
    chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
    release: {{ include "common.release" . }}
    heritage: {{ .Release.Service }}
spec:
  selector:
    matchLabels:
      app: {{ include "common.name" . }}
  replicas: {{ .Values.replicaCount }}
  template:
    metadata:
      labels:
        app: {{ include "common.name" . }}
        release: {{ include "common.release" . }}
    spec:
      initContainers: {{ include "common.certInitializer.initContainer" . | nindent 6 }}
      {{- if .Values.initJob.enabled }}
      - name: {{ include "common.name" . }}-job-completion
        image: {{ include "repositoryGenerator.image.readiness" . }}
        imagePullPolicy: "{{ .Values.global.pullPolicy | default .Values.pullPolicy }}"
        command:
        - /app/ready.py
        args:
        - --job-name
        - {{ include "common.fullname" . }}-workflow-init
        env:
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        resources:
          limits:
            cpu: 100m
            memory: 100Mi
          requests:
            cpu: 3m
            memory: 20Mi
      {{ end }}
      containers:
        - name: {{ include "common.name" . }}
          image: {{ include "repositoryGenerator.repository" . }}/{{ .Values.image }}
          imagePullPolicy: {{ .Values.global.pullPolicy | default .Values.pullPolicy }}
          {{- if .Values.global.aafEnabled }}
          command:
          - sh
          args:
          - "-c"
          - |
            export $(grep '^c' {{ .Values.certInitializer.credsPath }}/mycreds.prop | xargs -0)
            export SERVER_SSL_KEY_PASSWORD=$cadi_keystore_password_p12
            export KEYMANAGER_PASS=$cadi_keystore_password_p12
            export SERVER_SSL_TRUST_PASSWORD=$cadi_truststore_password
            export SERVER_SSL_KEYSTORE_PATH={{ .Values.certInitializer.credsPath }}/{{ .Values.certInitializer.keystoreFile }}
            export SERVER_SSL_TRUSTSTORE_PATH={{ .Values.certInitializer.credsPath }}/{{ .Values.certInitializer.truststoreFile }}
            ./startup.sh
          {{- end }}
          ports:
          - containerPort: {{ (eq "true" (include "common.needTLS" .)) | ternary .Values.service.internalPort2 .Values.service.internalPort }}
          # disable liveness probe when breakpoints set in debugger
          # so K8s doesn't restart unresponsive container
          {{ if .Values.liveness.enabled }}
          livenessProbe:
            tcpSocket:
              port: {{ (eq "true" (include "common.needTLS" .)) | ternary .Values.service.internalPort2 .Values.service.internalPort }}
            initialDelaySeconds: {{ .Values.liveness.initialDelaySeconds }}
            periodSeconds: {{ .Values.liveness.periodSeconds }}
            successThreshold: {{ .Values.liveness.successThreshold }}
            failureThreshold: {{ .Values.liveness.failureThreshold }}
          {{ end }}
          readinessProbe:
            tcpSocket:
              port: {{ (eq "true" (include "common.needTLS" .)) | ternary .Values.service.internalPort2 .Values.service.internalPort }}
            initialDelaySeconds: {{ .Values.readiness.initialDelaySeconds }}
            periodSeconds: {{ .Values.readiness.periodSeconds }}
            successThreshold: {{ .Values.readiness.successThreshold }}
            failureThreshold: {{ .Values.readiness.failureThreshold }}
          startupProbe:
            tcpSocket:
              port: {{ (eq "true" (include "common.needTLS" .)) | ternary .Values.service.internalPort2 .Values.service.internalPort }}
            initialDelaySeconds: {{ .Values.startup.initialDelaySeconds }}
            periodSeconds: {{ .Values.startup.periodSeconds }}
            successThreshold: {{ .Values.startup.successThreshold }}
            failureThreshold: {{ .Values.startup.failureThreshold }}
          env:
          - name: JAVA_OPTIONS
            value: {{ .Values.config.javaOptions }}
          - name: CS_HOSTS
            value: "{{ .Values.global.sdc_cassandra.serviceName }}"
          - name: CS_PORT
            value: "{{ .Values.config.cassandraClientPort }}"
          - name: CS_AUTHENTICATE
            value: "{{ .Values.config.cassandraAuthenticationEnabled }}"
          - name: CS_USER
            valueFrom:
              secretKeyRef: {name: {{ include "common.release" . }}-sdc-cs-secrets, key: sdc_user}
          - name: CS_PASSWORD
            valueFrom:
              secretKeyRef: {name: {{ include "common.release" . }}-sdc-cs-secrets, key: sdc_password}
          - name: CS_SSL_ENABLED
            value: "{{ .Values.config.cassandraSSLEnabled }}"
          - name: CS_TRUST_STORE_PATH
            value: "{{ .Values.config.cassandraTrustStorePath }}"
          - name: CS_TRUST_STORE_PASSWORD
            valueFrom:
              secretKeyRef: {name: {{ include "common.release" . }}-sdc-cs-secrets, key: cs_truststore_password}
          - name: SDC_PROTOCOL
            value: "{{ (eq "true" (include "common.needTLS" .)) | ternary "HTTPS" "HTTP" }}"
          - name: SDC_ENDPOINT
            value: "{{ (eq "true" (include "common.needTLS" .)) | ternary .Values.config.sdcEndpoint.https .Values.config.sdcEndpoint.http }}"
          - name: SDC_USER
            value: "{{ .Values.config.sdcExternalUser }}"
          - name: SDC_PASSWORD
            valueFrom:
              secretKeyRef: {name: {{ include "common.release" . }}-sdc-cs-secrets, key: wf_external_user_password}
          {{- if (include "common.needTLS" .) }}
          - name: SERVER_SSL_ENABLED
            value: "true"
          - name: SERVER_SSL_KEYSTORE_TYPE
            value: "{{ .Values.config.serverSSLKeyStoreType }}"
          - name: SERVER_SSL_TRUSTSTORE_TYPE
            value: "{{ .Values.config.serverSSLTrustStoreType }}"
          {{- else }}
          - name: SERVER_SSL_ENABLED
            value: "false"
          {{- end }}
          volumeMounts: {{ include "common.certInitializer.volumeMount" . | nindent 10 }}
          resources: {{ include "common.resources" . | nindent 12 }}
      serviceAccountName: {{ include "common.fullname" (dict "suffix" "read" "dot" . )}}
      volumes: {{ include "common.certInitializer.volumes" . | nindent 8 }}
      imagePullSecrets:
      - name: "{{ include "common.namespace" . }}-docker-registry-key"
