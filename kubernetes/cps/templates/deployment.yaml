{{/*
  # Copyright (C) 2021 Pantheon.tech
  #
  # Licensed under the Apache License, Version 2.0 (the "License");
  # you may not use this file except in compliance with the License.
  # You may obtain a copy of the License at
  #
  #       http://www.apache.org/licenses/LICENSE-2.0
  #
  # Unless required by applicable law or agreed to in writing, software
  # distributed under the License is distributed on an "AS IS" BASIS,
  # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  # See the License for the specific language governing permissions and
  # limitations under the License.
  */}}

apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "common.fullname" . }}
  namespace: {{ include "common.namespace" . }}
  labels:
    app: {{ include "common.name" . }}
    chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
    release: {{ include "common.release" . }}
    heritage: {{ .Release.Service }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: {{ include "common.name" . }}
  template:
    metadata:
      labels:
        app: {{ include "common.name" . }}
        release: {{ include "common.release" . }}
    spec:
      initContainers:

      - name: {{ include "common.name" . }}-update-config
        image: {{ include "repositoryGenerator.image.envsubst" . }}
        imagePullPolicy: {{ .Values.global.pullPolicy | default .Values.pullPolicy }}
        command:
            - sh
        args:
          - -c
          - "cd /config-input && for PFILE in `find . -not -type d | grep -v -F ..`; do envsubst <${PFILE} >/config/${PFILE}; done"
        env:
          - name: DB_USERNAME
            {{- include "common.secret.envFromSecretFast" (dict "global" . "uid" "pg-user-secret" "key" "login") | indent 12 }}
          - name: DB_PASSWORD
            {{- include "common.secret.envFromSecretFast" (dict "global" . "uid" "pg-user-secret" "key" "password") | indent 12 }}
          - name: DB_HOST
            value: {{.Values.postgres.service.name2}}
          - name: DB_PORT
            value: "5432"
          - name: DB_NAME
            value: cpsdb
        volumeMounts:
          - mountPath: /config-input
            name: init-data-input
          - mountPath: /config
            name: init-data

      - name: {{ include "common.name" . }}-readiness
        image: {{ include "repositoryGenerator.image.readiness" . }}
        imagePullPolicy: {{ .Values.global.pullPolicy | default .Values.pullPolicy }}
        command:
        - /app/ready.py
        args:
          - --container-name
          - "{{ .Values.postgres.nameOverride }}"
        env:
          - name: NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace

      containers:
        - name: {{ include "common.name" . }}
          image: {{ include "repositoryGenerator.repository" . }}/{{ .Values.image }}
          imagePullPolicy: {{ .Values.global.pullPolicy | default .Values.pullPolicy }}
          ports:
            - containerPort: {{ .Values.service.internalPort }}
          # disable liveness probe when breakpoints set in debugger
          # so K8s doesn't restart unresponsive container
          {{- if eq .Values.liveness.enabled true }}
          livenessProbe:
            tcpSocket:
              port: {{ .Values.service.internalPort }}
            initialDelaySeconds: {{ .Values.liveness.initialDelaySeconds }}
            periodSeconds: {{ .Values.liveness.periodSeconds }}
          {{ end -}}
          readinessProbe:
            tcpSocket:
              port: {{ .Values.service.internalPort }}
            initialDelaySeconds: {{ .Values.readiness.initialDelaySeconds }}
            periodSeconds: {{ .Values.readiness.periodSeconds }}
          resources:
{{ include "common.resources" . | indent 12 }}
            {{- if .Values.nodeSelector }}
          nodeSelector:
            {{ toYaml .Values.nodeSelector | indent 12 }}
            {{- end -}}
            {{- if .Values.affinity }}
          affinity:
            {{ toYaml .Values.affinity | indent 12 }}
            {{- end }}
      volumes:
        - name: init-data-input
          configMap:
            name: {{ include "common.fullname" . }}
        - name: init-data
          emptyDir:
            medium: Memory
      imagePullSecrets:
        - name: "{{ include "common.namespace" . }}-docker-registry-key"
