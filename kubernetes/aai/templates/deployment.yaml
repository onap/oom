{{/*
# Copyright (c) 2018 Amdocs, Bell Canada, AT&T
# Modifications Copyright (c) 2020 Nokia, Orange
# Modifications Copyright Â© 2023 Nordix Foundation
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
*/}}

apiVersion: apps/v1
kind: Deployment
metadata: {{- include "common.resourceMetadata" (dict "annotations" .Values.annotations "dot" .) | nindent 2 }}
spec:
  selector:
    matchLabels:
      app: {{ include "common.name" . }}
  replicas: {{ .Values.replicaCount }}
  revisionHistoryLimit: {{ .Values.revisionHistoryLimit }}
  strategy:
    type: {{ .Values.updateStrategy.type }}
    {{- if (eq "RollingUpdate" .Values.updateStrategy.type) }}
    rollingUpdate:
      maxUnavailable: {{ .Values.updateStrategy.maxUnavailable }}
      maxSurge: {{ .Values.updateStrategy.maxSurge }}
    {{- end }}
  template:
    metadata: {{- include "common.templateMetadata" . | nindent 6 }}
    spec:
      terminationGracePeriodSeconds: {{ .Values.service.terminationGracePeriodSeconds }}
      {{ include "common.podSecurityContext" . | indent 6 | trim }}
      initContainers:
      - command: ["/bin/sh","-c"]
        args: ['cp -R /usr/local/etc/haproxy /usr/local/etc/haproxy_rw/']
        image: '{{ include "repositoryGenerator.repository" . }}/{{ .Values.image }}'
        imagePullPolicy: {{ .Values.global.pullPolicy | default .Values.pullPolicy }}
        name: copy-haproxy-config
        resources:
          limits:
            cpu: 100m
            memory: 200Mi
          requests:
            cpu: 2m
            memory: 100Mi
        {{ include "common.containerSecurityContext" . | indent 8 | trim }}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /usr/local/etc/haproxy_rw
          name: haproxy-etc
      containers:
      - name: {{ include "common.name" . }}
        image: '{{ include "repositoryGenerator.repository" . }}/{{ .Values.image }}'
        imagePullPolicy: {{ .Values.global.pullPolicy | default .Values.pullPolicy }}
        volumeMounts:
        - mountPath: /usr/local/etc/haproxy
          name: haproxy-etc
        - mountPath: /usr/local/etc/haproxy/resolvers.conf
          name: haproxy-config
          subPath: resolvers.conf
          readOnly: true
        - mountPath: /usr/local/etc/haproxy/haproxy.cfg
        {{ if .Values.global.installSidecarSecurity }}
          subPath: haproxy-pluggable-security.cfg
        {{ else }}
          subPath: haproxy.cfg
        {{ end }}
          name: haproxy-config
        ports:
        - containerPort: {{ .Values.service.internalPort }}
          name: {{ .Values.service.portName }}
        - containerPort: {{ .Values.metricsService.internalPort }}
          name: {{ .Values.metricsService.portName }}
        # disable liveness probe when breakpoints set in debugger
        # so K8s doesn't restart unresponsive container
        {{- if eq .Values.liveness.enabled true }}
        livenessProbe:
          tcpSocket:
            port: {{ .Values.service.internalPort }}
          initialDelaySeconds: {{ .Values.liveness.initialDelaySeconds }}
          periodSeconds: {{ .Values.liveness.periodSeconds }}
        {{ end -}}
        {{ include "common.containerSecurityContext" . | indent 8 | trim }}
        resources: {{ include "common.resources" . | nindent 10 }}
        readinessProbe:
          initialDelaySeconds: {{ .Values.readiness.initialDelaySeconds }}
          periodSeconds: {{ .Values.readiness.periodSeconds }}
          tcpSocket:
            port: {{ .Values.service.internalPort }}
      {{- if .Values.nodeSelector }}
      nodeSelector:
{{ toYaml .Values.nodeSelector | indent 8 }}
      {{- end -}}
      {{- if .Values.affinity }}
      affinity:
{{ toYaml .Values.affinity | indent 8 }}
      {{- end }}
      serviceAccountName: {{ include "common.fullname" (dict "suffix" "read" "dot" . )}}
      volumes:
      - name: haproxy-config
        configMap:
          name: aai-deployment-configmap
      - name: haproxy-etc
        emptyDir:
          sizeLimit: {{ .Values.volumes.haProxySizeLimit }}
      {{- include "common.imagePullSecrets" . | nindent 6 }}
