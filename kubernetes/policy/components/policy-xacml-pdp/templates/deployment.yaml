{{/*
#  ============LICENSE_START=======================================================
#   Copyright (C) 2020 AT&T Intellectual Property.
#   Modifications Copyright (C) 2024 Nordix Foundation.
#   Modifications Copyright Â© 2024 Deutsche Telekom
#  ================================================================================
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
#
#  SPDX-License-Identifier: Apache-2.0
#  ============LICENSE_END=========================================================
*/}}

apiVersion: apps/v1
kind: Deployment
metadata: {{- include "common.resourceMetadata" . | nindent 2 }}
spec:
  selector: {{- include "common.selectors" . | nindent 4 }}
  replicas: {{ .Values.replicaCount }}
  template:
    metadata: {{- include "common.templateMetadata" . | nindent 6 }}
    spec:
      {{ include "common.podSecurityContext" . | indent 6 | trim }}
      initContainers:
      - command:
        - /app/ready.py
        args:
        - --job-name
{{ if .Values.global.mariadbGalera.useInPolicy }}
        - {{ include "common.release" . }}-policy-galera-migrator-config
{{ else }}
        - {{ include "common.release" . }}-policy-pg-migrator-config
{{ end }}
        env:
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        image: {{ include "repositoryGenerator.image.readiness" . }}
        imagePullPolicy: {{ .Values.global.pullPolicy | default .Values.pullPolicy }}
        {{ include "common.containerSecurityContext" . | indent 8 | trim }}
        name: {{ include "common.name" . }}-readiness
        resources:
          limits:
            cpu: "100m"
            memory: "500Mi"
          requests:
            cpu: "3m"
            memory: "20Mi"
      - command:
        - sh
        args:
        - -c
        - JAASLOGIN=`echo $JAASLOGIN | tr -d '"'`; cd /config-input && for PFILE in `ls -1`; do envsubst <${PFILE} >/config/${PFILE}; done
        env:
        - name: RESTSERVER_USER
          {{- include "common.secret.envFromSecretFast" (dict "global" . "uid" "restserver-creds" "key" "login") | indent 10 }}
        - name: RESTSERVER_PASSWORD
          {{- include "common.secret.envFromSecretFast" (dict "global" . "uid" "restserver-creds" "key" "password") | indent 10 }}
        - name: API_USER
          {{- include "common.secret.envFromSecretFast" (dict "global" . "uid" "api-creds" "key" "login") | indent 10 }}
        - name: API_PASSWORD
          {{- include "common.secret.envFromSecretFast" (dict "global" . "uid" "api-creds" "key" "password") | indent 10 }}
        - name: SQL_USER
          {{- include "common.secret.envFromSecretFast" (dict "global" . "uid" "db-secret" "key" "login") | indent 10 }}
        - name: SQL_PASSWORD
          {{- include "common.secret.envFromSecretFast" (dict "global" . "uid" "db-secret" "key" "password") | indent 10 }}
        - name: JAASLOGIN
          valueFrom:
            secretKeyRef:
              name: {{ include "common.name" . }}-ku
              key: sasl.jaas.config
        - name: KAFKA_URL
          value: {{ include "common.release" . }}-{{ .Values.global.kafkaBootstrap }}
        - name: SASL
          value: {{ .Values.kafkaUser.authenticationType | upper }}
        - name: GROUP_ID
          value: {{ .Values.config.kafka.consumer.groupId }}
        - name: PAP_TOPIC
          value: {{ .Values.config.app.listener.policyPdpPapTopic }}
        volumeMounts:
        - mountPath: /config-input
          name: pdpxconfig
        - mountPath: /config
          name: pdpxconfig-processed
        image: {{ include "repositoryGenerator.image.envsubst" . }}
        imagePullPolicy: {{ .Values.global.pullPolicy | default .Values.pullPolicy }}
        {{ include "common.containerSecurityContext" . | indent 8 | trim }}
        name: {{ include "common.name" . }}-update-config
      containers:
        - name: {{ include "common.name" . }}
          {{ include "common.containerSecurityContext" . | indent 10 | trim }}
          image: {{ include "repositoryGenerator.repository" . }}/{{ .Values.image }}
          imagePullPolicy: {{ .Values.global.pullPolicy | default .Values.pullPolicy }}
          command: ["/opt/app/policy/pdpx/bin/policy-pdpx.sh"]
          args: ["/opt/app/policy/pdpx/etc/mounted/config.json"]
          ports: {{ include "common.containerPorts" . | nindent 12  }}
          # disable liveness probe when breakpoints set in debugger
          # so K8s doesn't restart unresponsive container
          {{- if eq .Values.liveness.enabled true }}
          livenessProbe:
            tcpSocket:
              port: {{ .Values.service.internalPort }}
            initialDelaySeconds: {{ .Values.liveness.initialDelaySeconds }}
            periodSeconds: {{ .Values.liveness.periodSeconds }}
          {{ end -}}
          readinessProbe:
            tcpSocket:
              port: {{ .Values.service.internalPort }}
            initialDelaySeconds: {{ .Values.readiness.initialDelaySeconds }}
            periodSeconds: {{ .Values.readiness.periodSeconds }}
          volumeMounts:
          - name: policy-guard
            mountPath: /opt/app/policy/pdpx/apps/guard
          - name: pdpxconfig-processed
            mountPath: /opt/app/policy/pdpx/apps/guard/xacml.properties
            subPath: xacml.properties
          - name: policy-match
            mountPath: /opt/app/policy/pdpx/apps/match
          - name: pdpxconfig-processed
            mountPath: /opt/app/policy/pdpx/apps/match/xacml.properties
            subPath: xacml.properties
          - name: policy-monitoring
            mountPath: /opt/app/policy/pdpx/apps/monitoring
          - name: pdpxconfig-processed
            mountPath: /opt/app/policy/pdpx/apps/monitoring/xacml.properties
            subPath: xacml.properties
          - name: policy-naming
            mountPath: /opt/app/policy/pdpx/apps/naming
          - name: pdpxconfig-processed
            mountPath: /opt/app/policy/pdpx/apps/naming/xacml.properties
            subPath: xacml.properties
          - name: policy-native
            mountPath: /opt/app/policy/pdpx/apps/native
          - name: pdpxconfig-processed
            mountPath: /opt/app/policy/pdpx/apps/native/xacml.properties
            subPath: xacml.properties
          - name: policy-optimization
            mountPath: /opt/app/policy/pdpx/apps/optimization
          - name: pdpxconfig-processed
            mountPath: /opt/app/policy/pdpx/apps/optimization/xacml.properties
            subPath: xacml.properties
          - name: logs
            mountPath: /var/log/onap
          - name: empty-dir
            mountPath: /tmp
            subPath: tmp-dir
          - mountPath: /opt/app/policy/pdpx/etc/logback.xml
            subPath: logback.xml
            name: pdpxconfig-processed
          - mountPath: /opt/app/policy/pdpx/etc/mounted
            name: pdpxconfig-processed
          - mountPath: /etc/localtime
            name: localtime
            readOnly: true
          resources: {{ include "common.resources" . | nindent 12 }}
        {{- if .Values.nodeSelector }}
      nodeSelector:
{{ toYaml .Values.nodeSelector | indent 8 }}
        {{- end -}}
        {{- if .Values.affinity }}
      affinity:
{{ toYaml .Values.affinity | indent 8 }}
        {{- end }}
      serviceAccountName: {{ include "common.fullname" (dict "suffix" "read" "dot" . )}}
      volumes:
        - name: policy-guard
          emptyDir:
            sizeLimit: {{ .Values.dirSizes.policyDir.sizeLimit }}
        - name: policy-match
          emptyDir:
            sizeLimit: {{ .Values.dirSizes.policyDir.sizeLimit }}
        - name: policy-monitoring
          emptyDir:
            sizeLimit: {{ .Values.dirSizes.policyDir.sizeLimit }}
        - name: policy-naming
          emptyDir:
            sizeLimit: {{ .Values.dirSizes.policyDir.sizeLimit }}
        - name: policy-native
          emptyDir:
            sizeLimit: {{ .Values.dirSizes.policyDir.sizeLimit }}
        - name: policy-optimization
          emptyDir:
            sizeLimit: {{ .Values.dirSizes.policyDir.sizeLimit }}
        - name: empty-dir
          emptyDir:
            sizeLimit: {{ .Values.dirSizes.emptyDir.sizeLimit }}
        - name: logs
          emptyDir:
            sizeLimit: {{ .Values.dirSizes.logDir.sizeLimit }}
        - name: localtime
          hostPath:
            path: /etc/localtime
        - name: pdpxconfig
          configMap:
            name: {{ include "common.fullname" . }}-configmap
            defaultMode: 0755
        - name: pdpxconfig-processed
          emptyDir:
            medium: Memory
            sizeLimit: 64Mi
      {{- include "common.imagePullSecrets" . | nindent 6 }}
