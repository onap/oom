# Copyright Â© 2017 Amdocs, Bell Canada
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  labels:
    app: {{ include "common.name" . }}
    chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
  name: {{ include "common.fullname" . }}
  namespace: {{ include "common.namespace" . }}
spec:
  replicas: {{ .Values.replicaCount }}
  template:
    metadata:
      labels:
        app: {{ include "common.name" . }}
        release: {{ .Release.Name }}
    spec:
      initContainers:
      - name: {{ include "common.name" . }}-config-container
        image: {{ .Values.global.aaf.repository }}onap/aaf/aaf_config:{{.Values.global.aaf.imageVersion}}
        imagePullPolicy: {{ .Values.global.pullPolicy | default .Values.pullPolicy }}
        volumeMounts:
          - mountPath: "/opt/app/osaaf"
            name: {{ include "common.name" . }}-config-vol
        env:
          - name: aaf_env
            value: "{{ .Values.global.aaf.aaf_env }}"
          - name: cadi_latitude
            value: "{{ .Values.global.aaf.cadi_latitude }}"
          - name: cadi_longitude
            value: "{{ .Values.global.aaf.cadi_longitude }}"
          - name: aaf_locator_container
            value: "oom"
          - name: aaf_locator_container_ns
            value: "{{ .Release.Namespace }}"
          - name: aaf_locate_url
            value: "https://{{.Values.global.aaf.locate.fqdn}}.{{.Values.global.aaf.ns}}:{{.Values.global.aaf.locate.internal_port}}"
          - name: aaf_locator_public_fqdn
            value: "{{.Values.global.aaf.public_fqdn}}"
          - name: aaf_locator_name
            value: "{{.Values.global.aaf.aaf_locator_name}}"
          - name: aaf_locator_name_oom
            value: "{{.Values.global.aaf.aaf_locator_name_oom}}"
          - name: CASSANDRA_CLUSTER
            value: "{{.Values.global.aaf.cass.fqdn}}.{{.Values.global.aaf.ns}}"
#          - name: CASSANDRA_USER
#            value: ""
#          - name: CASSANDRA_PASSWORD
#            value: ""
#         - name: CASSANDRA_PORT
#            value: ""
      - name: {{ include "common.name" . }}-readiness
        command:
        - /root/ready.py
        args:
        - --container-name
        - aaf-locate
        env:
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        image: "{{ .Values.global.readinessRepository }}/{{ .Values.global.readinessImage }}"
        imagePullPolicy: {{ .Values.global.pullPolicy | default .Values.pullPolicy }}
      containers:
      - name: {{ include "common.name" . }}
        command: ["/bin/bash","-c","cd /opt/app/aaf && /bin/bash bin/pod_wait.sh aaf-oauth aaf-service && exec bin/oauth"]
#        command: ["/bin/bash","/opt/app/aaf/pod/pod_wait.sh","aaf_oauth","sleep","0","cd /opt/app/aaf;bin/oauth"]
        image: {{ .Values.global.aaf.repository }}onap/aaf/aaf_oauth:{{.Values.global.aaf.imageVersion}}
        imagePullPolicy: {{ .Values.global.aaf.pullPolicy | default .Values.pullPolicy }}
        volumeMounts:
        - mountPath: "/opt/app/osaaf"
          name: {{ include "common.name" . }}-config-vol
        - mountPath: /etc/localtime
          name: localtime
          readOnly: true
        {{- if eq .Values.liveness.enabled true }}
        livenessProbe:
          tcpSocket:
            port: {{ .Values.service.internalPort }}
          initialDelaySeconds: {{ .Values.liveness.initialDelaySeconds }}
          periodSeconds: {{ .Values.liveness.periodSeconds }}
        {{ end -}}
        readinessProbe:
          tcpSocket:
            port: {{ .Values.service.internalPort }}
          initialDelaySeconds: {{ .Values.readiness.initialDelaySeconds }}
          periodSeconds: {{ .Values.readiness.periodSeconds }}
        resources:
{{ include "common.resources" . | indent 12 }}
      {{- if .Values.nodeSelector }}
      nodeSelector:
{{ toYaml .Values.nodeSelector | indent 10 }}
      {{- end -}}
      {{- if .Values.affinity }}
      affinity:
{{ toYaml .Values.affinity | indent 10 }}
      {{- end }}
      volumes:
      - name: localtime
        hostPath:
          path: /etc/localtime
      - name: {{ include "common.name" . }}-config-vol
        emptyDir: {}
      imagePullSecrets:
      - name: "{{ include "common.namespace" . }}-docker-registry-key"
