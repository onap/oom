{
  "comments": [
    {
      "key": {
        "uuid": "f6c92fe1_87075b59",
        "filename": "kubernetes/sdc/components/sdc-helm-validator/values.yaml",
        "patchSetId": 6
      },
      "lineNbr": 21,
      "author": {
        "id": 4965
      },
      "writtenOn": "2021-04-15T10:08:43Z",
      "side": 1,
      "message": "technically v3.3.4 is no longer supported but as it\u0027s less than a year old I\u0027ll not complain too much about it;) The most important is that you have just helm 3 now",
      "revId": "097603fe40c25761c050579a5a467cc98415efbd",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0e8095a3_0b9155a2",
        "filename": "kubernetes/sdc/components/sdc-helm-validator/values.yaml",
        "patchSetId": 6
      },
      "lineNbr": 54,
      "author": {
        "id": 4965
      },
      "writtenOn": "2021-04-15T10:08:43Z",
      "side": 1,
      "message": "I\u0027m not a java specialist but will our resources definitions work fine with the static java resource params that you have in your cmd line:\n[\"java\",\"-XX:+UseParallelGC\",\"-XX:MinRAMPercentage\u003d50\",\"-XX:MaxRAMPercentage\u003d50\",\"-XX:MinHeapFreeRatio\u003d10\",\"-XX:MaxHeapFreeRatio\u003d20\",\"-jar\",\"./opt/helmvalidator/helmvalidator.jar\"]",
      "revId": "097603fe40c25761c050579a5a467cc98415efbd",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4a23f9b2_fd7109df",
        "filename": "kubernetes/sdc/components/sdc-helm-validator/values.yaml",
        "patchSetId": 6
      },
      "lineNbr": 54,
      "author": {
        "id": 6310
      },
      "writtenOn": "2021-04-15T11:30:45Z",
      "side": 1,
      "message": "Explanation: This entry point is for Java memory optimization. Since Java 11, JVM has possibility to calculate amount of HEAP memory based on available container resources. Default settings:\n1/2 memory -\u003e when container has small limits (less than 256 mb) \n1/4 memory -\u003e when container has large limits (more than 256) \n\nIf you set limits to 256 and 512 your heap still has 128 mb size. \n\nCurrent settings (XX:MinRAMPercentage\u003d50, XX:MaxRAMPercentage\u003d50\" )is not static, it is percentage of limits: 1/2 memory -\u003e for any resource limits. \nMemory limit 256 -\u003e heap size 128 \nMemory limit 512 -\u003e heap size 256 .\nWe get linear memory calculation. \n--------\nXX:MinHeapFreeRatio\u003d10 XX:MaxHeapFreeRatio\u003d20 - it force garbage collector to release memory earlier - it is also percentage values. \n\nSource: \nhttps://docs.oracle.com/en/java/javase/11/gctuning/factors-affecting-garbage-collection-performance.html#GUID-5508674B-F32D-4B02-9002-D0D8C7CDDC75",
      "parentUuid": "0e8095a3_0b9155a2",
      "revId": "097603fe40c25761c050579a5a467cc98415efbd",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    }
  ]
}