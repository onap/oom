{{/*
#============LICENSE_START========================================================
# ================================================================================
# Copyright (c) 2021 ZTE Intellectual Property. All rights reserved.
# ================================================================================
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ============LICENSE_END=========================================================
*/}}

apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "common.fullname" . }}
  namespace: {{ include "common.namespace" . }}
  labels:
    app: {{ include "common.name" . }}
    chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
    release: {{ include "common.release" . }}
    heritage: {{ .Release.Service }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: {{ include "common.name" . }}
  template:
    metadata:
      labels:
        app: {{ include "common.name" . }}
        release: {{ include "common.release" . }}
    spec:
      initContainers:
        - name: init-consul
          image: {{ include "repositoryGenerator.repository" . }}/{{ .Values.global.consulLoaderImage }}
          imagePullPolicy: {{ .Values.global.pullPolicy | default .Values.pullPolicy }}
          args:
            - --key
            - k8s-plugin|/plugin-configs/k8s-plugin.json
            - --key
            - dmaap-plugin|/plugin-configs/dmaap-plugin.json
          resources: {"tosca_definitions_version":"cloudify_dsl_1_3","imports":["https://www.getcloudify.org/spec/cloudify/4.5.5/types.yaml","plugin:k8splugin?version=>=3.4.3,<4.0.0","plugin:dcaepolicyplugin?version=2.4.0","plugin:pgaas?version=1.3.0"],"inputs":{"dcae_CL_publish_url":{"type":"string","default":"http://message-router.onap:3904/events/unauthenticated.DCAE_CL_OUTPUT"},"ves_fault_publish_url":{"type":"string","default":"http://message-router.onap:3904/events/unauthenticated.SEC_FAULT_OUTPUT"},"msb_hostname":{"type":"string","default":"msb-iag.onap"},"pgaas_cluster_name":{"type":"string","default":"dcae-pg-primary.onap"},"database_name":{"type":"string","default":"holmes"},"he_image":{"type":"string","default":"nexus3.onap.org:10001/onap/holmes/engine-management:1.2.9"},"service_component_type":{"type":"string","default":"holmes-engine-mgmt"},"service_id":{"type":"string","default":"holmes-engine-mgmt"},"service_component_name_override":{"type":"string","default":"holmes-engine-mgmt"},"dcae-analytics-holmes-engine-mgt_cpu_limit":{"type":"string","default":"500m"},"dcae-analytics-holmes-engine-mgt_cpu_request":{"type":"string","default":"500m"},"dcae-analytics-holmes-engine-mgt_memory_limit":{"type":"string","default":"1024Mi"},"dcae-analytics-holmes-engine-mgt_memory_request":{"type":"string","default":"256Mi"}},"node_templates":{"pgaasvm":{"type":"dcae.nodes.pgaas.database","properties":{"writerfqdn":{"get_input":"pgaas_cluster_name"},"name":{"get_input":"database_name"},"use_existing":true}},"holmesengine":{"type":"dcae.nodes.ContainerizedServiceComponent","interfaces":{"cloudify.interfaces.lifecycle":{"start":{"inputs":{"envs":{"URL_JDBC":{"get_attribute":["pgaasvm","admin","host"]},"JDBC_PASSWORD":{"get_attribute":["pgaasvm","admin","password"]},"JDBC_USERNAME":{"get_attribute":["pgaasvm","admin","user"]},"MSB_ADDR":{"get_input":"msb_hostname"}},"ports":["9102:0"]}}}},"properties":{"service_component_type":{"get_input":"service_component_type"},"service_id":{"get_input":"service_id"},"service_component_name_override":{"get_input":"service_component_name_override"},"application_config":{"msb.hostname":{"get_input":"msb_hostname"},"msb.uri":"/api/microservices/v1/services","services_calls":{},"streams_publishes":{"dcae_cl_out":{"dmaap_info":{"topic_url":{"get_input":"dcae_CL_publish_url"}},"type":"message_router"}},"streams_subscribes":{"ves_fault":{"dmaap_info":{"topic_url":{"get_input":"ves_fault_publish_url"}},"type":"message_router"}}},"image":{"get_input":"he_image"},"resource_config":{"limits":{"cpu":{"get_input":"dcae-analytics-holmes-engine-mgt_cpu_limit"},"memory":{"get_input":"dcae-analytics-holmes-engine-mgt_memory_limit"}},"requests":{"cpu":{"get_input":"dcae-analytics-holmes-engine-mgt_cpu_request"},"memory":{"get_input":"dcae-analytics-holmes-engine-mgt_memory_request"}}}},"relationships":[{"type":"cloudify.relationships.depends_on","target":"pgaasvm"}]}}}
          volumeMounts:
            - mountPath: /plugin-configs
              name: plugin-configs
      containers:
        - name: {{ include "common.name" . }}
          image: {{ include "repositoryGenerator.repository" . }}/{{ .Values.image }}
          imagePullPolicy: {{ .Values.global.pullPolicy | default .Values.pullPolicy }}
          resources:
{{ include "common.resources" . | indent 12 }}
          ports:
          {{- range $index, $port := .Values.service.ports }}
            - containerPort: {{ $port.port }}
              protocol: TCP
          {{- end }}
          # disable liveness probe when breakpoints set in debugger
          # so K8s doesn't restart unresponsive container
          {{- if eq .Values.liveness.enabled true }}
          livenessProbe:
            tcpSocket:
              {{- range $index, $port := .Values.service.ports }}
              {{- if eq $port.name "engine-mgmt" }}
              port: {{ $port.port }}
              {{- end }}
              {{- end }}
            initialDelaySeconds: {{ .Values.liveness.initialDelaySeconds }}
            periodSeconds: {{ .Values.liveness.periodSeconds }}
          {{- end }}
          readinessProbe:
            httpGet:
              path: {{ .Values.readiness.path }}
              {{- range $index, $port := .Values.service.ports }}
              {{- if eq $port.name "engine-mgmt" }}
              port: {{ $port.port }}
              {{- end }}
              {{- end }}
              scheme: {{ .Values.readiness.scheme }}
            initialDelaySeconds: {{ .Values.readiness.initialDelaySeconds }}
            periodSeconds: {{ .Values.readiness.periodSeconds }}
            failureThreshold: 1
            successThreshold: 1
            timeoutSeconds: 1
          env:
            - name: CONSUL_HOST
              value: consul-server.{{ include "common.namespace" . }}
            - name: CONFIG_BINDING_SERVICE
              value: config-binding-service
            - name: JDBC_USERNAME
              {{- include "common.secret.envFromSecretFast" (dict "global" . "uid" "pg-user-creds" "key" "login") | indent 14 }}
            - name: JDBC_PASSWORD
              {{- include "common.secret.envFromSecretFast" (dict "global" . "uid" "pg-user-creds" "key" "password") | indent 14 }}
            - name: DB_ADMIN_USERNAME
              {{- include "common.secret.envFromSecretFast" (dict "global" . "uid" "db-admin-creds" "key" "login") | indent 10 }}
            - name: DB_ADMIN_PASSWORD
              {{- include "common.secret.envFromSecretFast" (dict "global" . "uid" "db-admin-creds" "key" "password") | indent 10 }}
            - name: DB_NAME
              value: {{ .Values.postgres.config.pgDatabase }}
            - name: URL_JDBC
              value: {{ .Values.postgres.service.name }}
            - name: DB_PORT
              value: "{{ .Values.postgres.config.pgPort }}"
            - name: POD_IP
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: status.podIP
      volumes:
        - configMap:
            name: {{ include "common.fullname" . }}-plugins
          name: plugin-configs
      imagePullSecrets:
      - name: "{{ include "common.namespace" . }}-docker-registry-key"
