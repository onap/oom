storage.backend=cql
storage.hostname={{ .Values.global.sdc_cassandra.serviceName }}.{{ include "common.namespace" . }}.svc.cluster.local
storage.port={{ .Values.cassandra.port }}
storage.username={{ .Values.cassandra.cassandraUsername }}
storage.password={{ .Values.cassandra.cassandraPassword }}
storage.connection-timeout={{ .Values.cassandra.connectionTimeout }}
storage.cql.keyspace=sdctitan

storage.cql.ssl.enabled={{ .Values.cassandra.cassandraSslEnabled }}
storage.cql.ssl.keystore.location={{ .Values.cassandra.keystoreLocation }}
storage.cql.ssl.keystore.password={{ .Values.cassandra.keystorePassword }}
storage.cql.ssl.truststore.location={{ .Values.cassandra.truststoreLocation }}
storage.cql.ssl.truststore.password={{ .Values.cassandra.truststorePassword }}

storage.cql.read-consistency-level={{ .Values.cassandra.readConsistencyLevel }}
storage.cql.write-consistency-level={{ .Values.cassandra.writeConsistencyLevel }}
storage.cql.replication-strategy-class=NetworkTopologyStrategy


storage.cql.replication-strategy-options='{{ .Values.global.sdc_cassandra.dataCenter }}': {{ .Values.global.sdc_cassandra.replicaCount }}
storage.cql.local-datacenter={{ .Values.global.sdc_cassandra.dataCenter }}

storage.cql.replication-strategy-options={{ $replicationStrategyOptions }}

cache.db-cache={{ .Values.cassandra.db_cache }}
cache.db-cache-clean-wait=20
cache.db-cache-time=180000
cache.db-cache-size=0.5

cache.tx-cache-size=1000000

storage.lock.retries=5
graph.replace-instance-if-exists=true
