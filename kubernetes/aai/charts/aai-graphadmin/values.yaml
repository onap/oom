# Default values for resources.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.
global: # global defaults
  nodePortPrefix: 302
  readinessRepository: oomk8s
  readinessImage: readiness-check:2.0.0


# application image
repository: nexus3.onap.org:10001
image: onap/aai-graphadmin:1.0-STAGING-latest
pullPolicy: Always
restartPolicy: Always

# default number of instances
replicaCount: 1

# Configuration for the graphadmin deployment
config:
  # User information for the admin user in container
  userId: 1000
  groupId: 1000

  # Specifies that the cluster connected to a dynamic
  # cluster being spinned up by kubernetes deployment
  cluster:
    cassandra:
      dynamic: true

  # If cluster.cassandra.dynamic is set to false 
  # Then the following configuration should be uncommented
  # This is if you are planning to connect to a existing
  # Cassandra cluster instead of doing the deployment
  #storage:
  #  backend: cassandra
  #  hostname: somehost1,somehost2,somehost3
  #  connectionTimeout: 100000
  #  cacheSize: 1000000
  #  clusterName: someClusterName
  #  localDataCenter: someDataCenter
  #  keyConsistent: true
  #  # If backend is cql or cassandra it should be keyspace name
  #  # else backend is hbase it should be hbase table name
  #  name: your_hbase_table_or_keyspace_name

  #  # CQL driver specific properties for janusgraph
  #  cql:
  #    # Name of the Cassandra Cluster
  #    cluster: someclustername
  #    readConsistency: QUORUM
  #    writeConsistency: QUORUM
  #    replicationFactor: 3
  #    localConsistencyForSysOps: true

  #  # Cassandra driver specific properties for janusgraph
  #  cassandra:
  #    # Name of the Cassandra Cluster
  #    cluster: someclustername
  #    readConsistency: LOCAL_QUORUM
  #    writeConsistency: LOCAL_QUORUM
  #    replicationFactor: 3
    
  # Specifies if the basic authorization is enabled
  basic:
    auth:
      enabled: true
      username: AAI
      passwd: AAI

  # Active spring profiles for the resources microservice
  profiles:
    active: production,dmaap,one-way-ssl

  # Notification event specific properties
  notification:
    eventType: AAI-EVENT
    domain: dev

  # Schema specific properties that include supported versions of api
  schema:
    source: 
      # Specifies which folder to take a look at
      name: onap
    uri:
      # Base URI Path of the application
      base:
        path: /aai 
    version:
      # Current version of the REST API
      api:
        default: v14
      # Specifies which version the depth parameter is configurable
      depth: v9
      # List of all the supported versions of the API
      list: v8,v9,v10,v11,v12,v13,v14
      # Specifies from which version related link should appear
      related:
        link: v10
      # Specifies from which version the app root change happened
      app:
        root: v11
      # Specifies from which version the xml namespace changed
      namespace:
        change: v12
      # Specifies from which version the edge label appeared in API
      edge:
        label: v12

  # Keystore configuration password and filename
  keystore:
    filename: aai_keystore
    passwd: OBF:1vn21ugu1saj1v9i1v941sar1ugw1vo0

  # Truststore configuration password and filename
  truststore:
    filename: aai_keystore
    passwd: OBF:1vn21ugu1saj1v9i1v941sar1ugw1vo0

  # Specifies which clients should always default to realtime graph connection
  realtime:
    clients: JUNITTESTAPP1,1|JUNITTESTAPP2,-1

  # Specifies the timeout limit for the REST API requests
  timeout:
    enabled: true
    limit: 180000

  # Default maximum records to fix for the data grooming and dupeTool
  maxFix: 
    dataGrooming: 150
    dupeTool: 25
    
  # Default number of sleep minutes for dataGrooming and dupeTool
  sleepMinutes:
    dataGrooming: 7
    dupeTool: 7

  # Cron specific attributes to be triggered for the graphadmin spring cron tasks
  cron:
    # Specifies that the data grooming tool which runs duplicates should be enabled
    dataGrooming:
      enabled: true
    # Specifies that the data snapshot which takes a graphson snapshot should be enabled
    dataSnapshot:
      enabled: true
      params: JUST_TAKE_SNAPSHOT

    # Data cleanup which zips snapshots older than x days and deletes older than y days
    dataCleanup:

      dataGrooming:
        enabled: true
        # Zips up the dataGrooming files older than 5 days
        ageZip: 5
        # Deletes the dataGrooming files older than 30 days
        ageDelete: 30

      dataSnapshot:
        enabled: true
        # Zips up the dataSnapshot graphson files older than 5 days
        ageZip: 5
        # Deletes the dataSnapshot graphson files older than 30 days
        ageDelete: 30
 
  # Logback debug enabled
  logback:
    console:
      # If enabled, container will print all logback to standard output
      # This will make debugging much easier but it should only be done
      # when debugging the issue and changed back as it can affect performance
      # since when this is enabled, it prints a lot of information to console
      enabled: false


nodeSelector: {}

affinity: {}

# probe configuration parameters
liveness:
  initialDelaySeconds: 60
  periodSeconds: 60
  # necessary to disable liveness probe when setting breakpoints
  # in debugger so K8s doesn't restart unresponsive container
  enabled: false

readiness:
  initialDelaySeconds: 60
  periodSeconds: 10


service:
  type: ClusterIP
  # REST API port for the graphadmin microservice
  portName: aai-graphadmin-8449
  internalPort: 8449
  portName2: aai-graphadmin-5005
  internalPort2: 5005


ingress:
  enabled: false

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  #
  # Example:
  # Configure resource requests and limits
  # ref: http://kubernetes.io/docs/user-guide/compute-resources/
  # Minimum memory for development is 2 CPU cores and 4GB memory
  # Minimum memory for production is 4 CPU cores and 8GB memory
#resources:
#  limits:
#    cpu: 2
#    memory: 4Gi
#  requests:
#    cpu: 2
#    memory: 4Gi
