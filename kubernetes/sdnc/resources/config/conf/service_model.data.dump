-- MySQL dump 10.13  Distrib 5.6.22, for Linux (x86_64)
--
-- Host: sdnctldb01    Database: sdnctl
-- ------------------------------------------------------
-- Server version	5.6.36-enterprise-commercial-advanced-log

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

--
-- Table structure for table `SERVICE_MODEL`
--

DROP TABLE IF EXISTS `SERVICE_MODEL`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `SERVICE_MODEL` (
  `service_uuid` varchar(255) NOT NULL,
  `model_yaml` longblob,
  `invariant_uuid` varchar(255) DEFAULT NULL,
  `version` varchar(255) DEFAULT NULL,
  `name` varchar(255) DEFAULT NULL,
  `description` varchar(1024) DEFAULT NULL,
  `type` varchar(255) DEFAULT NULL,
  `category` varchar(255) DEFAULT NULL,
  `ecomp_naming` char(1) DEFAULT NULL,
  `service_instance_name_prefix` varchar(255) DEFAULT NULL,
  `filename` varchar(100) DEFAULT NULL,
  `naming_policy` varchar(255) DEFAULT NULL,
  PRIMARY KEY (`service_uuid`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `SERVICE_MODEL`
--

LOCK TABLES `SERVICE_MODEL` WRITE;
/*!40000 ALTER TABLE `SERVICE_MODEL` DISABLE KEYS */;
INSERT INTO `SERVICE_MODEL` VALUES ('0',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL), ('00e50cbd-ef0f-4b28-821e-f2b583752dd3','!!com.att.sdnctl.uebclient.SdncNetworkServiceModel\ndescription: null\nimports:\n- Second try_vbng: {file: resource-SecondTryVbng-template.yml}\nmetadata: {invariantUUID: dbf9288d-18ef-4d28-82cb-29373028f367, UUID: 00e50cbd-ef0f-4b28-821e-f2b583752dd3,\n  name: vBNG_0202, description: Virtual, type: Service, category: Network L1-3, serviceEcompNaming: false,\n  serviceHoming: false}\ntopology_template:\n  node_templates:\n    Second try_vbng 1:\n      type: com.att.d2.resource.vf.SecondTryVbng\n      metadata: {invariantUUID: 57516bfc-35f5-4169-a4ee-66a495a9c645, UUID: f196fdad-9b74-4fcc-9d38-72f4a71aea77,\n        customizationUUID: 72a9f413-4d16-4f7b-b0bc-d98f87997f01, version: \'1.0\', name: Second try_vbng,\n        description: ntwork, type: VF, category: Generic, subcategory: Network Elements}\n  groups:\n    secondtry_vbng1..SecondTryVbng..VSR_base_hot..module-0:\n      type: com.att.d2.groups.VfModule\n      metadata: {vfModuleModelName: SecondTryVbng..VSR_base_hot..module-0, vfModuleModelInvariantUUID: b73fcd7d-f374-4e7e-a905-f5e58eb8a34a,\n        vfModuleModelUUID: 3b3ff306-b493-4b3d-bb3d-baa13c2d82c7, vfModuleModelVersion: \'1\',\n        vfModuleModelCustomizationUUID: d106e920-0188-48b7-9f90-ae7c1ab43b73}\n      properties: {min_vf_module_instances: 1, vf_module_label: VSR_base_hot, max_vf_module_instances: 1,\n        vf_module_type: Base, vf_module_description: null, volume_group: false, initial_count: 1}\n  substitution_mappings:\n    node_type: com.att.d2.service.Vbng0202\n    capabilities:\n      Second try_vbng 1.attachment_iom_ctrl_fabric_0_port:\n        type: tosca.capabilities.Attachment\n        occurrences: [0, UNBOUNDED]\n      Second try_vbng 1.os_CPM:\n        type: tosca.capabilities.OperatingSystem\n        occurrences: [1, UNBOUNDED]\n        properties:\n          distribution: {type: string, required: false}\n          type: {type: string, required: false}\n          version: {type: version, required: false}\n          architecture: {type: string, required: false}\n      Second try_vbng 1.scalable_CPM:\n        type: tosca.capabilities.Scalable\n        occurrences: [1, UNBOUNDED]\n        properties:\n          max_instances: {type: integer, default: 1, required: false}\n          min_instances: {type: integer, default: 1, required: false}\n          default_instances: {type: integer, required: false}\n      Second try_vbng 1.binding_iom_data_0_port:\n        type: tosca.capabilities.network.Bindable\n        occurrences: [0, UNBOUNDED]\n        valid_source_types: [com.att.d2.resource.cp.nodes.heat.network.contrailV2.VLANSubInterface]\n      Second try_vbng 1.attachment_iom_mgt_0_port:\n        type: tosca.capabilities.Attachment\n        occurrences: [0, UNBOUNDED]\n      Second try_vbng 1.binding_cpm_ctrl_fabric_0_port:\n        type: tosca.capabilities.network.Bindable\n        occurrences: [0, UNBOUNDED]\n        valid_source_types: [com.att.d2.resource.cp.nodes.heat.network.contrailV2.VLANSubInterface]\n      Second try_vbng 1.scalable_IOM:\n        type: tosca.capabilities.Scalable\n        occurrences: [1, UNBOUNDED]\n        properties:\n          max_instances: {type: integer, default: 1, required: false}\n          min_instances: {type: integer, default: 1, required: false}\n          default_instances: {type: integer, required: false}\n      Second try_vbng 1.attachment_iom_data_0_port:\n        type: tosca.capabilities.Attachment\n        occurrences: [0, UNBOUNDED]\n      Second try_vbng 1.host_CPM:\n        type: tosca.capabilities.Container\n        occurrences: [1, UNBOUNDED]\n        valid_source_types: [tosca.nodes.SoftwareComponent]\n        properties:\n          num_cpus: {type: integer, required: false}\n          disk_size: {type: scalar-unit.size, required: false}\n          cpu_frequency: {type: scalar-unit.frequency, required: false}\n          mem_size: {type: scalar-unit.size, required: false}\n      Second try_vbng 1.attachment_cpm_mgt_0_port:\n        type: tosca.capabilities.Attachment\n        occurrences: [0, UNBOUNDED]\n      Second try_vbng 1.binding_iom_data_1_port:\n        type: tosca.capabilities.network.Bindable\n        occurrences: [0, UNBOUNDED]\n        valid_source_types: [com.att.d2.resource.cp.nodes.heat.network.contrailV2.VLANSubInterface]\n      Second try_vbng 1.attachment_iom_data_3_port:\n        type: tosca.capabilities.Attachment\n        occurrences: [0, UNBOUNDED]\n      Second try_vbng 1.binding_iom_mgt_0_port:\n        type: tosca.capabilities.network.Bindable\n        occurrences: [0, UNBOUNDED]\n        valid_source_types: [com.att.d2.resource.cp.nodes.heat.network.contrailV2.VLANSubInterface]\n      Second try_vbng 1.attachment_iom_data_2_port:\n        type: tosca.capabilities.Attachment\n        occurrences: [0, UNBOUNDED]\n      Second try_vbng 1.binding_iom_data_2_port:\n        type: tosca.capabilities.network.Bindable\n        occurrences: [0, UNBOUNDED]\n        valid_source_types: [com.att.d2.resource.cp.nodes.heat.network.contrailV2.VLANSubInterface]\n      Second try_vbng 1.endpoint_CPM:\n        type: tosca.capabilities.Endpoint.Admin\n        occurrences: [1, UNBOUNDED]\n        properties:\n          port_name: {type: string, required: false}\n          protocol: {type: string, default: tcp, required: false}\n          port: {type: PortDef, required: false}\n          initiator: {type: string, default: source, required: false}\n          network_name: {type: string, default: PRIVATE, required: false}\n          secure: {type: boolean, default: true, required: false}\n          ports:\n            type: map\n            required: false\n            entry_schema: {type: PortSpec}\n          url_path: {type: string, required: false}\n      Second try_vbng 1.binding_cpm_mgt_0_port:\n        type: tosca.capabilities.network.Bindable\n        occurrences: [0, UNBOUNDED]\n        valid_source_types: [com.att.d2.resource.cp.nodes.heat.network.contrailV2.VLANSubInterface]\n      Second try_vbng 1.feature:\n        type: tosca.capabilities.Node\n        occurrences: [1, UNBOUNDED]\n      Second try_vbng 1.binding_IOM:\n        type: tosca.capabilities.network.Bindable\n        occurrences: [1, UNBOUNDED]\n      Second try_vbng 1.attachment_cpm_ctrl_fabric_0_port:\n        type: tosca.capabilities.Attachment\n        occurrences: [0, UNBOUNDED]\n      Second try_vbng 1.binding_iom_ctrl_fabric_0_port:\n        type: tosca.capabilities.network.Bindable\n        occurrences: [0, UNBOUNDED]\n        valid_source_types: [com.att.d2.resource.cp.nodes.heat.network.contrailV2.VLANSubInterface]\n      Second try_vbng 1.binding_iom_data_3_port:\n        type: tosca.capabilities.network.Bindable\n        occurrences: [0, UNBOUNDED]\n        valid_source_types: [com.att.d2.resource.cp.nodes.heat.network.contrailV2.VLANSubInterface]\n      Second try_vbng 1.binding_CPM:\n        type: tosca.capabilities.network.Bindable\n        occurrences: [1, UNBOUNDED]\n      Second try_vbng 1.attachment_iom_data_1_port:\n        type: tosca.capabilities.Attachment\n        occurrences: [0, UNBOUNDED]\n      Second try_vbng 1.host_IOM:\n        type: tosca.capabilities.Container\n        occurrences: [1, UNBOUNDED]\n        valid_source_types: [tosca.nodes.SoftwareComponent]\n        properties:\n          num_cpus: {type: integer, required: false}\n          disk_size: {type: scalar-unit.size, required: false}\n          cpu_frequency: {type: scalar-unit.frequency, required: false}\n          mem_size: {type: scalar-unit.size, required: false}\n      Second try_vbng 1.os_IOM:\n        type: tosca.capabilities.OperatingSystem\n        occurrences: [1, UNBOUNDED]\n        properties:\n          distribution: {type: string, required: false}\n          type: {type: string, required: false}\n          version: {type: version, required: false}\n          architecture: {type: string, required: false}\n      Second try_vbng 1.endpoint_IOM:\n        type: tosca.capabilities.Endpoint.Admin\n        occurrences: [1, UNBOUNDED]\n        properties:\n          port_name: {type: string, required: false}\n          protocol: {type: string, default: tcp, required: false}\n          port: {type: PortDef, required: false}\n          initiator: {type: string, default: source, required: false}\n          network_name: {type: string, default: PRIVATE, required: false}\n          secure: {type: boolean, default: true, required: false}\n          ports:\n            type: map\n            required: false\n            entry_schema: {type: PortSpec}\n          url_path: {type: string, required: false}\n    requirements:\n      Second try_vbng 1.local_storage_IOM:\n        occurrences: [0, UNBOUNDED]\n        capability: tosca.capabilities.Attachment\n        node: tosca.nodes.BlockStorage\n        relationship: tosca.relationships.AttachesTo\n      Second try_vbng 1.link_iom_ctrl_fabric_0_port:\n        occurrences: [1, 1]\n        capability: tosca.capabilities.network.Linkable\n        node: tosca.nodes.Root\n        relationship: tosca.relationships.network.LinksTo\n      Second try_vbng 1.link_cpm_ctrl_fabric_0_port:\n        occurrences: [1, 1]\n        capability: tosca.capabilities.network.Linkable\n        node: tosca.nodes.Root\n        relationship: tosca.relationships.network.LinksTo\n      Second try_vbng 1.link_cpm_mgt_0_port:\n        occurrences: [1, 1]\n        capability: tosca.capabilities.network.Linkable\n        node: tosca.nodes.Root\n        relationship: tosca.relationships.network.LinksTo\n      Second try_vbng 1.link_iom_data_3_port:\n        occurrences: [1, 1]\n        capability: tosca.capabilities.network.Linkable\n        node: tosca.nodes.Root\n        relationship: tosca.relationships.network.LinksTo\n      Second try_vbng 1.local_storage_CPM:\n        occurrences: [0, UNBOUNDED]\n        capability: tosca.capabilities.Attachment\n        node: tosca.nodes.BlockStorage\n        relationship: tosca.relationships.AttachesTo\n      Second try_vbng 1.dependency:\n        occurrences: [0, UNBOUNDED]\n        capability: tosca.capabilities.Node\n        node: tosca.nodes.Root\n        relationship: tosca.relationships.DependsOn\n      Second try_vbng 1.link_iom_data_2_port:\n        occurrences: [1, 1]\n        capability: tosca.capabilities.network.Linkable\n        node: tosca.nodes.Root\n        relationship: tosca.relationships.network.LinksTo\n      Second try_vbng 1.link_iom_data_0_port:\n        occurrences: [1, 1]\n        capability: tosca.capabilities.network.Linkable\n        node: tosca.nodes.Root\n        relationship: tosca.relationships.network.LinksTo\n      Second try_vbng 1.link_iom_mgt_0_port:\n        occurrences: [1, 1]\n        capability: tosca.capabilities.network.Linkable\n        node: tosca.nodes.Root\n        relationship: tosca.relationships.network.LinksTo\n      Second try_vbng 1.port:\n        occurrences: [0, UNBOUNDED]\n        capability: tosca.capabilities.Attachment\n        node: com.att.d2.resource.cp.nodes.heat.network.neutron.Port\n        relationship: com.att.d2.relationships.AttachesTo\n      Second try_vbng 1.link_iom_data_1_port:\n        occurrences: [1, 1]\n        capability: tosca.capabilities.network.Linkable\n        node: tosca.nodes.Root\n        relationship: tosca.relationships.network.LinksTo\ntosca_definitions_version: tosca_simple_yaml_1_0\n','dbf9288d-18ef-4d28-82cb-29373028f367',NULL,'vBNG_0202','Virtual','Service','Network L1-3','N','Vbng0202','service-Vbng0202-template.yml',NULL), ('0a92fd9c-baab-4c03-b4e2-827e2cb9bcc7','!!com.att.sdnctl.uebclient.SdncNetworkServiceModel\ndescription: null\nimports:\n- BK-012317-UUID-VSP: {file: resource-Bk012317UuidVsp-template.yml}\nmetadata: {invariantUUID: 083b57cd-4b76-4924-a64c-610445528063, UUID: 0a92fd9c-baab-4c03-b4e2-827e2cb9bcc7,\n  name: BK-012317-UUID-Service, description: BK-012317-UUID-Service, type: Service,\n  category: Network L1-3, serviceEcompNaming: false, serviceHoming: false}\ntopology_template:\n  inputs:\n    bk012317uuidvsp1_oam_protected_net_id: {type: string, description: OAM network id}\n    bk012317uuidvsp1_ppd_name_0: {type: string, description: name of the PCRF PD instance}\n  node_templates:\n    BK-012317-UUID-VSP 1:\n      type: com.att.d2.resource.vf.Bk012317UuidVsp\n      metadata: {invariantUUID: daeccf0e-d5f0-4b95-98db-0ae23b890d1a, UUID: bd533689-28e0-4601-81d2-545a424a665e,\n        customizationUUID: 14a2c39f-e261-4453-8d09-28f1e006dc91, version: \'1.0\', name: BK-012317-UUID-VSP,\n        description: BK-012317-UUID-VSP, type: VF, category: Network L2-3, subcategory: Gateway}\n      properties:\n        ppd_name_0: {get_input: bk012317uuidvsp1_ppd_name_0}\n        oam_protected_net_id: {get_input: bk012317uuidvsp1_oam_protected_net_id}\n  groups:\n    bk012317uuidvsp1..Bk012317UuidVsp..pcrf_nimbus_oam..module-5:\n      type: com.att.d2.groups.VfModule\n      metadata: {vfModuleModelName: Bk012317UuidVsp..pcrf_nimbus_oam..module-5, vfModuleModelInvariantUUID: 96cf1eea-8bea-40f1-8daf-29b4d9e24139,\n        vfModuleModelUUID: 9dd06cea-7cef-4b3d-ba2d-4e84336a5654, vfModuleModelVersion: \'1\',\n        vfModuleModelCustomizationUUID: fd3104b5-c3bf-4080-81dd-78944dc8a263}\n      properties: {min_vf_module_instances: 0, vf_module_label: pcrf_nimbus_oam, max_vf_module_instances: null,\n        vf_module_type: Expansion, vf_module_description: null, volume_group: true,\n        initial_count: 0}\n    bk012317uuidvsp1..Bk012317UuidVsp..pcrf_base_template_v3_0..module-0:\n      type: com.att.d2.groups.VfModule\n      metadata: {vfModuleModelName: Bk012317UuidVsp..pcrf_base_template_v3_0..module-0,\n        vfModuleModelInvariantUUID: 85f5f4e4-b5e0-4ece-a3aa-bc5c68287700, vfModuleModelUUID: fa4033e7-9c3f-4140-a374-e80a742f6b2f,\n        vfModuleModelVersion: \'1\', vfModuleModelCustomizationUUID: 430443ea-78a2-43f5-8aae-967857ea4466}\n      properties: {min_vf_module_instances: 1, vf_module_label: pcrf_base_template_v3_0,\n        max_vf_module_instances: 1, vf_module_type: Base, vf_module_description: null,\n        volume_group: false, initial_count: 1}\n    bk012317uuidvsp1..Bk012317UuidVsp..pcrf_nimbus_pcm..module-4:\n      type: com.att.d2.groups.VfModule\n      metadata: {vfModuleModelName: Bk012317UuidVsp..pcrf_nimbus_pcm..module-4, vfModuleModelInvariantUUID: d47db54d-8146-4e24-bc88-5ca62ceda22f,\n        vfModuleModelUUID: 3fcb381a-860b-43e0-84e7-00774f43a5d8, vfModuleModelVersion: \'1\',\n        vfModuleModelCustomizationUUID: 2a1d55c3-df91-4a3c-afea-683a69fd4d8a}\n      properties: {min_vf_module_instances: 0, vf_module_label: pcrf_nimbus_pcm, max_vf_module_instances: null,\n        vf_module_type: Expansion, vf_module_description: null, initial_count: 0,\n        volume_group: true}\n    bk012317uuidvsp1..Bk012317UuidVsp..pcrf_nimbus_ppd..module-3:\n      type: com.att.d2.groups.VfModule\n      metadata: {vfModuleModelName: Bk012317UuidVsp..pcrf_nimbus_ppd..module-3, vfModuleModelInvariantUUID: 72e9eff2-d1c7-4dcb-8ffc-43afedb65e53,\n        vfModuleModelUUID: b509d8dc-7cb0-4139-ab85-5d764cd17bb5, vfModuleModelVersion: \'1\',\n        vfModuleModelCustomizationUUID: 9f14ae6b-b156-4b33-ad23-77aa3d9d38ac}\n      properties: {min_vf_module_instances: 0, vf_module_label: pcrf_nimbus_ppd, max_vf_module_instances: null,\n        vf_module_type: Expansion, vf_module_description: null, initial_count: 0,\n        volume_group: false}\n    bk012317uuidvsp1..Bk012317UuidVsp..pcrf_nimbus_psm..module-1:\n      type: com.att.d2.groups.VfModule\n      metadata: {vfModuleModelName: Bk012317UuidVsp..pcrf_nimbus_psm..module-1, vfModuleModelInvariantUUID: 07abb9e0-0714-4b9c-b269-b52a405ab4b3,\n        vfModuleModelUUID: 2b66c94f-3de3-45be-ad65-109d3c016bb0, vfModuleModelVersion: \'1\',\n        vfModuleModelCustomizationUUID: 357384b3-9085-42a1-b3ba-ec9baf9a9de1}\n      properties: {min_vf_module_instances: 0, vf_module_label: pcrf_nimbus_psm, max_vf_module_instances: null,\n        vf_module_type: Expansion, vf_module_description: null, volume_group: false,\n        initial_count: 0}\n    bk012317uuidvsp1..Bk012317UuidVsp..pcrf_nimbus_pps..module-2:\n      type: com.att.d2.groups.VfModule\n      metadata: {vfModuleModelName: Bk012317UuidVsp..pcrf_nimbus_pps..module-2, vfModuleModelInvariantUUID: 1d7dbc30-ac35-4120-b5ea-a4fe5b570de3,\n        vfModuleModelUUID: 18e1160f-f917-446e-954c-3ed3e8d5b13d, vfModuleModelVersion: \'1\',\n        vfModuleModelCustomizationUUID: f37780a8-e662-4b17-a0e9-ba798667be00}\n      properties: {min_vf_module_instances: 0, vf_module_label: pcrf_nimbus_pps, max_vf_module_instances: null,\n        vf_module_type: Expansion, vf_module_description: null, volume_group: false,\n        initial_count: 0}\n  substitution_mappings:\n    node_type: com.att.d2.service.Bk012317UuidService\n    capabilities:\n      BK-012317-UUID-VSP 1.disk.read.bytes.rate:\n        type: com.att.d2.capabilities.metric.Ceilometer\n        description: A node type that includes the Metric capability indicates that it can be monitored using ceilometer.\n        occurrences: [1, UNBOUNDED]\n        properties:\n          initiator: {type: string, default: source, required: false}\n          network_name: {type: string, default: PRIVATE, required: false}\n          description: {type: string, default: Average rate of reads, description: Description of the metric,\n            required: false}\n          type: {type: string, default: Gauge, description: \'Type of the metric value,\n              for an example, Cumulative, Delta, Gauge and etc.\', required: true}\n          secure: {type: boolean, default: false, required: false}\n          ports:\n            type: map\n            required: false\n            entry_schema: {type: PortSpec}\n          port_name: {type: string, required: false}\n          unit: {type: string, default: B/s, description: Unit of the metric value,\n            required: true}\n          protocol: {type: string, default: tcp, required: false}\n          port: {type: PortDef, required: false}\n          name: {type: string, default: disk.read.bytes.rate, description: Ceilometer metric type name to monitor. (The name ceilometer is using),\n            required: true}\n          category: {type: string, default: compute, description: \'Category of the\n              metric, for an example, compute, disk, network, storage and etc.\', required: false}\n          url_path: {type: string, required: false}\n      BK-012317-UUID-VSP 1.disk.latency:\n        type: com.att.d2.capabilities.metric.Ceilometer\n        description: A node type that includes the Metric capability indicates that it can be monitored using ceilometer.\n        occurrences: [1, UNBOUNDED]\n        properties:\n          initiator: {type: string, default: source, required: false}\n          network_name: {type: string, default: PRIVATE, required: false}\n          description: {type: string, default: Average disk latency, description: Description of the metric,\n            required: false}\n          type: {type: string, default: Gauge, description: \'Type of the metric value,\n              for an example, Cumulative, Delta, Gauge and etc.\', required: true}\n          secure: {type: boolean, default: false, required: false}\n          ports:\n            type: map\n            required: false\n            entry_schema: {type: PortSpec}\n          port_name: {type: string, required: false}\n          unit: {type: string, default: ms, description: Unit of the metric value,\n            required: true}\n          protocol: {type: string, default: tcp, required: false}\n          port: {type: PortDef, required: false}\n          name: {type: string, default: disk.latency, description: Ceilometer metric type name to monitor. (The name ceilometer is using),\n            required: true}\n          category: {type: string, default: disk, description: \'Category of the metric,\n              for an example, compute, disk, network, storage and etc.\', required: false}\n          url_path: {type: string, required: false}\n      BK-012317-UUID-VSP 1.vcpus:\n        type: com.att.d2.capabilities.metric.Ceilometer\n        description: A node type that includes the Metric capability indicates that it can be monitored using ceilometer.\n        occurrences: [1, UNBOUNDED]\n        properties:\n          initiator: {type: string, default: source, required: false}\n          network_name: {type: string, default: PRIVATE, required: false}\n          description: {type: string, default: Number of virtual CPUs allocated to the instance,\n            description: Description of the metric, required: false}\n          type: {type: string, default: Gauge, description: \'Type of the metric value,\n              for an example, Cumulative, Delta, Gauge and etc.\', required: true}\n          secure: {type: boolean, default: false, required: false}\n          ports:\n            type: map\n            required: false\n            entry_schema: {type: PortSpec}\n          port_name: {type: string, required: false}\n          unit: {type: string, default: vcpu, description: Unit of the metric value,\n            required: true}\n          protocol: {type: string, default: tcp, required: false}\n          port: {type: PortDef, required: false}\n          name: {type: string, default: vcpus, description: Ceilometer metric type name to monitor. (The name ceilometer is using),\n            required: true}\n          category: {type: string, default: compute, description: \'Category of the\n              metric, for an example, compute, disk, network, storage and etc.\', required: false}\n          url_path: {type: string, required: false}\n      BK-012317-UUID-VSP 1.scalable:\n        type: tosca.capabilities.Scalable\n        occurrences: [1, UNBOUNDED]\n        properties:\n          max_instances: {type: integer, default: 1, required: false}\n          min_instances: {type: integer, default: 1, required: false}\n          default_instances: {type: integer, required: false}\n      BK-012317-UUID-VSP 1.instance:\n        type: com.att.d2.capabilities.metric.Ceilometer\n        description: A node type that includes the Metric capability indicates that it can be monitored using ceilometer.\n        occurrences: [1, UNBOUNDED]\n        properties:\n          initiator: {type: string, default: source, required: false}\n          network_name: {type: string, default: PRIVATE, required: false}\n          description: {type: string, default: Existence of instance, description: Description of the metric,\n            required: false}\n          type: {type: string, default: Gauge, description: \'Type of the metric value,\n              for an example, Cumulative, Delta, Gauge and etc.\', required: true}\n          secure: {type: boolean, default: false, required: false}\n          ports:\n            type: map\n            required: false\n            entry_schema: {type: PortSpec}\n          port_name: {type: string, required: false}\n          unit: {type: string, default: instance, description: Unit of the metric value,\n            required: true}\n          protocol: {type: string, default: tcp, required: false}\n          port: {type: PortDef, required: false}\n          name: {type: string, default: instance, description: Ceilometer metric type name to monitor. (The name ceilometer is using),\n            required: true}\n          category: {type: string, default: compute, description: \'Category of the\n              metric, for an example, compute, disk, network, storage and etc.\', required: false}\n          url_path: {type: string, required: false}\n      BK-012317-UUID-VSP 1.memory:\n        type: com.att.d2.capabilities.metric.Ceilometer\n        description: A node type that includes the Metric capability indicates that it can be monitored using ceilometer.\n        occurrences: [1, UNBOUNDED]\n        properties:\n          initiator: {type: string, default: source, required: false}\n          network_name: {type: string, default: PRIVATE, required: false}\n          description: {type: string, default: Volume of RAM allocated to the instance,\n            description: Description of the metric, required: false}\n          type: {type: string, default: Gauge, description: \'Type of the metric value,\n              for an example, Cumulative, Delta, Gauge and etc.\', required: true}\n          secure: {type: boolean, default: false, required: false}\n          ports:\n            type: map\n            required: false\n            entry_schema: {type: PortSpec}\n          port_name: {type: string, required: false}\n          unit: {type: string, default: MB, description: Unit of the metric value,\n            required: true}\n          protocol: {type: string, default: tcp, required: false}\n          port: {type: PortDef, required: false}\n          name: {type: string, default: memory, description: Ceilometer metric type name to monitor. (The name ceilometer is using),\n            required: true}\n          category: {type: string, default: compute, description: \'Category of the\n              metric, for an example, compute, disk, network, storage and etc.\', required: false}\n          url_path: {type: string, required: false}\n      BK-012317-UUID-VSP 1.disk.write.requests.rate:\n        type: com.att.d2.capabilities.metric.Ceilometer\n        description: A node type that includes the Metric capability indicates that it can be monitored using ceilometer.\n        occurrences: [1, UNBOUNDED]\n        properties:\n          initiator: {type: string, default: source, required: false}\n          network_name: {type: string, default: PRIVATE, required: false}\n          description: {type: string, default: Average rate of write requests, description: Description of the metric,\n            required: false}\n          type: {type: string, default: Gauge, description: \'Type of the metric value,\n              for an example, Cumulative, Delta, Gauge and etc.\', required: true}\n          secure: {type: boolean, default: false, required: false}\n          ports:\n            type: map\n            required: false\n            entry_schema: {type: PortSpec}\n          port_name: {type: string, required: false}\n          unit: {type: string, default: request/s, description: Unit of the metric value,\n            required: true}\n          protocol: {type: string, default: tcp, required: false}\n          port: {type: PortDef, required: false}\n          name: {type: string, default: disk.write.requests.rate, description: Ceilometer metric type name to monitor. (The name ceilometer is using),\n            required: true}\n          category: {type: string, default: compute, description: \'Category of the\n              metric, for an example, compute, disk, network, storage and etc.\', required: false}\n          url_path: {type: string, required: false}\n      BK-012317-UUID-VSP 1.feature:\n        type: tosca.capabilities.Node\n        occurrences: [1, UNBOUNDED]\n      BK-012317-UUID-VSP 1.disk.write.requests:\n        type: com.att.d2.capabilities.metric.Ceilometer\n        description: A node type that includes the Metric capability indicates that it can be monitored using ceilometer.\n        occurrences: [1, UNBOUNDED]\n        properties:\n          initiator: {type: string, default: source, required: false}\n          network_name: {type: string, default: PRIVATE, required: false}\n          description: {type: string, default: Number of write requests, description: Description of the metric,\n            required: false}\n          type: {type: string, default: Cumulative, description: \'Type of the metric\n              value, for an example, Cumulative, Delta, Gauge and etc.\', required: true}\n          secure: {type: boolean, default: false, required: false}\n          ports:\n            type: map\n            required: false\n            entry_schema: {type: PortSpec}\n          port_name: {type: string, required: false}\n          unit: {type: string, default: request, description: Unit of the metric value,\n            required: true}\n          protocol: {type: string, default: tcp, required: false}\n          port: {type: PortDef, required: false}\n          name: {type: string, default: disk.write.requests, description: Ceilometer metric type name to monitor. (The name ceilometer is using),\n            required: true}\n          category: {type: string, default: compute, description: \'Category of the\n              metric, for an example, compute, disk, network, storage and etc.\', required: false}\n          url_path: {type: string, required: false}\n      BK-012317-UUID-VSP 1.disk.device.iops:\n        type: com.att.d2.capabilities.metric.Ceilometer\n        description: A node type that includes the Metric capability indicates that it can be monitored using ceilometer.\n        occurrences: [1, UNBOUNDED]\n        properties:\n          initiator: {type: string, default: source, required: false}\n          network_name: {type: string, default: PRIVATE, required: false}\n          description: {type: string, default: Average disk iops per device, description: Description of the metric,\n            required: false}\n          type: {type: string, default: Gauge, description: \'Type of the metric value,\n              for an example, Cumulative, Delta, Gauge and etc.\', required: true}\n          secure: {type: boolean, default: false, required: false}\n          ports:\n            type: map\n            required: false\n            entry_schema: {type: PortSpec}\n          port_name: {type: string, required: false}\n          unit: {type: string, default: count/s, description: Unit of the metric value,\n            required: true}\n          protocol: {type: string, default: tcp, required: false}\n          port: {type: PortDef, required: false}\n          name: {type: string, default: disk.device.iops, description: Ceilometer metric type name to monitor. (The name ceilometer is using),\n            required: true}\n          category: {type: string, default: disk, description: \'Category of the metric,\n              for an example, compute, disk, network, storage and etc.\', required: false}\n          url_path: {type: string, required: false}\n      BK-012317-UUID-VSP 1.disk.device.latency:\n        type: com.att.d2.capabilities.metric.Ceilometer\n        description: A node type that includes the Metric capability indicates that it can be monitored using ceilometer.\n        occurrences: [1, UNBOUNDED]\n        properties:\n          initiator: {type: string, default: source, required: false}\n          network_name: {type: string, default: PRIVATE, required: false}\n          description: {type: string, default: Average disk latency per device, description: Description of the metric,\n            required: false}\n          type: {type: string, default: Gauge, description: \'Type of the metric value,\n              for an example, Cumulative, Delta, Gauge and etc.\', required: true}\n          secure: {type: boolean, default: false, required: false}\n          ports:\n            type: map\n            required: false\n            entry_schema: {type: PortSpec}\n          port_name: {type: string, required: false}\n          unit: {type: string, default: ms, description: Unit of the metric value,\n            required: true}\n          protocol: {type: string, default: tcp, required: false}\n          port: {type: PortDef, required: false}\n          name: {type: string, default: disk.device.latency, description: Ceilometer metric type name to monitor. (The name ceilometer is using),\n            required: true}\n          category: {type: string, default: disk, description: \'Category of the metric,\n              for an example, compute, disk, network, storage and etc.\', required: false}\n          url_path: {type: string, required: false}\n      BK-012317-UUID-VSP 1.disk.ephemeral.size:\n        type: com.att.d2.capabilities.metric.Ceilometer\n        description: A node type that includes the Metric capability indicates that it can be monitored using ceilometer.\n        occurrences: [1, UNBOUNDED]\n        properties:\n          initiator: {type: string, default: source, required: false}\n          network_name: {type: string, default: PRIVATE, required: false}\n          description: {type: string, default: Size of ephemeral disk, description: Description of the metric,\n            required: false}\n          type: {type: string, default: Gauge, description: \'Type of the metric value,\n              for an example, Cumulative, Delta, Gauge and etc.\', required: true}\n          secure: {type: boolean, default: false, required: false}\n          ports:\n            type: map\n            required: false\n            entry_schema: {type: PortSpec}\n          port_name: {type: string, required: false}\n          unit: {type: string, default: GB, description: Unit of the metric value,\n            required: true}\n          protocol: {type: string, default: tcp, required: false}\n          port: {type: PortDef, required: false}\n          name: {type: string, default: disk.ephemeral.size, description: Ceilometer metric type name to monitor. (The name ceilometer is using),\n            required: true}\n          category: {type: string, default: compute, description: \'Category of the\n              metric, for an example, compute, disk, network, storage and etc.\', required: false}\n          url_path: {type: string, required: false}\n      BK-012317-UUID-VSP 1.disk.device.usage:\n        type: com.att.d2.capabilities.metric.Ceilometer\n        description: A node type that includes the Metric capability indicates that it can be monitored using ceilometer.\n        occurrences: [1, UNBOUNDED]\n        properties:\n          initiator: {type: string, default: source, required: false}\n          network_name: {type: string, default: PRIVATE, required: false}\n          description: {type: string, default: The physical size in bytes of the image container on the host per device,\n            description: Description of the metric, required: false}\n          type: {type: string, default: Gauge, description: \'Type of the metric value,\n              for an example, Cumulative, Delta, Gauge and etc.\', required: true}\n          secure: {type: boolean, default: false, required: false}\n          ports:\n            type: map\n            required: false\n            entry_schema: {type: PortSpec}\n          port_name: {type: string, required: false}\n          unit: {type: string, default: B, description: Unit of the metric value,\n            required: true}\n          protocol: {type: string, default: tcp, required: false}\n          port: {type: PortDef, required: false}\n          name: {type: string, default: disk.device.usage, description: Ceilometer metric type name to monitor. (The name ceilometer is using),\n            required: true}\n          category: {type: string, default: disk, description: \'Category of the metric,\n              for an example, compute, disk, network, storage and etc.\', required: false}\n          url_path: {type: string, required: false}\n      BK-012317-UUID-VSP 1.disk.write.bytes:\n        type: com.att.d2.capabilities.metric.Ceilometer\n        description: A node type that includes the Metric capability indicates that it can be monitored using ceilometer.\n        occurrences: [1, UNBOUNDED]\n        properties:\n          initiator: {type: string, default: source, required: false}\n          network_name: {type: string, default: PRIVATE, required: false}\n          description: {type: string, default: Volume of writes, description: Description of the metric,\n            required: false}\n          type: {type: string, default: Cumulative, description: \'Type of the metric\n              value, for an example, Cumulative, Delta, Gauge and etc.\', required: true}\n          secure: {type: boolean, default: false, required: false}\n          ports:\n            type: map\n            required: false\n            entry_schema: {type: PortSpec}\n          port_name: {type: string, required: false}\n          unit: {type: string, default: B, description: Unit of the metric value,\n            required: true}\n          protocol: {type: string, default: tcp, required: false}\n          port: {type: PortDef, required: false}\n          name: {type: string, default: disk.write.bytes, description: Ceilometer metric type name to monitor. (The name ceilometer is using),\n            required: true}\n          category: {type: string, default: compute, description: \'Category of the\n              metric, for an example, compute, disk, network, storage and etc.\', required: false}\n          url_path: {type: string, required: false}\n      BK-012317-UUID-VSP 1.host:\n        type: tosca.capabilities.Container\n        occurrences: [1, UNBOUNDED]\n        valid_source_types: [tosca.nodes.SoftwareComponent]\n        properties:\n          num_cpus: {type: integer, required: false}\n          disk_size: {type: scalar-unit.size, required: false}\n          cpu_frequency: {type: scalar-unit.frequency, required: false}\n          mem_size: {type: scalar-unit.size, required: false}\n      BK-012317-UUID-VSP 1.disk.allocation:\n        type: com.att.d2.capabilities.metric.Ceilometer\n        description: A node type that includes the Metric capability indicates that it can be monitored using ceilometer.\n        occurrences: [1, UNBOUNDED]\n        properties:\n          initiator: {type: string, default: source, required: false}\n          network_name: {type: string, default: PRIVATE, required: false}\n          description: {type: string, default: The amount of disk occupied by the instance on the host machine,\n            description: Description of the metric, required: false}\n          type: {type: string, default: Gauge, description: \'Type of the metric value,\n              for an example, Cumulative, Delta, Gauge and etc.\', required: true}\n          secure: {type: boolean, default: false, required: false}\n          ports:\n            type: map\n            required: false\n            entry_schema: {type: PortSpec}\n          port_name: {type: string, required: false}\n          unit: {type: string, default: B, description: Unit of the metric value,\n            required: true}\n          protocol: {type: string, default: tcp, required: false}\n          port: {type: PortDef, required: false}\n          name: {type: string, default: disk.allocation, description: Ceilometer metric type name to monitor. (The name ceilometer is using),\n            required: true}\n          category: {type: string, default: disk, description: \'Category of the metric,\n              for an example, compute, disk, network, storage and etc.\', required: false}\n          url_path: {type: string, required: false}\n      BK-012317-UUID-VSP 1.network.incoming.packets.rate:\n        type: com.att.d2.capabilities.metric.Ceilometer\n        description: A node type that includes the Metric capability indicates that it can be monitored using ceilometer.\n        occurrences: [1, UNBOUNDED]\n        properties:\n          initiator: {type: string, default: source, required: false}\n          network_name: {type: string, default: PRIVATE, required: false}\n          description: {type: string, default: Average rate of incoming packets, description: Description of the metric,\n            required: false}\n          type: {type: string, default: Gauge, description: \'Type of the metric value,\n              for an example, Cumulative, Delta, Gauge and etc.\', required: true}\n          secure: {type: boolean, default: false, required: false}\n          ports:\n            type: map\n            required: false\n            entry_schema: {type: PortSpec}\n          port_name: {type: string, required: false}\n          unit: {type: string, default: packet/s, description: Unit of the metric value,\n            required: true}\n          protocol: {type: string, default: tcp, required: false}\n          port: {type: PortDef, required: false}\n          name: {type: string, default: network.incoming.packets.rate, description: Ceilometer metric type name to monitor. (The name ceilometer is using),\n            required: true}\n          category: {type: string, default: network, description: \'Category of the\n              metric, for an example, compute, disk, network, storage and etc.\', required: false}\n          url_path: {type: string, required: false}\n      BK-012317-UUID-VSP 1.network.outgoing.packets.rate:\n        type: com.att.d2.capabilities.metric.Ceilometer\n        description: A node type that includes the Metric capability indicates that it can be monitored using ceilometer.\n        occurrences: [1, UNBOUNDED]\n        properties:\n          initiator: {type: string, default: source, required: false}\n          network_name: {type: string, default: PRIVATE, required: false}\n          description: {type: string, default: Average rate of outgoing packets, description: Description of the metric,\n            required: false}\n          type: {type: string, default: Gauge, description: \'Type of the metric value,\n              for an example, Cumulative, Delta, Gauge and etc.\', required: true}\n          secure: {type: boolean, default: false, required: false}\n          ports:\n            type: map\n            required: false\n            entry_schema: {type: PortSpec}\n          port_name: {type: string, required: false}\n          unit: {type: string, default: packet/s, description: Unit of the metric value,\n            required: true}\n          protocol: {type: string, default: tcp, required: false}\n          port: {type: PortDef, required: false}\n          name: {type: string, default: network.outgoing.packets.rate, description: Ceilometer metric type name to monitor. (The name ceilometer is using),\n            required: true}\n          category: {type: string, default: network, description: \'Category of the\n              metric, for an example, compute, disk, network, storage and etc.\', required: false}\n          url_path: {type: string, required: false}\n      BK-012317-UUID-VSP 1.disk.device.capacity:\n        type: com.att.d2.capabilities.metric.Ceilometer\n        description: A node type that includes the Metric capability indicates that it can be monitored using ceilometer.\n        occurrences: [1, UNBOUNDED]\n        properties:\n          initiator: {type: string, default: source, required: false}\n          network_name: {type: string, default: PRIVATE, required: false}\n          description: {type: string, default: The amount of disk per device that the instance can see,\n            description: Description of the metric, required: false}\n          type: {type: string, default: Gauge, description: \'Type of the metric value,\n              for an example, Cumulative, Delta, Gauge and etc.\', required: true}\n          secure: {type: boolean, default: false, required: false}\n          ports:\n            type: map\n            required: false\n            entry_schema: {type: PortSpec}\n          port_name: {type: string, required: false}\n          unit: {type: string, default: B, description: Unit of the metric value,\n            required: true}\n          protocol: {type: string, default: tcp, required: false}\n          port: {type: PortDef, required: false}\n          name: {type: string, default: disk.device.capacity, description: Ceilometer metric type name to monitor. (The name ceilometer is using),\n            required: true}\n          category: {type: string, default: disk, description: \'Category of the metric,\n              for an example, compute, disk, network, storage and etc.\', required: false}\n          url_path: {type: string, required: false}\n      BK-012317-UUID-VSP 1.attachment:\n        type: tosca.capabilities.Attachment\n        occurrences: [0, UNBOUNDED]\n      BK-012317-UUID-VSP 1.network.outgoing.bytes:\n        type: com.att.d2.capabilities.metric.Ceilometer\n        description: A node type that includes the Metric capability indicates that it can be monitored using ceilometer.\n        occurrences: [1, UNBOUNDED]\n        properties:\n          initiator: {type: string, default: source, required: false}\n          network_name: {type: string, default: PRIVATE, required: false}\n          description: {type: string, default: Number of outgoing bytes, description: Description of the metric,\n            required: false}\n          type: {type: string, default: Cumulative, description: \'Type of the metric\n              value, for an example, Cumulative, Delta, Gauge and etc.\', required: true}\n          secure: {type: boolean, default: false, required: false}\n          ports:\n            type: map\n            required: false\n            entry_schema: {type: PortSpec}\n          port_name: {type: string, required: false}\n          unit: {type: string, default: B, description: Unit of the metric value,\n            required: true}\n          protocol: {type: string, default: tcp, required: false}\n          port: {type: PortDef, required: false}\n          name: {type: string, default: network.outgoing.bytes, description: Ceilometer metric type name to monitor. (The name ceilometer is using),\n            required: true}\n          category: {type: string, default: network, description: \'Category of the\n              metric, for an example, compute, disk, network, storage and etc.\', required: false}\n          url_path: {type: string, required: false}\n      BK-012317-UUID-VSP 1.disk.device.write.requests.rate:\n        type: com.att.d2.capabilities.metric.Ceilometer\n        description: A node type that includes the Metric capability indicates that it can be monitored using ceilometer.\n        occurrences: [1, UNBOUNDED]\n        properties:\n          initiator: {type: string, default: source, required: false}\n          network_name: {type: string, default: PRIVATE, required: false}\n          description: {type: string, default: Average rate of write requests, description: Description of the metric,\n            required: false}\n          type: {type: string, default: Gauge, description: \'Type of the metric value,\n              for an example, Cumulative, Delta, Gauge and etc.\', required: true}\n          secure: {type: boolean, default: false, required: false}\n          ports:\n            type: map\n            required: false\n            entry_schema: {type: PortSpec}\n          port_name: {type: string, required: false}\n          unit: {type: string, default: request/s, description: Unit of the metric value,\n            required: true}\n          protocol: {type: string, default: tcp, required: false}\n          port: {type: PortDef, required: false}\n          name: {type: string, default: disk.device.write.requests.rate, description: Ceilometer metric type name to monitor. (The name ceilometer is using),\n            required: true}\n          category: {type: string, default: disk, description: \'Category of the metric,\n              for an example, compute, disk, network, storage and etc.\', required: false}\n          url_path: {type: string, required: false}\n      BK-012317-UUID-VSP 1.network.incoming.bytes.rate:\n        type: com.att.d2.capabilities.metric.Ceilometer\n        description: A node type that includes the Metric capability indicates that it can be monitored using ceilometer.\n        occurrences: [1, UNBOUNDED]\n        properties:\n          initiator: {type: string, default: source, required: false}\n          network_name: {type: string, default: PRIVATE, required: false}\n          description: {type: string, default: Average rate of incoming bytes, description: Description of the metric,\n            required: false}\n          type: {type: string, default: Gauge, description: \'Type of the metric value,\n              for an example, Cumulative, Delta, Gauge and etc.\', required: true}\n          secure: {type: boolean, default: false, required: false}\n          ports:\n            type: map\n            required: false\n            entry_schema: {type: PortSpec}\n          port_name: {type: string, required: false}\n          unit: {type: string, default: B/s, description: Unit of the metric value,\n            required: true}\n          protocol: {type: string, default: tcp, required: false}\n          port: {type: PortDef, required: false}\n          name: {type: string, default: network.incoming.bytes.rate, description: Ceilometer metric type name to monitor. (The name ceilometer is using),\n            required: true}\n          category: {type: string, default: network, description: \'Category of the\n              metric, for an example, compute, disk, network, storage and etc.\', required: false}\n          url_path: {type: string, required: false}\n      BK-012317-UUID-VSP 1.memory.resident:\n        type: com.att.d2.capabilities.metric.Ceilometer\n        description: A node type that includes the Metric capability indicates that it can be monitored using ceilometer.\n        occurrences: [1, UNBOUNDED]\n        properties:\n          initiator: {type: string, default: source, required: false}\n          network_name: {type: string, default: PRIVATE, required: false}\n          description: {type: string, default: Volume of RAM used by the instance on the physical machine,\n            description: Description of the metric, required: false}\n          type: {type: string, default: Gauge, description: \'Type of the metric value,\n              for an example, Cumulative, Delta, Gauge and etc.\', required: true}\n          secure: {type: boolean, default: false, required: false}\n          ports:\n            type: map\n            required: false\n            entry_schema: {type: PortSpec}\n          port_name: {type: string, required: false}\n          unit: {type: string, default: MB, description: Unit of the metric value,\n            required: true}\n          protocol: {type: string, default: tcp, required: false}\n          port: {type: PortDef, required: false}\n          name: {type: string, default: memory.resident, description: Ceilometer metric type name to monitor. (The name ceilometer is using),\n            required: true}\n          category: {type: string, default: compute, description: \'Category of the\n              metric, for an example, compute, disk, network, storage and etc.\', required: false}\n          url_path: {type: string, required: false}\n      BK-012317-UUID-VSP 1.network.outgoing.bytes.rate:\n        type: com.att.d2.capabilities.metric.Ceilometer\n        description: A node type that includes the Metric capability indicates that it can be monitored using ceilometer.\n        occurrences: [1, UNBOUNDED]\n        properties:\n          initiator: {type: string, default: source, required: false}\n          network_name: {type: string, default: PRIVATE, required: false}\n          description: {type: string, default: Average rate of outgoing bytes, description: Description of the metric,\n            required: false}\n          type: {type: string, default: Gauge, description: \'Type of the metric value,\n              for an example, Cumulative, Delta, Gauge and etc.\', required: true}\n          secure: {type: boolean, default: false, required: false}\n          ports:\n            type: map\n            required: false\n            entry_schema: {type: PortSpec}\n          port_name: {type: string, required: false}\n          unit: {type: string, default: B/s, description: Unit of the metric value,\n            required: true}\n          protocol: {type: string, default: tcp, required: false}\n          port: {type: PortDef, required: false}\n          name: {type: string, default: network.outgoing.bytes.rate, description: Ceilometer metric type name to monitor. (The name ceilometer is using),\n            required: true}\n          category: {type: string, default: network, description: \'Category of the\n              metric, for an example, compute, disk, network, storage and etc.\', required: false}\n          url_path: {type: string, required: false}\n      BK-012317-UUID-VSP 1.disk.device.read.bytes.rate:\n        type: com.att.d2.capabilities.metric.Ceilometer\n        description: A node type that includes the Metric capability indicates that it can be monitored using ceilometer.\n        occurrences: [1, UNBOUNDED]\n        properties:\n          initiator: {type: string, default: source, required: false}\n          network_name: {type: string, default: PRIVATE, required: false}\n          description: {type: string, default: Average rate of reads, description: Description of the metric,\n            required: false}\n          type: {type: string, default: Gauge, description: \'Type of the metric value,\n              for an example, Cumulative, Delta, Gauge and etc.\', required: true}\n          secure: {type: boolean, default: false, required: false}\n          ports:\n            type: map\n            required: false\n            entry_schema: {type: PortSpec}\n          port_name: {type: string, required: false}\n          unit: {type: string, default: B/s, description: Unit of the metric value,\n            required: true}\n          protocol: {type: string, default: tcp, required: false}\n          port: {type: PortDef, required: false}\n          name: {type: string, default: disk.device.read.bytes.rate, description: Ceilometer metric type name to monitor. (The name ceilometer is using),\n            required: true}\n          category: {type: string, default: disk, description: \'Category of the metric,\n              for an example, compute, disk, network, storage and etc.\', required: false}\n          url_path: {type: string, required: false}\n      BK-012317-UUID-VSP 1.cpu:\n        type: com.att.d2.capabilities.metric.Ceilometer\n        description: A node type that includes the Metric capability indicates that it can be monitored using ceilometer.\n        occurrences: [1, UNBOUNDED]\n        properties:\n          initiator: {type: string, default: source, required: false}\n          network_name: {type: string, default: PRIVATE, required: false}\n          description: {type: string, default: CPU time used, description: Description of the metric,\n            required: false}\n          type: {type: string, default: Cumulative, description: \'Type of the metric\n              value, for an example, Cumulative, Delta, Gauge and etc.\', required: true}\n          secure: {type: boolean, default: false, required: false}\n          ports:\n            type: map\n            required: false\n            entry_schema: {type: PortSpec}\n          port_name: {type: string, required: false}\n          unit: {type: string, default: ns, description: Unit of the metric value,\n            required: true}\n          protocol: {type: string, default: tcp, required: false}\n          port: {type: PortDef, required: false}\n          name: {type: string, default: cpu, description: Ceilometer metric type name to monitor. (The name ceilometer is using),\n            required: true}\n          category: {type: string, default: compute, description: \'Category of the\n              metric, for an example, compute, disk, network, storage and etc.\', required: false}\n          url_path: {type: string, required: false}\n      BK-012317-UUID-VSP 1.disk.write.bytes.rate:\n        type: com.att.d2.capabilities.metric.Ceilometer\n        description: A node type that includes the Metric capability indicates that it can be monitored using ceilometer.\n        occurrences: [1, UNBOUNDED]\n        properties:\n          initiator: {type: string, default: source, required: false}\n          network_name: {type: string, default: PRIVATE, required: false}\n          description: {type: string, default: Average rate of writes, description: Description of the metric,\n            required: false}\n          type: {type: string, default: Gauge, description: \'Type of the metric value,\n              for an example, Cumulative, Delta, Gauge and etc.\', required: true}\n          secure: {type: boolean, default: false, required: false}\n          ports:\n            type: map\n            required: false\n            entry_schema: {type: PortSpec}\n          port_name: {type: string, required: false}\n          unit: {type: string, default: B/s, description: Unit of the metric value,\n            required: true}\n          protocol: {type: string, default: tcp, required: false}\n          port: {type: PortDef, required: false}\n          name: {type: string, default: disk.write.bytes.rate, description: Ceilometer metric type name to monitor. (The name ceilometer is using),\n            required: true}\n          category: {type: string, default: compute, description: \'Category of the\n              metric, for an example, compute, disk, network, storage and etc.\', required: false}\n          url_path: {type: string, required: false}\n      BK-012317-UUID-VSP 1.disk.iops:\n        type: com.att.d2.capabilities.metric.Ceilometer\n        description: A node type that includes the Metric capability indicates that it can be monitored using ceilometer.\n        occurrences: [1, UNBOUNDED]\n        properties:\n          initiator: {type: string, default: source, required: false}\n          network_name: {type: string, default: PRIVATE, required: false}\n          description: {type: string, default: Average disk iops, description: Description of the metric,\n            required: false}\n          type: {type: string, default: Gauge, description: \'Type of the metric value,\n              for an example, Cumulative, Delta, Gauge and etc.\', required: true}\n          secure: {type: boolean, default: false, required: false}\n          ports:\n            type: map\n            required: false\n            entry_schema: {type: PortSpec}\n          port_name: {type: string, required: false}\n          unit: {type: string, default: count/s, description: Unit of the metric value,\n            required: true}\n          protocol: {type: string, default: tcp, required: false}\n          port: {type: PortDef, required: false}\n          name: {type: string, default: disk.iops, description: Ceilometer metric type name to monitor. (The name ceilometer is using),\n            required: true}\n          category: {type: string, default: disk, description: \'Category of the metric,\n              for an example, compute, disk, network, storage and etc.\', required: false}\n          url_path: {type: string, required: false}\n      BK-012317-UUID-VSP 1.network.outpoing.packets:\n        type: com.att.d2.capabilities.metric.Ceilometer\n        description: A node type that includes the Metric capability indicates that it can be monitored using ceilometer.\n        occurrences: [1, UNBOUNDED]\n        properties:\n          initiator: {type: string, default: source, required: false}\n          network_name: {type: string, default: PRIVATE, required: false}\n          description: {type: string, default: Number of outgoing packets, description: Description of the metric,\n            required: false}\n          type: {type: string, default: Cumulative, description: \'Type of the metric\n              value, for an example, Cumulative, Delta, Gauge and etc.\', required: true}\n          secure: {type: boolean, default: false, required: false}\n          ports:\n            type: map\n            required: false\n            entry_schema: {type: PortSpec}\n          port_name: {type: string, required: false}\n          unit: {type: string, default: packet, description: Unit of the metric value,\n            required: true}\n          protocol: {type: string, default: tcp, required: false}\n          port: {type: PortDef, required: false}\n          name: {type: string, default: network.outpoing.packets, description: Ceilometer metric type name to monitor. (The name ceilometer is using),\n            required: true}\n          category: {type: string, default: network, description: \'Category of the\n              metric, for an example, compute, disk, network, storage and etc.\', required: false}\n          url_path: {type: string, required: false}\n      BK-012317-UUID-VSP 1.disk.device.write.bytes.rate:\n        type: com.att.d2.capabilities.metric.Ceilometer\n        description: A node type that includes the Metric capability indicates that it can be monitored using ceilometer.\n        occurrences: [1, UNBOUNDED]\n        properties:\n          initiator: {type: string, default: source, required: false}\n          network_name: {type: string, default: PRIVATE, required: false}\n          description: {type: string, default: Average rate of writes, description: Description of the metric,\n            required: false}\n          type: {type: string, default: Gauge, description: \'Type of the metric value,\n              for an example, Cumulative, Delta, Gauge and etc.\', required: true}\n          secure: {type: boolean, default: false, required: false}\n          ports:\n            type: map\n            required: false\n            entry_schema: {type: PortSpec}\n          port_name: {type: string, required: false}\n          unit: {type: string, default: B/s, description: Unit of the metric value,\n            required: true}\n          protocol: {type: string, default: tcp, required: false}\n          port: {type: PortDef, required: false}\n          name: {type: string, default: disk.device.write.bytes.rate, description: Ceilometer metric type name to monitor. (The name ceilometer is using),\n            required: true}\n          category: {type: string, default: disk, description: \'Category of the metric,\n              for an example, compute, disk, network, storage and etc.\', required: false}\n          url_path: {type: string, required: false}\n      BK-012317-UUID-VSP 1.binding:\n        type: tosca.capabilities.network.Bindable\n        occurrences: [0, UNBOUNDED]\n        valid_source_types: [com.att.d2.resource.cp.nodes.heat.network.contrailV2.VLANSubInterface]\n      BK-012317-UUID-VSP 1.cpu_util:\n        type: com.att.d2.capabilities.metric.Ceilometer\n        description: A node type that includes the Metric capability indicates that it can be monitored using ceilometer.\n        occurrences: [1, UNBOUNDED]\n        properties:\n          initiator: {type: string, default: source, required: false}\n          network_name: {type: string, default: PRIVATE, required: false}\n          description: {type: string, default: Average CPU utilization, description: Description of the metric,\n            required: false}\n          type: {type: string, default: Gauge, description: \'Type of the metric value,\n              for an example, Cumulative, Delta, Gauge and etc.\', required: true}\n          secure: {type: boolean, default: false, required: false}\n          ports:\n            type: map\n            required: false\n            entry_schema: {type: PortSpec}\n          port_name: {type: string, required: false}\n          unit: {type: string, default: \'%\', description: Unit of the metric value,\n            required: true}\n          protocol: {type: string, default: tcp, required: false}\n          port: {type: PortDef, required: false}\n          name: {type: string, default: cpu_util, description: Ceilometer metric type name to monitor. (The name ceilometer is using),\n            required: true}\n          category: {type: string, default: compute, description: \'Category of the\n              metric, for an example, compute, disk, network, storage and etc.\', required: false}\n          url_path: {type: string, required: false}\n      BK-012317-UUID-VSP 1.disk.capacity:\n        type: com.att.d2.capabilities.metric.Ceilometer\n        description: A node type that includes the Metric capability indicates that it can be monitored using ceilometer.\n        occurrences: [1, UNBOUNDED]\n        properties:\n          initiator: {type: string, default: source, required: false}\n          network_name: {type: string, default: PRIVATE, required: false}\n          description: {type: string, default: The amount of disk that the instance can see,\n            description: Description of the metric, required: false}\n          type: {type: string, default: Gauge, description: \'Type of the metric value,\n              for an example, Cumulative, Delta, Gauge and etc.\', required: true}\n          secure: {type: boolean, default: false, required: false}\n          ports:\n            type: map\n            required: false\n            entry_schema: {type: PortSpec}\n          port_name: {type: string, required: false}\n          unit: {type: string, default: B, description: Unit of the metric value,\n            required: true}\n          protocol: {type: string, default: tcp, required: false}\n          port: {type: PortDef, required: false}\n          name: {type: string, default: disk.capacity, description: Ceilometer metric type name to monitor. (The name ceilometer is using),\n            required: true}\n          category: {type: string, default: disk, description: \'Category of the metric,\n              for an example, compute, disk, network, storage and etc.\', required: false}\n          url_path: {type: string, required: false}\n      BK-012317-UUID-VSP 1.disk.device.read.requests:\n        type: com.att.d2.capabilities.metric.Ceilometer\n        description: A node type that includes the Metric capability indicates that it can be monitored using ceilometer.\n        occurrences: [1, UNBOUNDED]\n        properties:\n          initiator: {type: string, default: source, required: false}\n          network_name: {type: string, default: PRIVATE, required: false}\n          description: {type: string, default: Number of read requests, description: Description of the metric,\n            required: false}\n          type: {type: string, default: Cumulative, description: \'Type of the metric\n              value, for an example, Cumulative, Delta, Gauge and etc.\', required: true}\n          secure: {type: boolean, default: false, required: false}\n          ports:\n            type: map\n            required: false\n            entry_schema: {type: PortSpec}\n          port_name: {type: string, required: false}\n          unit: {type: string, default: request, description: Unit of the metric value,\n            required: true}\n          protocol: {type: string, default: tcp, required: false}\n          port: {type: PortDef, required: false}\n          name: {type: string, default: disk.device.read.requests, description: Ceilometer metric type name to monitor. (The name ceilometer is using),\n            required: true}\n          category: {type: string, default: disk, description: \'Category of the metric,\n              for an example, compute, disk, network, storage and etc.\', required: false}\n          url_path: {type: string, required: false}\n      BK-012317-UUID-VSP 1.endpoint:\n        type: tosca.capabilities.Endpoint.Admin\n        occurrences: [1, UNBOUNDED]\n        properties:\n          port_name: {type: string, required: false}\n          protocol: {type: string, default: tcp, required: false}\n          port: {type: PortDef, required: false}\n          initiator: {type: string, default: source, required: false}\n          network_name: {type: string, default: PRIVATE, required: false}\n          ports:\n            type: map\n            required: false\n            entry_schema: {type: PortSpec}\n          secure: {type: boolean, default: true, required: false}\n          url_path: {type: string, required: false}\n      BK-012317-UUID-VSP 1.disk.device.read.bytes:\n        type: com.att.d2.capabilities.metric.Ceilometer\n        description: A node type that includes the Metric capability indicates that it can be monitored using ceilometer.\n        occurrences: [1, UNBOUNDED]\n        properties:\n          initiator: {type: string, default: source, required: false}\n          network_name: {type: string, default: PRIVATE, required: false}\n          description: {type: string, default: Volume of reads, description: Description of the metric,\n            required: false}\n          type: {type: string, default: Cumulative, description: \'Type of the metric\n              value, for an example, Cumulative, Delta, Gauge and etc.\', required: true}\n          secure: {type: boolean, default: false, required: false}\n          ports:\n            type: map\n            required: false\n            entry_schema: {type: PortSpec}\n          port_name: {type: string, required: false}\n          unit: {type: string, default: B, description: Unit of the metric value,\n            required: true}\n          protocol: {type: string, default: tcp, required: false}\n          port: {type: PortDef, required: false}\n          name: {type: string, default: disk.device.read.bytes, description: Ceilometer metric type name to monitor. (The name ceilometer is using),\n            required: true}\n          category: {type: string, default: disk, description: \'Category of the metric,\n              for an example, compute, disk, network, storage and etc.\', required: false}\n          url_path: {type: string, required: false}\n      BK-012317-UUID-VSP 1.disk.device.allocation:\n        type: com.att.d2.capabilities.metric.Ceilometer\n        description: A node type that includes the Metric capability indicates that it can be monitored using ceilometer.\n        occurrences: [1, UNBOUNDED]\n        properties:\n          initiator: {type: string, default: source, required: false}\n          network_name: {type: string, default: PRIVATE, required: false}\n          description: {type: string, default: The amount of disk per device occupied by the instance on the host machine,\n            description: Description of the metric, required: false}\n          type: {type: string, default: Gauge, description: \'Type of the metric value,\n              for an example, Cumulative, Delta, Gauge and etc.\', required: true}\n          secure: {type: boolean, default: false, required: false}\n          ports:\n            type: map\n            required: false\n            entry_schema: {type: PortSpec}\n          port_name: {type: string, required: false}\n          unit: {type: string, default: B, description: Unit of the metric value,\n            required: true}\n          protocol: {type: string, default: tcp, required: false}\n          port: {type: PortDef, required: false}\n          name: {type: string, default: disk.device.allocation, description: Ceilometer metric type name to monitor. (The name ceilometer is using),\n            required: true}\n          category: {type: string, default: disk, description: \'Category of the metric,\n              for an example, compute, disk, network, storage and etc.\', required: false}\n          url_path: {type: string, required: false}\n      BK-012317-UUID-VSP 1.disk.root.size:\n        type: com.att.d2.capabilities.metric.Ceilometer\n        description: A node type that includes the Metric capability indicates that it can be monitored using ceilometer.\n        occurrences: [1, UNBOUNDED]\n        properties:\n          initiator: {type: string, default: source, required: false}\n          network_name: {type: string, default: PRIVATE, required: false}\n          description: {type: string, default: Size of root disk, description: Description of the metric,\n            required: false}\n          type: {type: string, default: Gauge, description: \'Type of the metric value,\n              for an example, Cumulative, Delta, Gauge and etc.\', required: true}\n          secure: {type: boolean, default: false, required: false}\n          ports:\n            type: map\n            required: false\n            entry_schema: {type: PortSpec}\n          port_name: {type: string, required: false}\n          unit: {type: string, default: GB, description: Unit of the metric value,\n            required: true}\n          protocol: {type: string, default: tcp, required: false}\n          port: {type: PortDef, required: false}\n          name: {type: string, default: disk.root.size, description: Ceilometer metric type name to monitor. (The name ceilometer is using),\n            required: true}\n          category: {type: string, default: compute, description: \'Category of the\n              metric, for an example, compute, disk, network, storage and etc.\', required: false}\n          url_path: {type: string, required: false}\n      BK-012317-UUID-VSP 1.disk.usage:\n        type: com.att.d2.capabilities.metric.Ceilometer\n        description: A node type that includes the Metric capability indicates that it can be monitored using ceilometer.\n        occurrences: [1, UNBOUNDED]\n        properties:\n          initiator: {type: string, default: source, required: false}\n          network_name: {type: string, default: PRIVATE, required: false}\n          description: {type: string, default: The physical size in bytes of the image container on the host,\n            description: Description of the metric, required: false}\n          type: {type: string, default: Gauge, description: \'Type of the metric value,\n              for an example, Cumulative, Delta, Gauge and etc.\', required: true}\n          secure: {type: boolean, default: false, required: false}\n          ports:\n            type: map\n            required: false\n            entry_schema: {type: PortSpec}\n          port_name: {type: string, required: false}\n          unit: {type: string, default: B, description: Unit of the metric value,\n            required: true}\n          protocol: {type: string, default: tcp, required: false}\n          port: {type: PortDef, required: false}\n          name: {type: string, default: disk.usage, description: Ceilometer metric type name to monitor. (The name ceilometer is using),\n            required: true}\n          category: {type: string, default: disk, description: \'Category of the metric,\n              for an example, compute, disk, network, storage and etc.\', required: false}\n          url_path: {type: string, required: false}\n      BK-012317-UUID-VSP 1.cpu.delta:\n        type: com.att.d2.capabilities.metric.Ceilometer\n        description: A node type that includes the Metric capability indicates that it can be monitored using ceilometer.\n        occurrences: [1, UNBOUNDED]\n        properties:\n          initiator: {type: string, default: source, required: false}\n          network_name: {type: string, default: PRIVATE, required: false}\n          description: {type: string, default: CPU time used since previous datapoint,\n            description: Description of the metric, required: false}\n          type: {type: string, default: Delta, description: \'Type of the metric value,\n              for an example, Cumulative, Delta, Gauge and etc.\', required: true}\n          secure: {type: boolean, default: false, required: false}\n          ports:\n            type: map\n            required: false\n            entry_schema: {type: PortSpec}\n          port_name: {type: string, required: false}\n          unit: {type: string, default: ns, description: Unit of the metric value,\n            required: true}\n          protocol: {type: string, default: tcp, required: false}\n          port: {type: PortDef, required: false}\n          name: {type: string, default: cpu.delta, description: Ceilometer metric type name to monitor. (The name ceilometer is using),\n            required: true}\n          category: {type: string, default: compute, description: \'Category of the\n              metric, for an example, compute, disk, network, storage and etc.\', required: false}\n          url_path: {type: string, required: false}\n      BK-012317-UUID-VSP 1.disk.device.read.requests.rate:\n        type: com.att.d2.capabilities.metric.Ceilometer\n        description: A node type that includes the Metric capability indicates that it can be monitored using ceilometer.\n        occurrences: [1, UNBOUNDED]\n        properties:\n          initiator: {type: string, default: source, required: false}\n          network_name: {type: string, default: PRIVATE, required: false}\n          description: {type: string, default: Average rate of read requests, description: Description of the metric,\n            required: false}\n          type: {type: string, default: Gauge, description: \'Type of the metric value,\n              for an example, Cumulative, Delta, Gauge and etc.\', required: true}\n          secure: {type: boolean, default: false, required: false}\n          ports:\n            type: map\n            required: false\n            entry_schema: {type: PortSpec}\n          port_name: {type: string, required: false}\n          unit: {type: string, default: request/s, description: Unit of the metric value,\n            required: true}\n          protocol: {type: string, default: tcp, required: false}\n          port: {type: PortDef, required: false}\n          name: {type: string, default: disk.device.read.requests.rate, description: Ceilometer metric type name to monitor. (The name ceilometer is using),\n            required: true}\n          category: {type: string, default: disk, description: \'Category of the metric,\n              for an example, compute, disk, network, storage and etc.\', required: false}\n          url_path: {type: string, required: false}\n      BK-012317-UUID-VSP 1.os:\n        type: tosca.capabilities.OperatingSystem\n        occurrences: [1, UNBOUNDED]\n        properties:\n          type: {type: string, required: false}\n          distribution: {type: string, required: false}\n          version: {type: version, required: false}\n          architecture: {type: string, required: false}\n      BK-012317-UUID-VSP 1.network.incoming.packets:\n        type: com.att.d2.capabilities.metric.Ceilometer\n        description: A node type that includes the Metric capability indicates that it can be monitored using ceilometer.\n        occurrences: [1, UNBOUNDED]\n        properties:\n          initiator: {type: string, default: source, required: false}\n          network_name: {type: string, default: PRIVATE, required: false}\n          description: {type: string, default: Number of incoming packets, description: Description of the metric,\n            required: false}\n          type: {type: string, default: Cumulative, description: \'Type of the metric\n              value, for an example, Cumulative, Delta, Gauge and etc.\', required: true}\n          secure: {type: boolean, default: false, required: false}\n          ports:\n            type: map\n            required: false\n            entry_schema: {type: PortSpec}\n          port_name: {type: string, required: false}\n          unit: {type: string, default: packet, description: Unit of the metric value,\n            required: true}\n          protocol: {type: string, default: tcp, required: false}\n          port: {type: PortDef, required: false}\n          name: {type: string, default: network.incoming.packets, description: Ceilometer metric type name to monitor. (The name ceilometer is using),\n            required: true}\n          category: {type: string, default: network, description: \'Category of the\n              metric, for an example, compute, disk, network, storage and etc.\', required: false}\n          url_path: {type: string, required: false}\n      BK-012317-UUID-VSP 1.memory.usage:\n        type: com.att.d2.capabilities.metric.Ceilometer\n        description: A node type that includes the Metric capability indicates that it can be monitored using ceilometer.\n        occurrences: [1, UNBOUNDED]\n        properties:\n          initiator: {type: string, default: source, required: false}\n          network_name: {type: string, default: PRIVATE, required: false}\n          description: {type: string, default: Volume of RAM used by the instance from the amount of its allocated memory,\n            description: Description of the metric, required: false}\n          type: {type: string, default: Gauge, description: \'Type of the metric value,\n              for an example, Cumulative, Delta, Gauge and etc.\', required: true}\n          secure: {type: boolean, default: false, required: false}\n          ports:\n            type: map\n            required: false\n            entry_schema: {type: PortSpec}\n          port_name: {type: string, required: false}\n          unit: {type: string, default: MB, description: Unit of the metric value,\n            required: true}\n          protocol: {type: string, default: tcp, required: false}\n          port: {type: PortDef, required: false}\n          name: {type: string, default: memory.usage, description: Ceilometer metric type name to monitor. (The name ceilometer is using),\n            required: true}\n          category: {type: string, default: compute, description: \'Category of the\n              metric, for an example, compute, disk, network, storage and etc.\', required: false}\n          url_path: {type: string, required: false}\n      BK-012317-UUID-VSP 1.disk.read.requests:\n        type: com.att.d2.capabilities.metric.Ceilometer\n        description: A node type that includes the Metric capability indicates that it can be monitored using ceilometer.\n        occurrences: [1, UNBOUNDED]\n        properties:\n          initiator: {type: string, default: source, required: false}\n          network_name: {type: string, default: PRIVATE, required: false}\n          description: {type: string, default: Number of read requests, description: Description of the metric,\n            required: false}\n          type: {type: string, default: Cumulative, description: \'Type of the metric\n              value, for an example, Cumulative, Delta, Gauge and etc.\', required: true}\n          secure: {type: boolean, default: false, required: false}\n          ports:\n            type: map\n            required: false\n            entry_schema: {type: PortSpec}\n          port_name: {type: string, required: false}\n          unit: {type: string, default: request, description: Unit of the metric value,\n            required: true}\n          protocol: {type: string, default: tcp, required: false}\n          port: {type: PortDef, required: false}\n          name: {type: string, default: disk.read.requests, description: Ceilometer metric type name to monitor. (The name ceilometer is using),\n            required: true}\n          category: {type: string, default: compute, description: \'Category of the\n              metric, for an example, compute, disk, network, storage and etc.\', required: false}\n          url_path: {type: string, required: false}\n      BK-012317-UUID-VSP 1.disk.device.write.bytes:\n        type: com.att.d2.capabilities.metric.Ceilometer\n        description: A node type that includes the Metric capability indicates that it can be monitored using ceilometer.\n        occurrences: [1, UNBOUNDED]\n        properties:\n          initiator: {type: string, default: source, required: false}\n          network_name: {type: string, default: PRIVATE, required: false}\n          description: {type: string, default: Volume of writes, description: Description of the metric,\n            required: false}\n          type: {type: string, default: Cumulative, description: \'Type of the metric\n              value, for an example, Cumulative, Delta, Gauge and etc.\', required: true}\n          secure: {type: boolean, default: false, required: false}\n          ports:\n            type: map\n            required: false\n            entry_schema: {type: PortSpec}\n          port_name: {type: string, required: false}\n          unit: {type: string, default: B, description: Unit of the metric value,\n            required: true}\n          protocol: {type: string, default: tcp, required: false}\n          port: {type: PortDef, required: false}\n          name: {type: string, default: disk.device.write.bytes, description: Ceilometer metric type name to monitor. (The name ceilometer is using),\n            required: true}\n          category: {type: string, default: disk, description: \'Category of the metric,\n              for an example, compute, disk, network, storage and etc.\', required: false}\n          url_path: {type: string, required: false}\n      BK-012317-UUID-VSP 1.link:\n        type: tosca.capabilities.network.Linkable\n        occurrences: [0, UNBOUNDED]\n      BK-012317-UUID-VSP 1.disk.device.write.requests:\n        type: com.att.d2.capabilities.metric.Ceilometer\n        description: A node type that includes the Metric capability indicates that it can be monitored using ceilometer.\n        occurrences: [1, UNBOUNDED]\n        properties:\n          initiator: {type: string, default: source, required: false}\n          network_name: {type: string, default: PRIVATE, required: false}\n          description: {type: string, default: Number of write requests, description: Description of the metric,\n            required: false}\n          type: {type: string, default: Cumulative, description: \'Type of the metric\n              value, for an example, Cumulative, Delta, Gauge and etc.\', required: true}\n          secure: {type: boolean, default: false, required: false}\n          ports:\n            type: map\n            required: false\n            entry_schema: {type: PortSpec}\n          port_name: {type: string, required: false}\n          unit: {type: string, default: request, description: Unit of the metric value,\n            required: true}\n          protocol: {type: string, default: tcp, required: false}\n          port: {type: PortDef, required: false}\n          name: {type: string, default: disk.device.write.requests, description: Ceilometer metric type name to monitor. (The name ceilometer is using),\n            required: true}\n          category: {type: string, default: disk, description: \'Category of the metric,\n              for an example, compute, disk, network, storage and etc.\', required: false}\n          url_path: {type: string, required: false}\n      BK-012317-UUID-VSP 1.network.incoming.bytes:\n        type: com.att.d2.capabilities.metric.Ceilometer\n        description: A node type that includes the Metric capability indicates that it can be monitored using ceilometer.\n        occurrences: [1, UNBOUNDED]\n        properties:\n          initiator: {type: string, default: source, required: false}\n          network_name: {type: string, default: PRIVATE, required: false}\n          description: {type: string, default: Number of incoming bytes, description: Description of the metric,\n            required: false}\n          type: {type: string, default: Cumulative, description: \'Type of the metric\n              value, for an example, Cumulative, Delta, Gauge and etc.\', required: true}\n          secure: {type: boolean, default: false, required: false}\n          ports:\n            type: map\n            required: false\n            entry_schema: {type: PortSpec}\n          port_name: {type: string, required: false}\n          unit: {type: string, default: B, description: Unit of the metric value,\n            required: true}\n          protocol: {type: string, default: tcp, required: false}\n          port: {type: PortDef, required: false}\n          name: {type: string, default: network.incoming.bytes, description: Ceilometer metric type name to monitor. (The name ceilometer is using),\n            required: true}\n          category: {type: string, default: network, description: \'Category of the\n              metric, for an example, compute, disk, network, storage and etc.\', required: false}\n          url_path: {type: string, required: false}\n      BK-012317-UUID-VSP 1.disk.read.bytes:\n        type: com.att.d2.capabilities.metric.Ceilometer\n        description: A node type that includes the Metric capability indicates that it can be monitored using ceilometer.\n        occurrences: [1, UNBOUNDED]\n        properties:\n          initiator: {type: string, default: source, required: false}\n          network_name: {type: string, default: PRIVATE, required: false}\n          description: {type: string, default: Volume of reads, description: Description of the metric,\n            required: false}\n          type: {type: string, default: Cumulative, description: \'Type of the metric\n              value, for an example, Cumulative, Delta, Gauge and etc.\', required: true}\n          secure: {type: boolean, default: false, required: false}\n          ports:\n            type: map\n            required: false\n            entry_schema: {type: PortSpec}\n          port_name: {type: string, required: false}\n          unit: {type: string, default: B, description: Unit of the metric value,\n            required: true}\n          protocol: {type: string, default: tcp, required: false}\n          port: {type: PortDef, required: false}\n          name: {type: string, default: disk.read.bytes, description: Ceilometer metric type name to monitor. (The name ceilometer is using),\n            required: true}\n          category: {type: string, default: compute, description: \'Category of the\n              metric, for an example, compute, disk, network, storage and etc.\', required: false}\n          url_path: {type: string, required: false}\n    requirements:\n      BK-012317-UUID-VSP 1.dependency:\n        occurrences: [0, UNBOUNDED]\n        capability: tosca.capabilities.Node\n        node: tosca.nodes.Root\n        relationship: tosca.relationships.DependsOn\n      BK-012317-UUID-VSP 1.local_storage:\n        occurrences: [0, UNBOUNDED]\n        capability: tosca.capabilities.Attachment\n        node: tosca.nodes.BlockStorage\n        relationship: tosca.relationships.AttachesTo\n      BK-012317-UUID-VSP 1.link:\n        occurrences: [1, 1]\n        capability: tosca.capabilities.network.Linkable\n        relationship: tosca.relationships.network.LinksTo\n      BK-012317-UUID-VSP 1.port:\n        occurrences: [0, UNBOUNDED]\n        capability: tosca.capabilities.Attachment\n        node: com.att.d2.resource.cp.nodes.heat.network.neutron.Port\n        relationship: com.att.d2.relationships.AttachesTo\ntosca_definitions_version: tosca_simple_yaml_1_0\n','083b57cd-4b76-4924-a64c-610445528063',NULL,'BK-012317-UUID-Service','BK-012317-UUID-Service','Service','Network L1-3','N','Bk012317UuidService','service-Bk012317UuidService-template.yml',NULL);
/*!40000 ALTER TABLE `SERVICE_MODEL` ENABLE KEYS */;
UNLOCK TABLES;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

DROP TABLE IF EXISTS `SERVICE_MODEL_TO_VF_MODEL_MAPPING`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `SERVICE_MODEL_TO_VF_MODEL_MAPPING` (
  `service_uuid` varchar(255) NOT NULL,
  `vf_uuid` varchar(255) NOT NULL,
  `vf_customization_uuid` varchar(255) NOT NULL,
  `service_invariant_uuid` varchar(255) DEFAULT NULL,
  PRIMARY KEY(`service_uuid`, `vf_uuid`, `vf_customization_uuid`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

-- Dump completed on 2017-10-12 20:48:44
