{{/*
#
# ============LICENSE_START=======================================================
# org.onap.aai
# ================================================================================
# Copyright (c) 2018 AT&T Intellectual Property. All rights reserved.
# Copyright (c) 2020 Nokia Intellectual Property. All rights reserved.
# Copyright (c) 2020-2021 Orange Intellectual Property. All rights reserved.
# ================================================================================
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ============LICENSE_END=========================================================

# In ONAP, the following job will always be run on each installation
# The following job will go through the latest oxm and
# create properties based on the data type defined in the oxm
# and create the required indexes for the appropriate properties
# This can be run multiple times as the code if the index or property already exists
# then the index or property won't be created again
# NOTE - During the execution of the createSchema job, there should
# be no other janusgraph connection to the graph as its the reason
# that resources traversal and graphadmin wait until this job is done
# If you are using an existing cassandra cluster not coming from oom
# then it is your job to ensure that there are no connections to the database
*/}}

{{- if and ( not .Values.global.jobs.migration.enabled ) ( .Values.global.jobs.createSchema.enabled ) }}
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "common.fullname" . }}-create-db-schema
  namespace: {{ include "common.namespace" . }}
  labels:
    app: {{ include "common.name" . }}-job
    chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
    release: {{ include "common.release" . }}
    heritage: {{ .Release.Service }}
spec:
  backoffLimit: 20
  template:
    metadata:
      labels:
        app: {{ include "common.name" . }}-job
        release: {{ include "common.release" . }}
      name: {{ include "common.name" . }}
    spec:
      initContainers: {{ include "common.certInitializer.initContainer" . | nindent 6 }}
      {{- if .Values.global.aafEnabled }}
      - command:
        - sh
        args:
        - -c
        - |
          echo "*** retrieve Truststore and Keystore password"
          export $(cat {{ .Values.certInitializer.appMountPath }}/local/mycreds.prop | xargs -0)
          echo "*** obfuscate them "
          export JETTY_UTIL_JAR=$(find /usr/local/jetty/lib/ -regextype sed -regex ".*jetty-util-[0-9].*.jar")
          export KEYSTORE_PASSWORD=`java -cp ${JETTY_UTIL_JAR} org.eclipse.jetty.util.security.Password ${KEYSTORE_PLAIN_PASSWORD} 2>&1 | grep "OBF:"`
          export KEYSTORE_JKS_PASSWORD=`java -cp ${JETTY_UTIL_JAR} org.eclipse.jetty.util.security.Password ${KEYSTORE_JKS_PLAIN_PASSWORD} 2>&1 | grep "OBF:"`
          export TRUSTSTORE_PASSWORD=`java -cp ${JETTY_UTIL_JAR} org.eclipse.jetty.util.security.Password ${TRUSTSTORE_PLAIN_PASSWORD} 2>&1 | grep "OBF:"`
          echo "KEYSTORE_PASSWORD=${KEYSTORE_PASSWORD}" >> {{ .Values.certInitializer.appMountPath }}/local/mycreds.prop
          echo "KEYSTORE_JKS_PASSWORD=${KEYSTORE_JKS_PASSWORD}" >> {{ .Values.certInitializer.appMountPath }}/local/mycreds.prop
          echo "TRUSTSTORE_PASSWORD=${TRUSTSTORE_PASSWORD}" >> {{ .Values.certInitializer.appMountPath }}/local/mycreds.prop
        image: {{ include "repositoryGenerator.image.jetty" . }}
        imagePullPolicy: {{ .Values.global.pullPolicy | default .Values.pullPolicy }}
        name: {{ include "common.name" . }}-obfuscate
        volumeMounts: {{ include "common.certInitializer.volumeMount" . | nindent 8 }}
        securityContext:
          runAsUser: {{ .Values.securityContext.user_id }}
      - command:
        - sh
        args:
        - -c
        - |
          echo "*** Set obfuscated Truststore and Keystore password into configuration file"
          export $(cat {{ .Values.certInitializer.appMountPath }}/local/mycreds.prop | xargs -0)
          cd /config-input
          for PFILE in `ls -1`
          do
            envsubst <${PFILE} >/config/${PFILE}
          done
        volumeMounts: {{ include "common.certInitializer.volumeMount" . | nindent 8 }}
        - mountPath: /config-input
          name: properties-input
        - mountPath: /config
          name: properties
        image: {{ include "repositoryGenerator.image.envsubst" . }}
        imagePullPolicy: {{ .Values.global.pullPolicy | default .Values.pullPolicy }}
        name: {{ include "common.name" . }}-update-config
      {{- end }}
      - command:
        - /app/ready.py
        args:
        - --container-name
        {{- if .Values.global.cassandra.localCluster }}
        - aai-cassandra
        {{- else }}
        - cassandra
        {{- end }}
        - --container-name
        - aai-schema-service
        env:
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        image: {{ include "repositoryGenerator.image.readiness" . }}
        imagePullPolicy: {{ .Values.global.pullPolicy | default .Values.pullPolicy }}
        name: {{ include "common.name" . }}-readiness
      containers:
      - name: {{ include "common.name" . }}-job
        image: {{ include "repositoryGenerator.repository" . }}/{{ .Values.image }}
        imagePullPolicy: {{ .Values.global.pullPolicy | default .Values.pullPolicy }}
        command:
        - sh
        args:
        - -c
        - |
           {{- if include "common.onServiceMesh" . }}
           echo "waiting 15s for istio side cars to be up"; sleep 15s;{{- end }}
           bash docker-entrypoint.sh createDBSchema.sh;
           {{ include "common.serviceMesh.killSidecar" . | indent 11 | trim }}
        env:
        - name: LOCAL_USER_ID
          value: {{ .Values.securityContext.user_id | quote }}
        - name: LOCAL_GROUP_ID
          value: {{ .Values.securityContext.group_id | quote }}
        volumeMounts: {{ include "common.certInitializer.volumeMount" . | nindent 8 }}
        - mountPath: /etc/localtime
          name: localtime
          readOnly: true
        - mountPath: /opt/app/aai-graphadmin/resources/etc/appprops/janusgraph-realtime.properties
          name: config
          subPath: janusgraph-realtime.properties
        - mountPath: /opt/app/aai-graphadmin/resources/etc/appprops/janusgraph-cached.properties
          name: config
          subPath: janusgraph-cached.properties
        - mountPath: /opt/app/aai-graphadmin/resources/etc/appprops/aaiconfig.properties
          name: properties
          subPath: aaiconfig.properties
        - mountPath: /opt/aai/logroot/AAI-GA
          name: logs
        - mountPath: /opt/app/aai-graphadmin/resources/logback.xml
          name: config
          subPath: logback.xml
        - mountPath: /opt/app/aai-graphadmin/resources/localhost-access-logback.xml
          name: config
          subPath: localhost-access-logback.xml
        - mountPath: /opt/app/aai-graphadmin/resources/application.properties
          name: properties
          subPath: application.properties
        resources: {{ include "common.resources" . | nindent 10 }}
      {{- if .Values.nodeSelector }}
      nodeSelector: {{ toYaml .Values.nodeSelector | nindent 8 }}
      {{- end }}
      {{- if .Values.affinity }}
      affinity: {{ toYaml .Values.affinity | nindent 8 }}
      {{- end }}
      volumes: {{ include "common.certInitializer.volumes" . | nindent 6 }}
      - name: localtime
        hostPath:
          path: /etc/localtime
      {{ include "common.log.volumes" (dict "dot" . "configMapNamePrefix" (tpl .Values.logConfigMapNamePrefix .)) | nindent 6 }}
      - name: logs
        emptyDir: {}
      - name: config
        configMap:
          name: {{ include "common.fullname" . }}
      - name: properties
      {{- if .Values.global.aafEnabled }}
        emptyDir:
          medium: Memory
      - name: properties-input
      {{- end }}
        configMap:
          name: {{ include "common.fullname" . }}-properties
      restartPolicy: Never
      imagePullSecrets:
      - name: {{ include "common.namespace" . }}-docker-registry-key
{{ end }}
