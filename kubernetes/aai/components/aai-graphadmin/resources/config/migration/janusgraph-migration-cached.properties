#
# ============LICENSE_START=======================================================
# Copyright Â© 2018 AT&T Intellectual Property. All rights reserved.
# ================================================================================
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ============LICENSE_END=========================================================

query.fast-property=true
query.smart-limit=false

{{- if eq .Values.global.jobs.migration.remoteCassandra.enabled false }}

storage.backend=cql
storage.hostname={{ .Values.global.cassandra.existingInstServiceName | default .Values.global.cassandra.serviceName }}
storage.cql.keyspace=aaigraph
storage.username={{.Values.global.cassandra.username}}
storage.password={{.Values.global.cassandra.password}}

storage.cql.read-consistency-level=LOCAL_QUORUM
storage.cql.write-consistency-level=LOCAL_QUORUM
storage.cql.replication-factor={{.Values.global.cassandra.replicas}}
storage.cql.only-use-local-consistency-for-system-operations=true
{{- else }}
{{- if .Values.global.jobs.migration.remoteCassandra.storage }}
storage.backend={{ .Values.global.jobs.migration.remoteCassandra.storage.backend }}
storage.hostname={{ .Values.global.jobs.migration.remoteCassandra.storage.hostname }}
{{- if eq .Values.global.jobs.migration.remoteCassandra.storage.backend "cassandra" }}
storage.cassandra.keyspace={{ .Values.global.jobs.migration.remoteCassandra.storage.name }}
storage.cassandra.read-consistency-level={{ .Values.global.jobs.migration.remoteCassandra.storage.cassandra.readConsistency }}
storage.cassandra.write-consistency-level={{ .Values.global.jobs.migration.remoteCassandra.storage.cassandra.writeConsistency }}
storage.cassandra.replication-factor={{ .Values.global.jobs.migration.remoteCassandra.storage.cassandra.replicationFactor | int }}
storage.cassandra.replication-strategy-class=org.apache.cassandra.locator.SimpleStrategy

{{- else if eq .Values.global.jobs.migration.remoteCassandra.storage.backend "cql" }}
storage.cql.keyspace={{ .Values.global.jobs.migration.remoteCassandra.storage.name }}
storage.cql.read-consistency-level={{ .Values.global.jobs.migration.remoteCassandra.storage.cql.readConsistency }}
storage.cql.write-consistency-level={{ .Values.global.jobs.migration.remoteCassandra.storage.cql.readConsistency }}
storage.cql.replication-factor={{ .Values.global.jobs.migration.remoteCassandra.storage.cql.replicationFactor | int }}
storage.cql.only-use-local-consistency-for-system-operations={{ .Values.global.jobs.migration.remoteCassandra.storage.cql.localConsistencyForSysOps }}
storage.cql.cluster-name={{ .Values.global.jobs.migration.remoteCassandra.storage.cql.clusterName }}
storage.cql.local-datacenter={{ .Values.global.jobs.migration.remoteCassandra.storage.cql.localDataCenter }}

{{- else if eq .Values.global.jobs.migration.remoteCassandra.storage.backend "hbase" }}
storage.hbase.table={{ .Values.global.jobs.migration.remoteCassandra.storage.name }}
{{- end }}
storage.connection-timeout={{ .Values.global.jobs.migration.remoteCassandra.storage.connectionTimeout | int }}
cache.tx-cache-size={{ .Values.global.jobs.migration.remoteCassandra.storage.cacheSize | int }}
log.tx.key-consistent={{ .Values.global.jobs.migration.remoteCassandra.storage.keyConsistent }}
{{- end }}
{{- end }}
storage.lock.wait-time=300

#caching on
cache.db-cache = true
cache.db-cache-clean-wait = 20
cache.db-cache-time = 180000
cache.db-cache-size = 0.3

#load graphson file on startup
load.snapshot.file=false
