{{/*
#============LICENSE_START========================================================
# ================================================================================
# Copyright (c) 2019 AT&T Intellectual Property. All rights reserved.
# ================================================================================
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ============LICENSE_END=========================================================
*/}}

apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "common.fullname" . }}
  namespace: {{ include "common.namespace" . }}
  labels:
    app: {{ include "common.name" . }}
    chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
    release: {{ include "common.release" . }}
    heritage: {{ .Release.Service }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: {{ include "common.name" . }}
  template:
    metadata:
      labels:
        app: {{ include "common.name" . }}
        release: {{ include "common.release" . }}
    spec:
      initContainers:
        - command:
          - sh
          args:
          - -c
          - "cd /config-input && for PFILE in `find . -not -type d | grep -v -F ..`; do envsubst <${PFILE} >/config/${PFILE}; done"
          env:
          - name: PG_USER
            {{- include "common.secret.envFromSecretFast" (dict "global" . "uid" "pg-user-creds" "key" "login") | indent 12 }}
          - name: PG_PASSWORD
            {{- include "common.secret.envFromSecretFast" (dict "global" . "uid" "pg-user-creds" "key" "password") | indent 12 }}
          volumeMounts:
          - mountPath: /config-input
            name: {{ include "common.fullname" . }}-inv-config-input
          - mountPath: /config
            name: {{ include "common.fullname" . }}-inv-config
          image: "{{ .Values.global.envsubstImage }}"
          imagePullPolicy: {{ .Values.global.pullPolicy | default .Values.pullPolicy }}
          name: {{ include "common.name" . }}-update-config

        - name: {{ include "common.name" . }}-readiness
          image: {{ include "common.repository" . }}/{{ .Values.global.readinessImage }}
          imagePullPolicy: {{ .Values.global.pullPolicy | default .Values.pullPolicy }}
          command:
            - /app/ready.py
          args:
            - --container-name
            - {{ .Values.postgres.nameOverride }}
            - --container-name
            - aaf-cm
            - "-t"
            - "15"
          env:
          - name: NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
        - name: init-tls
          env:
          - name: aaf_locator_fqdn
            value: dcae
          - name: POD_IP
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: status.podIP
          image: {{ .Values.global.tlsRepository }}/{{ .Values.global.tlsImage }}
          imagePullPolicy: {{ .Values.global.pullPolicy | default .Values.pullPolicy }}
          resources: {}
          volumeMounts:
            - mountPath: /opt/app/osaaf
              name: tls-info
      containers:
        - name: {{ include "common.name" . }}
          image: "{{ include "common.repository" . }}/{{ .Values.image }}"
          imagePullPolicy: {{ .Values.global.pullPolicy | default .Values.pullPolicy }}
          # Assumes that the Docker image is built with ENTRYPOINT set to
          # ["java", "-jar", "/opt/inventory-api-x.y.z.jar", "server"]
          # where "x.y.z" is the version number (matches the Docker image version number)
          # The arg below adds a parameter, the path to a config file.
          # This tells the inventory-api app to get its configuration from the file
          # rather than querying Consul.
          args:
            - "/opt/config.json"
          resources:
{{ include "common.resources" . | indent 12 }}
          ports:
          - containerPort: {{ .Values.service.internalPort }}
          # disable liveness probe when breakpoints set in debugger
          # so K8s doesn't restart unresponsive container
          {{- if eq .Values.liveness.enabled true }}
          livenessProbe:
            tcpSocket:
              port: {{ .Values.service.internalPort }}
            initialDelaySeconds: {{ .Values.liveness.initialDelaySeconds }}
            periodSeconds: {{ .Values.liveness.periodSeconds }}
          {{ end }}
          readinessProbe:
            httpGet:
              path: {{ .Values.readiness.path }}
              port: {{ .Values.service.internalPort }}
              scheme: {{ .Values.readiness.scheme }}
            initialDelaySeconds: {{ .Values.readiness.initialDelaySeconds }}
            periodSeconds: {{ .Values.readiness.periodSeconds }}
          volumeMounts:
            - name: {{  include "common.fullname" . }}-inv-config
              mountPath: /opt/config.json
              subPath: config.json
            - mountPath: /opt/cert/
              name: tls-info
            - mountPath: /opt/logs/
              name: component-log
          env:
            - name: CONSUL_HOST
              value: consul.{{ include "common.namespace" . }}
        - name: {{ include "common.name" . }}-filebeat
          env:
            - name: POD_IP
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: status.podIP
          image: {{ .Values.global.loggingRepository }}/{{ .Values.global.loggingImage }}
          imagePullPolicy: IfNotPresent
          resources: {}
          volumeMounts:
          - mountPath: /var/log/onap/inventory
            name: component-log
          - mountPath: /usr/share/filebeat/data
            name: filebeat-data
          - mountPath: /usr/share/filebeat/filebeat.yml
            name: filebeat-conf
            subPath: filebeat.yml
      volumes:
        - emptyDir: {}
          name: component-log
        - emptyDir: {}
          name: filebeat-data
        - configMap:
            defaultMode: 420
            name: {{ include "common.fullname" . }}-filebeat-configmap
          name: filebeat-conf
        - name: {{ include "common.fullname" . }}-inv-config-input
          configMap:
            name: {{ include "common.fullname" . }}-configmap
        - name: {{ include "common.fullname" . }}-inv-config
          emptyDir:
            medium: Memory
        - emptyDir: {}
          name: tls-info
      imagePullSecrets:
      - name: "{{ include "common.namespace" . }}-docker-registry-key"
