{{/*
# Copyright © 2017 Amdocs, Bell Canada
# Modifications Copyright © 2018-2020, 2022 AT&T Intellectual Property
# Modifications Copyright (C) 2024 Nordix Foundation.
# Modifications Copyright © 2024 Deutsche Telekom
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
*/}}

apiVersion: apps/v1
kind: StatefulSet
metadata: {{- include "common.resourceMetadata" . | nindent 2 }}
spec:
  selector: {{- include "common.selectors" . | nindent 4 }}
  serviceName: {{ include "common.servicename" . }}
  replicas: {{ .Values.replicaCount }}
  template:
    metadata: {{- include "common.templateMetadata" . | nindent 6 }}
    spec:
      {{ include "common.podSecurityContext" . | indent 6 | trim }}
      initContainers:
      - command:
        - /app/ready.py
        args:
        - --job-name
{{ if .Values.global.mariadbGalera.useInPolicy }}
        - {{ include "common.release" . }}-policy-galera-migrator-config
{{ else }}
        - {{ include "common.release" . }}-policy-pg-migrator-config
{{ end }}
        env:
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        image: {{ include "repositoryGenerator.image.readiness" . }}
        imagePullPolicy: {{ .Values.global.pullPolicy | default .Values.pullPolicy }}
        {{ include "common.containerSecurityContext" . | indent 8 | trim }}
        name: {{ include "common.name" . }}-db-readiness
        resources:
          limits:
            cpu: "100m"
            memory: "500Mi"
          requests:
            cpu: "3m"
            memory: "20Mi"
{{- if not .Values.nexus.offline }}
      - command:
        - /app/ready.py
        args:
        - --service-name
        - {{ .Values.nexus.name }}
        env:
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        - name: KAFKA_URL
          value: {{ include "common.release" . }}-{{ .Values.global.kafkaBootstrap }}
        - name: SASL
          value: {{ .Values.kafkaUser.authenticationType | upper }}
        - name: GROUP_ID
          value: {{ .Values.config.kafka.consumer.groupId }}
        - name: PAP_TOPIC
          value: {{ .Values.config.app.listener.policyPdpPapTopic }}
        image: {{ include "repositoryGenerator.image.readiness" . }}
        imagePullPolicy: {{ .Values.global.pullPolicy | default .Values.pullPolicy }}
        {{ include "common.containerSecurityContext" . | indent 8 | trim }}
        name: {{ include "common.name" . }}-readiness
        resources:
          limits:
            cpu: "100m"
            memory: "500Mi"
          requests:
            cpu: "3m"
            memory: "20Mi"
{{- end }}
      - command:
          - sh
        args:
          - -c
          - JAASLOGIN=`echo $JAASLOGIN | tr -d '"'`; cd /config-input && for PFILE in `ls -1`; do envsubst <${PFILE} >/config/${PFILE}; done
        env:
        - name: KAFKA_URL
          value: {{ include "common.release" . }}-{{ .Values.global.kafkaBootstrap }}
        - name: SASL
          value: {{ .Values.kafkaUser.authenticationType | upper }}
        - name: GROUP_ID
          value: {{ .Values.config.kafka.consumer.groupId }}
      {{- if .Values.global.useStrimziKafka }}
        - name: JAASLOGIN
          valueFrom:
            secretKeyRef:
              name: {{ include "common.name" . }}-ku
              key: sasl.jaas.config
      {{- end }}
        volumeMounts:
          - mountPath: /config-input
            name: drools-config
          - mountPath: /config
            name: drools-config-processed
        image: {{ include "repositoryGenerator.image.envsubst" . }}
        imagePullPolicy: {{ .Values.global.pullPolicy | default .Values.pullPolicy }}
        {{ include "common.containerSecurityContext" . | indent 8 | trim }}
        name: {{ include "common.name" . }}-update-config
      containers:
        - name: {{ include "common.name" . }}
          {{ include "common.containerSecurityContext" . | indent 10 | trim }}
          image: {{ include "repositoryGenerator.repository" . }}/{{ .Values.image }}
          imagePullPolicy: {{ .Values.global.pullPolicy | default .Values.pullPolicy }}
          command: ["sh","-c"]
          args:
            - ls /tmp/policy-install;
              /opt/app/policy/bin/pdpd-cl-entrypoint.sh boot
          ports: {{ include "common.containerPorts" . | nindent 12  }}
          {{- if eq .Values.liveness.enabled true }}
          livenessProbe:
            httpGet:
              path: /healthcheck/controllers
              port: 6968
            initialDelaySeconds: {{ .Values.liveness.initialDelaySeconds }}
            periodSeconds: {{ .Values.liveness.periodSeconds }}
            timeoutSeconds: {{ .Values.liveness.timeoutSeconds }}
          {{- end }}
          readinessProbe:
            tcpSocket:
              port: {{ .Values.service.internalPort }}
            initialDelaySeconds: {{ .Values.readiness.initialDelaySeconds }}
            periodSeconds: {{ .Values.readiness.periodSeconds }}
          env:
          - name: REPLICAS
            value: "{{ .Values.replicaCount }}"
          - name: SQL_USER
            {{- include "common.secret.envFromSecretFast" (dict "global" . "uid" "db-secret" "key" "login") | indent 12 }}
          - name: SQL_PASSWORD
            {{- include "common.secret.envFromSecretFast" (dict "global" . "uid" "db-secret" "key" "password") | indent 12 }}
          volumeMounts:
          - mountPath: /etc/localtime
            name: localtime
            readOnly: true
          - name: logs
            mountPath: /var/log/onap
          - name: empty-dir
            mountPath: /tmp
            subPath: tmp-dir
          - mountPath: /opt/app/policy/etc/profile.d/base.conf
            subPath: base.conf
            name: drools-config-processed
          - mountPath: /opt/app/policy/etc/profile.d/credentials.conf
            subPath: credentials.conf
            name: drools-config-processed
          - mountPath: /opt/app/policy/etc/profile.d/feature-pooling-messages.conf
            subPath: feature-pooling-messages.conf
            name: drools-config-processed
          - mountPath: /opt/app/policy/config/feature-lifecycle.properties
            subPath: feature-lifecycle.properties
            name: drools-config-processed
          - mountPath: /opt/app/policy/config/engine-system.properties
            subPath: engine-system.properties
            name: drools-config-processed
          - mountPath: /opt/app/policy/config/feature-distributed-locking.properties
            subPath: feature-distributed-locking.properties
            name: drools-config-processed
          - mountPath: /opt/app/policy/config/logback.xml
            subPath: logback.xml
            name: drools-config
          - mountPath: /opt/app/policy/config/settings.xml
            subPath: settings.xml
            name: drools-config-processed
          resources: {{ include "common.resources" . | nindent 12 }}
        {{- if .Values.nodeSelector }}
      nodeSelector:
{{ toYaml .Values.nodeSelector | indent 8 }}
        {{- end -}}
        {{- if .Values.affinity }}
      affinity:
{{ toYaml .Values.affinity | indent 8 }}
        {{- end }}
      serviceAccountName: {{ include "common.fullname" (dict "suffix" "read" "dot" . )}}
      volumes:
        - name: localtime
          hostPath:
            path: /etc/localtime
        - name: empty-dir
          emptyDir:
            sizeLimit: {{ .Values.dirSizes.emptyDir.sizeLimit }}
        - name: logs
          emptyDir:
            sizeLimit: {{ .Values.dirSizes.logDir.sizeLimit }}
        - name: drools-config
          configMap:
            name: {{ include "common.fullname" . }}-configmap
            items:
            {{- range $path, $bytes := .Files.Glob "resources/configmaps/*" }}
            - key: {{ base $path }}
              path: {{ base $path }}
              mode: 0755
            {{- end }}
        - name: drools-config-processed
          emptyDir:
            medium: Memory
            sizeLimit: 64Mi
        - name: drools-secret
          secret:
            secretName: {{ include "common.fullname" . }}-secret
            items:
            {{- range $path, $bytes := .Files.Glob "resources/secrets/*" }}
            - key: {{ base $path }}
              path: {{ base $path }}
              mode: 0644
            {{- end }}
      {{- include "common.imagePullSecrets" . | nindent 6 }}
