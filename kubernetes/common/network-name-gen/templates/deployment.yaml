# Copyright (C) 2018  AT&T Intellectual Property.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: {{ include "common.fullname" . }}
  namespace: {{ include "common.namespace" . }}
  labels:
    app: {{ include "common.name" . }}
    chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  replicas: {{ .Values.replicaCount }}
  template:
    metadata:
      labels:
        app: {{ include "common.name" . }}
        release: {{ .Release.Name }}
    spec:
      initContainers:
      - command:
        - /root/ready.py
        args:
        - --container-name
        {{ if .Values.global.mariadbGalera.localCluster }}
        - {{ index .Values "mariadb-galera" "nameOverride" }}
        {{ else }}
        - mariadb-galera
        {{ end }}
        env:
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        image: "{{ .Values.global.readinessRepository }}/{{ .Values.global.readinessImage }}"
        imagePullPolicy: {{ .Values.global.pullPolicy | default .Values.pullPolicy }}
        name: {{ include "common.name" . }}-readiness
      {{ if or ( not .Values.global.mariadbGalera.localCluster ) ( .Values.global.migration.enabled ) }}
      - command:
        - /bin/bash
        - -c
        - |
          {{ if not .Values.global.migration.enabled }}
          mysql -h {{ if .Values.global.mariadbGalera.localCluster }}{{ index .Values "mariadb-galera" "service" "name" }}{{ else }}{{ index .Values "global" "mariadbGalera" "serviceName" }}{{end }} --user=root --password=${MYSQL_ROOT_PASSWORD} {{ index .Values "mariadb-galera" "config" "mysqlDatabase" }} -e exit > /dev/null 2>&1
          rc=$?
          {{ else }}
          rc=1
          {{ end }}
          cat > /tmp/nengen.sql << EOF
          DROP DATABASE IF EXISTS {{ index .Values "mariadb-galera" "config" "mysqlDatabase" }};
          CREATE DATABASE /*!32312 IF NOT EXISTS*/ {{ index .Values "mariadb-galera" "config" "mysqlDatabase" }} /*!40100 DEFAULT CHARACTER SET latin1 */;
          DROP USER IF EXISTS {{ index .Values "mariadb-galera" "config" "userName" }};
          CREATE USER {{ index .Values "mariadb-galera" "config" "userName" }};
          GRANT ALL on {{ index .Values "mariadb-galera" "config" "mysqlDatabase" }}.* to {{ index .Values "mariadb-galera" "config" "userName" }} identified by '${DB_PASSWORD}' with GRANT OPTION;
          FLUSH PRIVILEGES;
          EOF

          if [ $rc -eq 0 ]; then
            echo "Database already initialized!!!"
          else
            echo "Creating database . . ."
            mysql -vv -h {{ if .Values.global.mariadbGalera.localCluster }}{{ index .Values "mariadb-galera" "service" "name" }}{{ else }}{{ index .Values "global" "mariadbGalera" "serviceName" }}{{end }} -u root -p${MYSQL_ROOT_PASSWORD} < /tmp/nengen.sql || exit 1
          fi
          {{ if .Values.global.migration.enabled }}
          echo "Running migration"
          mysql -vv -h {{ if .Values.global.mariadbGalera.localCluster }}{{ index .Values "mariadb-galera" "service" "name" }}{{ else }}{{ index .Values "global" "mariadbGalera" "serviceName" }}{{end }} -u root -p${MYSQL_ROOT_PASSWORD} {{ index .Values "mariadb-galera" "config" "mysqlDatabase" }} < `ls -tr /backup/backup-nengen* | tail -1` || exit 1
          {{ end }}
          echo "Created database . . ."
        env:
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ template "common.fullname" . }}
              {{ if .Values.global.mariadbGalera.localCluster }}
              key: db-root-password
              {{ else }}
              key: shared-db-password
              {{ end }}
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ template "common.fullname" . }}
              key: db-password
        image: "{{ .Values.mariadb_image }}"
        imagePullPolicy: {{ .Values.global.pullPolicy | default .Values.pullPolicy }}
        name: {{ include "common.name" . }}-db-init
        {{- if .Values.global.migration.enabled }}
        volumeMounts:
        - name: backup-storage
          mountPath: /backup
        {{ end }}
      {{ end }}
      containers:
      - name: {{ include "common.name" . }}
        image: "{{ include "common.repository" . }}/{{ .Values.image }}"
        imagePullPolicy: {{ .Values.global.pullPolicy | default .Values.pullPolicy }}
        env:
        - name: SPRING_PROFILE
          value: "{{ .Values.config.springProfile }}"
        - name: NENG_DB_USER
          value: {{ index .Values "mariadb-galera" "config" "userName" }}
        - name: NENG_DB_PASS
          valueFrom:
            secretKeyRef:
              name: {{ template "common.fullname" . }}
              key: db-password
        - name: NENG_DB_URL
          value: {{ .Values.config.dbUrl }}
          value: jdbc:mysql://{{ if .Values.global.mariadbGalera.localCluster }}{{ index .Values "mariadb-galera" "service" "name" }}{{ else }}{{ index .Values "global" "mariadbGalera" "serviceName" }}{{ end }}:3306/{{ index .Values "mariadb-galera" "config" "mysqlDatabase" }}
        - name: POL_CLIENT_AUTH
          value: "{{ .Values.config.polClientAuth }}"
        - name: POL_BASIC_AUTH
          value: "{{ .Values.config.polBasicAuth }}"
        - name: POL_URL
          value: "{{ .Values.config.polUrl }}"
        - name: POL_ENV
          value: "{{ .Values.config.polEnv }}"
        - name: POL_REQ_ID
          value: "{{ .Values.config.polReqId }}"
        - name: AAI_CERT_PASS
          value: "{{ .Values.config.aaiCertPass }}"
        - name: AAI_CERT_PATH
          value: "{{ .Values.config.aaiCertPath }}"
        - name: AAI_URI
          value: "{{ .Values.config.aaiUri }}"
        - name: AAI_AUTH
          value: "{{ .Values.config.aaiAuth }}"
        volumeMounts:
        - name: certs
          mountPath: /opt/etc/config/aai_keystore
          subPath: aai_keystore
          readOnly: true
        resources:
{{ include "common.resources" . | indent 12 }}
        {{- if .Values.nodeSelector }}
        nodeSelector:
{{ toYaml .Values.nodeSelector | indent 10 }}
        {{- end -}}
        {{- if .Values.affinity }}
        affinity:
{{ toYaml .Values.affinity | indent 10 }}
        {{- end }}
      volumes:
      - name: certs
        secret:
            secretName: {{ .Release.Name}}-aai-keystore
      {{- if .Values.global.migration.enabled }}
      - name: backup-storage
        persistentVolumeClaim:
          claimName: {{ include "common.fullname" . }}-migration
      {{ end }}
      imagePullSecrets:
      - name: "{{ include "common.namespace" . }}-docker-registry-key"
