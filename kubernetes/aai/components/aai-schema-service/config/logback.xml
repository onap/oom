<configuration scan="true" scanPeriod="60 seconds" debug="false">
  <statusListener class="ch.qos.logback.core.status.NopStatusListener" />
  <property resource="application.properties" />
  <property name="AJSC_HOME" value="${AJSC_HOME:-.}" />
  <jmxConfigurator />
  <property name="logDirectory" value="${AJSC_HOME}/logs" />
  <property name="eelfLogPattern" value="%ecompStartTime|%date{yyyy-MM-dd'T'HH:mm:ss.SSSZ, UTC}|%X{requestId}|%X{serviceInstanceId}|%-10t|%X{serverName}|%X{serviceName}|%X{partnerName}|%X{statusCode}|%X{responseCode}|%replace(%replace(%X{responseDescription}){'\\|', '!'}){'\r|\n', '^'}|%X{instanceUUID}|%level|%X{severity}|%X{serverIpAddress}|%ecompElapsedTime|%X{server}|%X{clientIpAddress}|%eelfClassOfCaller|%X{unused}|%X{processKey}|%X{customField1}|%X{customField2}|%X{customField3}|%X{customField4}|co=%X{component}:%replace(%replace(%m){'\\|', '!'}){'\r|\n', '^'}%n"/>
  <property name="eelfAuditLogPattern" value="%ecompStartTime|%date{yyyy-MM-dd'T'HH:mm:ss.SSSZ, UTC}|%X{requestId}|%X{serviceInstanceId}|%-10t|%X{serverName}|%X{serviceName}|%X{partnerName}|%X{statusCode}|%X{responseCode}|%replace(%replace(%X{responseDescription}){'\\|', '!'}){'\r|\n|\r\n', '^'}|%X{instanceUUID}|%level|%X{severity}|%X{serverIpAddress}|%ecompElapsedTime|%X{server}|%X{clientIpAddress}|%eelfClassOfCaller|%X{unused}|%X{processKey}|%X{customField1}|%X{customField2}|%X{customField3}|%X{customField4}|co=%X{component}:%replace(%replace(%m){'\\|', '!'}){'\r|\n', '^'}%n"/>
  <property name="eelfMetricLogPattern" value="%ecompStartTime|%date{yyyy-MM-dd'T'HH:mm:ss.SSSZ, UTC}|%X{requestId}|%X{serviceInstanceId}|%-10t|%X{serverName}|%X{serviceName}|%X{partnerName}|%X{targetEntity}|%X{targetServiceName}|%X{statusCode}|%X{responseCode}|%replace(%replace(%X{responseDescription}){'\\|', '!'}){'\r|\n', '^'}|%X{instanceUUID}|%level|%X{severity}|%X{serverIpAddress}|%ecompElapsedTime|%X{server}|%X{clientIpAddress}|%eelfClassOfCaller|%X{unused}|%X{processKey}|%X{targetVirtualEntity}|%X{customField1}|%X{customField2}|%X{customField3}|%X{customField4}|co=%X{component}:%replace(%replace(%m){'\\|', '!'}){'\r|\n', '^'}%n"/>
  <!--  <property name="eelfErrorLogPattern" value="%ecompStartTime|%X{requestId}|%-10t|%X{serviceName}|%X{partnerName}|%X{targetEntity}|%X{targetServiceName}|%ecompErrorCategory|%X{responseCode}|%replace(%replace(%X{responseDescription}){'\\|', '!'}){'\r|\n|\r\n', '^'}|co=%X{component}:%replace(%replace(%m){'\\|', '!'}){'\r|\n', '^'}%n"/> -->
  <property name="eelfErrorLogPattern" value="%ecompStartTime|%X{requestId}|%-10t|%X{serviceName}|%X{partnerName}|%X{targetEntity}|%X{targetServiceName}|%ecompErrorCategory|%ecompResponseCode|%ecompResponseDescription|co=%X{component}:%replace(%replace(%m){'\\|', '!'}){'\r|\n', '^'}%n"/>
  <property name="eelfTransLogPattern" value="%ecompStartTime|%date{yyyy-MM-dd'T'HH:mm:ss.SSSZ, UTC}|%X{requestId}|%X{serviceInstanceId}|%-10t|%X{serverName}|%X{serviceName}|%X{partnerName}|%X{statusCode}|%X{responseCode}|%replace(%replace(%X{responseDescription}){'\\|', '!'}){'\r|\n', '^'}|%X{instanceUUID}|%level|%X{severity}|%X{serverIpAddress}|%ecompElapsedTime|%X{server}|%X{clientIpAddress}|%eelfClassOfCaller|%X{unused}|%X{processKey}|%X{customField1}|%X{customField2}|%X{customField3}|%X{customField4}|co=%X{partnerName}:%m%n"/>
  <conversionRule conversionWord="clr" converterClass="org.springframework.boot.logging.logback.ColorConverter" />
  <conversionRule conversionWord="wex" converterClass="org.springframework.boot.logging.logback.WhitespaceThrowableProxyConverter" />
  <conversionRule conversionWord="wEx" converterClass="org.springframework.boot.logging.logback.ExtendedWhitespaceThrowableProxyConverter" />
  <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
    <encoder>
      <pattern>
        %clr(%d{yyyy-MM-dd HH:mm:ss.SSS}){faint} %clr(${LOG_LEVEL_PATTERN:-%5p}) %clr(${PID:- }){magenta} %clr(---){faint} %clr([%15.15t]){faint} %clr(%-40.40logger{39}){cyan} %clr(:){faint} %m%n${LOG_EXCEPTION_CONVERSION_WORD:-%wEx}
      </pattern>
    </encoder>
  </appender>
  <appender name="SANE" class="ch.qos.logback.core.rolling.RollingFileAppender">
    <file>${logDirectory}/rest/sane.log</file>
    <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
      <fileNamePattern>${logDirectory}/rest/sane.log.%d{yyyy-MM-dd}</fileNamePattern>
    </rollingPolicy>
    <encoder>
      <pattern>%d{HH:mm:ss.SSS} [%thread] %-5level %logger{1024} - %msg%n
      </pattern>
    </encoder>
  </appender>
  <appender name="asyncSANE" class="ch.qos.logback.classic.AsyncAppender">
    <queueSize>1000</queueSize>
    <includeCallerData>true</includeCallerData>
    <appender-ref ref="SANE" />
  </appender>
  <appender name="METRIC"
    class="ch.qos.logback.core.rolling.RollingFileAppender">
    <filter class="ch.qos.logback.classic.filter.LevelFilter">
      <level>INFO</level>
      <onMatch>ACCEPT</onMatch>
      <onMismatch>DENY</onMismatch>
    </filter>
    <file>${logDirectory}/rest/metrics.log</file>
    <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
      <fileNamePattern>${logDirectory}/rest/metrics.log.%d{yyyy-MM-dd}
      </fileNamePattern>
    </rollingPolicy>
    <encoder class="org.onap.aai.logging.EcompEncoder">
      <pattern>${eelfMetricLogPattern}</pattern>
    </encoder>
  </appender>
  <appender name="asyncMETRIC" class="ch.qos.logback.classic.AsyncAppender">
    <queueSize>1000</queueSize>
    <includeCallerData>true</includeCallerData>
    <appender-ref ref="METRIC" />
  </appender>
  <appender name="DEBUG"
    class="ch.qos.logback.core.rolling.RollingFileAppender">
    <filter class="ch.qos.logback.classic.filter.LevelFilter">
      <level>DEBUG</level>
      <onMatch>ACCEPT</onMatch>
      <onMismatch>DENY</onMismatch>
    </filter>
    <file>${logDirectory}/rest/debug.log</file>
    <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
      <fileNamePattern>${logDirectory}/rest/debug.log.%d{yyyy-MM-dd}
      </fileNamePattern>
    </rollingPolicy>
    <encoder class="org.onap.aai.logging.EcompEncoder">
      <pattern>${eelfLogPattern}</pattern>
    </encoder>
  </appender>
  <appender name="asyncDEBUG" class="ch.qos.logback.classic.AsyncAppender">
    <queueSize>1000</queueSize>
    <includeCallerData>true</includeCallerData>
    <appender-ref ref="DEBUG" />
  </appender>
  <appender name="ERROR"
    class="ch.qos.logback.core.rolling.RollingFileAppender">
    <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
      <level>WARN</level>
    </filter>
    <file>${logDirectory}/rest/error.log</file>
    <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
      <fileNamePattern>${logDirectory}/rest/error.log.%d{yyyy-MM-dd}
      </fileNamePattern>
    </rollingPolicy>
    <encoder class="org.onap.aai.logging.EcompEncoder">
      <pattern>${eelfErrorLogPattern}</pattern>
    </encoder>
  </appender>
  <appender name="asyncERROR" class="ch.qos.logback.classic.AsyncAppender">
    <queueSize>1000</queueSize>
    <includeCallerData>true</includeCallerData>
    <appender-ref ref="ERROR" />
  </appender>
  <appender name="AUDIT"
    class="ch.qos.logback.core.rolling.RollingFileAppender">
    <file>${logDirectory}/rest/audit.log</file>
    <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
      <fileNamePattern>${logDirectory}/rest/audit.log.%d{yyyy-MM-dd}
      </fileNamePattern>
    </rollingPolicy>
    <encoder class="org.onap.aai.logging.EcompEncoder">
      <pattern>${eelfAuditLogPattern}</pattern>
    </encoder>
  </appender>
  <appender name="asyncAUDIT" class="ch.qos.logback.classic.AsyncAppender">
    <queueSize>1000</queueSize>
    <includeCallerData>true</includeCallerData>
    <appender-ref ref="AUDIT" />
  </appender>
  <appender name="translog"
    class="ch.qos.logback.core.rolling.RollingFileAppender">
    <filter class="ch.qos.logback.classic.filter.LevelFilter">
      <level>DEBUG</level>
      <onMatch>ACCEPT</onMatch>
      <onMismatch>DENY</onMismatch>
    </filter>
    <file>${logDirectory}/rest/translog.log</file>
    <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
      <fileNamePattern>${logDirectory}/rest/translog.log.%d{yyyy-MM-dd}
      </fileNamePattern>
    </rollingPolicy>
    <encoder class="org.onap.aai.logging.EcompEncoder">
      <pattern>${eelfTransLogPattern}</pattern>
    </encoder>
  </appender>
  <appender name="asynctranslog" class="ch.qos.logback.classic.AsyncAppender">
    <queueSize>1000</queueSize>
    <includeCallerData>true</includeCallerData>
    <appender-ref ref="translog" />
  </appender>
  <appender name="dmaapAAIEventConsumer"
    class="ch.qos.logback.core.rolling.RollingFileAppender">
    <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
      <level>WARN</level>
    </filter>
    <File>${logDirectory}/dmaapAAIEventConsumer/error.log</File>
    <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
      <fileNamePattern>${logDirectory}/dmaapAAIEventConsumer/error.log.%d{yyyy-MM-dd}
      </fileNamePattern>
    </rollingPolicy>
    <encoder class="org.onap.aai.logging.EcompEncoder">
      <pattern>${eelfLogPattern}</pattern>
    </encoder>
  </appender>
  <appender name="dmaapAAIEventConsumerDebug"
    class="ch.qos.logback.core.rolling.RollingFileAppender">
    <filter class="ch.qos.logback.classic.filter.LevelFilter">
      <level>DEBUG</level>
      <onMatch>ACCEPT</onMatch>
      <onMismatch>DENY</onMismatch>
    </filter>
    <File>${logDirectory}/dmaapAAIEventConsumer/debug.log</File>
    <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
      <fileNamePattern>${logDirectory}/dmaapAAIEventConsumer/debug.log.%d{yyyy-MM-dd}
      </fileNamePattern>
    </rollingPolicy>
    <encoder class="org.onap.aai.logging.EcompEncoder">
      <pattern>${eelfLogPattern}</pattern>
    </encoder>
  </appender>
  <appender name="dmaapAAIEventConsumerMetric"
    class="ch.qos.logback.core.rolling.RollingFileAppender">
    <filter class="ch.qos.logback.classic.filter.LevelFilter">
      <level>INFO</level>
      <onMatch>ACCEPT</onMatch>
      <onMismatch>DENY</onMismatch>
    </filter>
    <File>${logDirectory}/dmaapAAIEventConsumer/metrics.log</File>
    <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
      <fileNamePattern>${logDirectory}/dmaapAAIEventConsumer/metrics.log.%d{yyyy-MM-dd}
      </fileNamePattern>
    </rollingPolicy>
    <encoder class="org.onap.aai.logging.EcompEncoder">
      <pattern>${eelfMetricLogPattern}</pattern>
    </encoder>
  </appender>
  <appender name="external"
    class="ch.qos.logback.core.rolling.RollingFileAppender">
    <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
      <level>WARN</level>
    </filter>
    <file>${logDirectory}/external/external.log</file>
    <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
      <fileNamePattern>${logDirectory}/external/external.log.%d{yyyy-MM-dd}
      </fileNamePattern>
    </rollingPolicy>
    <encoder class="org.onap.aai.logging.EcompEncoder">
      <pattern>${eelfLogPattern}</pattern>
    </encoder>
  </appender>
  <logger name="org.onap.aai.schemaservice" level="DEBUG" additivity="false">
    <appender-ref ref="asyncDEBUG" />
    <appender-ref ref="asyncERROR" />
    <appender-ref ref="asyncMETRIC" />
    <appender-ref ref="asyncSANE" />
    <appender-ref ref="STDOUT" />
  </logger>
  <!-- Spring related loggers -->
  <logger name="org.springframework" level="WARN" />
  <logger name="org.springframework.beans" level="WARN" />
  <logger name="org.springframework.web" level="WARN" />
  <logger name="com.blog.spring.jms" level="WARN" />
  <!-- logback internals logging -->
  <logger name="ch.qos.logback.classic" level="WARN" />
  <logger name="ch.qos.logback.core" level="WARN" />
  <logger name="org.eclipse.jetty" level="WARN" />

  <logger name="org.onap.aai.schemaservice.interceptors.post" level="DEBUG"
      additivity="false">
    <appender-ref ref="asynctranslog" />
  </logger>
  <logger name="org.onap.aai.schemaservice.interceptors.pre.SetLoggingContext" level="DEBUG">
    <appender-ref ref="asyncAUDIT"/>
  </logger>
  <logger name="org.onap.aai.schemaservice.interceptors.post.ResetLoggingContext" level="DEBUG">
    <appender-ref ref="asyncAUDIT"/>
  </logger>
  <!-- ============================================================================ -->
  <!-- General EELF logger -->
  <!-- ============================================================================ -->
  <logger name="com.att.eelf" level="WARN" additivity="false">
    <appender-ref ref="asyncDEBUG" />
    <appender-ref ref="asyncERROR" />
    <appender-ref ref="asyncMETRIC" />
  </logger>
  <root level="DEBUG">
    <appender-ref ref="external" />
    {{ if .Values.global.config.logback.console.enabled }}
    <appender-ref ref="STDOUT" />
    {{ end }}
  </root>
</configuration>
