#{{ if not .Values.disableMessageRouterGlobalKafka }}
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: global-kafka
  namespace: "{{ .Values.nsPrefix }}-message-router"
spec:
  selector:
    matchLabels:
      app: global-kafka
  template:
    metadata:
      labels:
        app: global-kafka
      name: global-kafka
      annotations:
        pod.beta.kubernetes.io/init-containers: '[
          {
              "args": [
                  "--container-name",
                  "zookeeper"
              ],
              "command": [
                  "/root/ready.py"
              ],
              "env": [
                  {
                      "name": "NAMESPACE",
                      "valueFrom": {
                          "fieldRef": {
                              "apiVersion": "v1",
                              "fieldPath": "metadata.namespace"
                          }
                      }
                  }
              ],
              "image": "{{ .Values.image.readiness }}",
              "imagePullPolicy": "{{ .Values.pullPolicy }}",
              "name": "kafka-readiness"
          }
          ]'
    spec:
      containers:
      - image: {{ .Values.image.kafka }}
        imagePullPolicy: {{ .Values.pullPolicy }}
        name: global-kafka
        ports:
        - containerPort: 9092
        readinessProbe:
          tcpSocket:
            port: 9092
          initialDelaySeconds: 5
          periodSeconds: 10
        env:
        - name: KAFKA_ZOOKEEPER_CONNECT
          value: "zookeeper.{{ .Values.nsPrefix }}-message-router:2181"
        - name: KAFKA_ADVERTISED_HOST_NAME
          value: "global-kafka"
        - name: KAFKA_BROKER_ID
          value: "1"
        - name: KAFKA_ADVERTISED_PORT
          value: "9092"
        - name: KAFKA_PORT
          value: "9092"
        volumeMounts:
        - mountPath: /etc/localtime
          name: localtime
          readOnly: true
        - mountPath: /var/run/docker.sock
          name: docker-socket
        - mountPath: /kafka
          name: kafka-data
      restartPolicy: Always
      volumes:
      - name: localtime
        hostPath:
          path: /etc/localtime
      - name: docker-socket
        hostPath:
          path: /var/run/docker.sock
      - name: kafka-data
        persistentVolumeClaim:
          claimName: message-router-kafka
      imagePullSecrets:
      - name: "{{ .Values.nsPrefix }}-docker-registry-key"
#{{ end }}
