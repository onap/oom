{
  "comments": [
    {
      "key": {
        "uuid": "d97b3de0_0524ee89",
        "filename": "kubernetes/portal/charts/portal-app/resources/config/deliveries/properties/ONAPPORTAL/system.properties",
        "patchSetId": 1
      },
      "lineNbr": 125,
      "author": {
        "id": 4965
      },
      "writtenOn": "2020-05-20T16:21:26Z",
      "side": 1,
      "message": "hmmm interesting my understanding was that this password is somewhere replaced before the application reads it. If not then how does this work?",
      "revId": "57d5891f32a41a6b983dfb17141b16000c53c593",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "318c497a_7e91fa66",
        "filename": "kubernetes/portal/charts/portal-app/resources/config/deliveries/properties/ONAPPORTAL/system.properties",
        "patchSetId": 1
      },
      "lineNbr": 125,
      "author": {
        "id": 5
      },
      "writtenOn": "2020-05-20T16:35:15Z",
      "side": 1,
      "message": "You\u0027re right that this eventually gets replaced (like discussed in https://gerrit.onap.org/r/c/oom/+/106685)\nbut it\u0027s not \u0027before\u0027 the application reads it, it\u0027s done by the lower java layers (javax.net.ssl) that are initialized at startup with SSL certs and that will privilege X509 identity over basic auth (like aaf does).\n\nSo the problem is that, portal still tries decrypting that value regardless of it not finally being used. It would take some more work (maybe guilin) to rework portal code to avoid doing that. \n\nWe see this only when trying to sync roles (portal-894) and when that decrypt code is called, I\u0027ve thought that passing a fake value that has a proper byte length would fool the Cipher class, but it does not.",
      "parentUuid": "d97b3de0_0524ee89",
      "revId": "57d5891f32a41a6b983dfb17141b16000c53c593",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    }
  ]
}