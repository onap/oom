{{/*
# Copyright Â© 2022 Huawei Technologies Co., Ltd. All rights reserved.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
*/}}

apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "common.fullname" . }}
  namespace: {{ include "common.namespace" . }}
  labels:
    app: {{ include "common.name" . }}
    chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
    release: {{ include "common.release" . }}
    heritage: {{ .Release.Service }}
spec:
  selector:
    matchLabels:
      app: {{ include "common.name" . }}
  replicas: {{ .Values.replicaCount }}
  template:
    metadata:
      labels:
        app: {{ include "common.name" . }}
        release: {{ include "common.release" . }}
    spec:
      initContainers:
      - name: {{ include "common.name" . }}-update-config
        image: {{ include "repositoryGenerator.image.envsubst" . }}
        imagePullPolicy: {{ .Values.pullPolicy }}
        env:
        - name: POSTGRES_USERNAME
          {{- include "common.secret.envFromSecretFast" (dict "global" . "uid" "pg-user-creds" "key" "login") | indent 10 }}
        - name: POSTGRES_PASSWORD
          {{- include "common.secret.envFromSecretFast" (dict "global" . "uid" "pg-user-creds" "key" "password") | indent 10 }}
        command:
        - sh
        args:
        - -c
        - "cd /config-input && for PFILE in `find . -not -type d | grep -v -F ..`; do envsubst <${PFILE} >/config/${PFILE}; done"
        volumeMounts:
        - mountPath: /config-input
          name: init-data-input
        - mountPath: /config
          name: config
      - name: {{ include "common.name" . }}-readiness
        image: {{ include "repositoryGenerator.image.readiness" . }}
        imagePullPolicy: {{ .Values.pullPolicy }}
        env:
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        command:
        - /app/ready.py
        args:
        - --container-name
        - "{{ .Values.postgres.nameOverride }}"
      containers:
      - name: {{ include "common.name" . }}
        image: {{ include "repositoryGenerator.repository" . }}/{{ .Values.image }}
        imagePullPolicy: {{ .Values.pullPolicy }}
        command: ["sh", "-c"]
        args:
        - ". /uui/run.sh"
        ports:
        - containerPort: {{ .Values.service.targetPort }}
        env:
        - name: POSTGRES_IP
          value: {{ .Values.postgres.service.name2 }}
        - name: POSTGRES_PORT
          value: "{{ .Values.postgres.service.externalPort }}"
        - name: POSTGRES_DB_NAME
          value: {{ .Values.postgres.config.pgDatabase }}
        - name: SPRING_OPTS
          value: --spring.config.location=file:/config/application.yaml
{{- if eq .Values.liveness.enabled true }}
        livenessProbe:
          tcpSocket:
            port: {{ .Values.service.port }}
          initialDelaySeconds: {{ .Values.liveness.initialDelaySeconds }}
          periodSeconds: {{ .Values.liveness.periodSeconds }}
{{- end }}
        readinessProbe:
          tcpSocket:
            port: {{ .Values.service.port }}
          initialDelaySeconds: {{ .Values.readiness.initialDelaySeconds }}
          periodSeconds: {{ .Values.readiness.periodSeconds }}
        resources:
{{ include "common.resources" . | indent 12 }}
{{- if .Values.nodeSelector }}
        nodeSelector: {{ toYaml .Values.nodeSelector | nindent 10 }}
{{- end }}
{{- if .Values.affinity }}
        affinity: {{ toYaml .Values.affinity | nindent 10 }}
{{- end }}
        volumeMounts:
        - mountPath: /uui/run.sh
          name: entrypoint
          subPath: run.sh
        - mountPath: /config/application.yaml
          name: config
          subPath: application.yaml
      volumes:
      - name: init-data-input
        configMap:
          name: {{ include "common.fullname" . }}
      - name: config
        emptyDir:
          medium: Memory
      - name: entrypoint
        configMap:
          name: {{ include "common.fullname" . }}-entrypoint
          defaultMode: 0755
      imagePullSecrets:
      - name: "{{ include "common.namespace" . }}-docker-registry-key"
