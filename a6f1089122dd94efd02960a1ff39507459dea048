{
  "comments": [
    {
      "key": {
        "uuid": "4a4c1f5e_94501d68",
        "filename": "kubernetes/dmaap/components/dmaap-bc/templates/service.yaml",
        "patchSetId": 9
      },
      "lineNbr": 16,
      "author": {
        "id": 1111
      },
      "writtenOn": "2019-12-26T21:59:47Z",
      "side": 1,
      "message": "I love this",
      "range": {
        "startLine": 16,
        "startChar": 0,
        "endLine": 16,
        "endChar": 2
      },
      "revId": "a6f1089122dd94efd02960a1ff39507459dea048",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "428e5ff5_a2fe842d",
        "filename": "kubernetes/dmaap/components/dmaap-bc/templates/service.yaml",
        "patchSetId": 9
      },
      "lineNbr": 16,
      "author": {
        "id": 2319
      },
      "writtenOn": "2019-12-27T08:25:13Z",
      "side": 1,
      "message": "Thanks, there will be more to come (but in another merge request)",
      "parentUuid": "4a4c1f5e_94501d68",
      "range": {
        "startLine": 16,
        "startChar": 0,
        "endLine": 16,
        "endChar": 2
      },
      "revId": "a6f1089122dd94efd02960a1ff39507459dea048",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f2e33a1c_5a63cb8c",
        "filename": "kubernetes/dmaap/components/message-router/charts/message-router-kafka/templates/statefulset.yaml",
        "patchSetId": 9
      },
      "lineNbr": 103,
      "author": {
        "id": 2343
      },
      "writtenOn": "2019-12-27T14:38:15Z",
      "side": 1,
      "message": "We need more changes to disable the AAF/AAF based listeners. Some of these changes  require in the Kafka and MR docker images( Kafka clients also need some changes). Is there a global flag to toggle the AAF related code in the docker images",
      "range": {
        "startLine": 103,
        "startChar": 15,
        "endLine": 103,
        "endChar": 16
      },
      "revId": "a6f1089122dd94efd02960a1ff39507459dea048",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "897a12e4_a6d184cb",
        "filename": "kubernetes/dmaap/components/message-router/resources/config/dmaap/MsgRtrApi.properties",
        "patchSetId": 9
      },
      "lineNbr": 55,
      "author": {
        "id": 2343
      },
      "writtenOn": "2019-12-27T00:51:08Z",
      "side": 1,
      "message": "This property requires all/at least more then 1 Kafka broker address",
      "range": {
        "startLine": 55,
        "startChar": 64,
        "endLine": 55,
        "endChar": 71
      },
      "revId": "a6f1089122dd94efd02960a1ff39507459dea048",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ae1b2dd3_d648c557",
        "filename": "kubernetes/dmaap/components/message-router/resources/config/dmaap/MsgRtrApi.properties",
        "patchSetId": 9
      },
      "lineNbr": 55,
      "author": {
        "id": 2319
      },
      "writtenOn": "2019-12-27T08:25:13Z",
      "side": 1,
      "message": "As you may have understood, I’m not (at all) à Kafka expert. I’ve seen this pattern with Banzaicloud Kafka operator (the all broker address is a service where all Kafka brokers are tied to). \nIf you say that is not good (it actually works but maybe not in an efficient way), I’ll rollback.",
      "parentUuid": "897a12e4_a6d184cb",
      "range": {
        "startLine": 55,
        "startChar": 64,
        "endLine": 55,
        "endChar": 71
      },
      "revId": "a6f1089122dd94efd02960a1ff39507459dea048",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    }
  ]
}