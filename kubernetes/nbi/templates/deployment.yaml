# Copyright © 2018 Orange
# Modifications Copyright © 2018  Amdocs, Bell Canada
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

apiVersion: apps/v1
kind: Deployment
metadata: {{- include "common.resourceMetadata" . | nindent 2 }}
spec:
  selector: {{- include "common.selectors" . | nindent 4 }}
  replicas: {{ .Values.replicaCount }}
  template:
    metadata: {{- include "common.templateMetadata" . | nindent 6 }}
    spec:
{{- if .Values.global.aafEnabled }}
      initContainers:
      - name: {{ include "common.name" . }}-aaf-readiness
        command:
        - /root/ready.py
        args:
        - --container-name
        - aaf-locate
        - --container-name
        - aaf-cm
        env:
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        image: "{{ .Values.global.readinessRepository }}/{{ .Values.global.readinessImage }}"
        imagePullPolicy: {{ .Values.global.pullPolicy | default .Values.pullPolicy }}
      - name: {{ include "common.name" . }}-dbc-aaf-config
        image: "{{ include "common.repository" . }}/{{ .Values.global.aafAgentImage }}"
        imagePullPolicy: {{ .Values.global.pullPolicy | default .Values.pullPolicy }}
        command: ["bash","-c","exec /opt/app/aaf_config/bin/agent.sh"]
        volumeMounts:
        - mountPath: {{ .Values.aaf.credsPath }}
          name: {{ include "common.name" . }}-aaf-config
        env:
        - name: APP_FQI
          value: "{{ .Values.aaf.fqi }}"
        - name: aaf_locate_url
          value: "https://aaf-locate.{{ .Release.Namespace }}:8095"
        - name: aaf_locator_container
          value: "{{ .Values.global.aafLocatorContainer }}"
        - name: aaf_locator_container_ns
          value: "{{ .Release.Namespace }}"
        - name: aaf_locator_fqdn
          value: "{{ .Values.aaf.fqdn }}"
        - name: aaf_locator_public_fqdn
          value: "{{.Values.aaf.publicFqdn}}"
        - name: aaf_locator_app_ns
          value: "{{ .Values.global.aafAppNs }}"
        - name: DEPLOY_FQI
          {{- include "common.secret.envFromSecret" (dict "global" . "uid" "aaf-deploy-creds" "key" "login") | indent 10 }}
        - name: DEPLOY_PASSWORD
          {{- include "common.secret.envFromSecret" (dict "global" . "uid" "aaf-deploy-creds" "key" "password") | indent 10 }}
        - name: cadi_longitude
          value: "{{ .Values.aaf.cadiLongitude }}"
        - name: cadi_latitude
          value: "{{ .Values.aaf.cadiLatitude }}"
{{- end }}
      containers:
      - name: {{ include "common.name" . }}
        image: "{{ include "common.repository" . }}/{{ .Values.image }}"
        imagePullPolicy: {{ .Values.global.pullPolicy | default .Values.pullPolicy }}
        ports: {{- include "common.containerPorts" . | nindent 8  }}
        # disable liveness probe when breakpoints set in debugger
        # so K8s doesn't restart unresponsive container
        {{- if .Values.liveness.enabled }}
        livenessProbe:
          httpGet:
            path: {{ .Values.liveness.httpGet.path }}
            port: {{ index .Values.service.ports (.Values.liveness.httpGet.port_id | int) "name" }}
          initialDelaySeconds: {{ .Values.liveness.initialDelaySeconds }}
          periodSeconds: {{ .Values.liveness.periodSeconds }}
        {{- end }}
        readinessProbe:
          httpGet:
            path: {{ .Values.readiness.httpGet.path }}
            port: {{ index .Values.service.ports (.Values.readiness.httpGet.port_id | int) "name" }}
          initialDelaySeconds: {{ .Values.readiness.initialDelaySeconds }}
          periodSeconds: {{ .Values.readiness.periodSeconds }}
        env:
        - name: SPRING_DATASOURCE_URL
          value: jdbc:mariadb://{{ include "common.mariadbService" . }}:{{ include "common.mariadbPort" . }}/{{ index .Values "mariadb-galera" "config" "mysqlDatabase" }}
        - name: SPRING_DATASOURCE_USERNAME
          {{- include "common.secret.envFromSecret" (dict "global" . "uid" "nbi-db-secret" "key" "login") | indent 10 }}
        - name: SPRING_DATASOURCE_PASSWORD
          {{- include "common.secret.envFromSecret" (dict "global" . "uid" "nbi-db-secret" "key" "password") | indent 10 }}
        - name: SPRING_DATA_MONGODB_HOST
          value: {{ .Values.mongo.service.name }}.{{ include "common.namespace" . }}
        - name: SPRING_DATA_MONGODB_PORT
          value: "{{ .Values.mongo.service.internalPort }}"
        - name: SPRING_DATA_MONGODB_DATABASE
          value: {{ .Values.mongo.config.dbName }}
        - name: ONAP_LCPCLOUDREGIONID
          value: {{ .Values.config.openStackRegion }}
        - name: ONAP_TENANTID
          value: {{ .Values.config.openStackVNFTenantId | quote }}
        - name: ONAP_CLOUDOWNER
          value: {{ .Values.config.cloudOwner }}
        - name: NBI_URL
          value: "http://nbi.{{ include "common.namespace" . }}:8080/nbi/api/v4"
        - name: SDC_HOST
          value: "https://sdc-be.{{ include "common.namespace" . }}:8443"
        - name: SDC_HEADER_ECOMPINSTANCEID
          value: {{ .Values.config.ecompInstanceId }}
        - name: SDC_HEADER_AUTHORIZATION
          value: {{ .Values.sdc_authorization }}
        - name: AAI_HOST
          value: "https://aai.{{ include "common.namespace" . }}:8443"
        - name: AAI_HEADER_AUTHORIZATION
          value: {{ .Values.aai_authorization }}
        - name: SO_HOST
          value: http://so.{{ include "common.namespace" . }}:8080
        {{- if .Values.so_authorization }}
        - name: SO_HEADER_AUTHORIZATION
          value: {{ .Values.so_authorization }}
        {{- end }}
        - name: DMAAP_HOST
          value: "https://message-router.{{ include "common.namespace" . }}:3905"
        - name: LOGGING_LEVEL_ORG_ONAP_NBI
          value: {{ .Values.config.loglevel }}
        - name: MSB_ENABLED
          value: "true"
        - name: MSB_DISCOVERY_HOST
          value: "msb-discovery.{{ include "common.namespace" . }}"
        - name: MSB_DISCOVERY_PORT
          value: "10081"
        volumeMounts:
{{- if .Values.global.aafEnabled }}
        - mountPath: {{ .Values.aaf.credsPath }}
          name: {{ include "common.name" . }}-aaf-config
{{- end }}
        - mountPath: /etc/localtime
          name: localtime
          readOnly: true
        resources: {{- include "common.resources" . | nindent 10 }}
        {{- if .Values.nodeSelector }}
        nodeSelector: {{- toYaml .Values.nodeSelector | nindent 10 }}
        {{- end -}}
        {{- if .Values.affinity }}
        affinity: {{ toYaml .Values.affinity | nindent 10 }}
        {{- end }}
        # side car containers
        # - name: filebeat-onap
        #   image: "{{ .Values.global.loggingRepository }}/{{ .Values.global.loggingImage }}"
        #   imagePullPolicy: {{ .Values.global.pullPolicy | default .Values.pullPolicy }}
        #   volumeMounts:
        #   - mountPath: /usr/share/filebeat/filebeat.yml
        #     name: filebeat-conf
        #     subPath: filebeat.yml
        #   - mountPath: /home/esr/works/logs
        #     name: esr-server-logs
        #   - mountPath: /usr/share/filebeat/data
        #     name: esr-server-filebeat
      volumes:
        - name: localtime
          hostPath:
            path: /etc/localtime
{{- if .Values.global.aafEnabled }}
        - name: {{ include "common.name" . }}-aaf-config
          emptyDir:
            medium: Memory
{{- end }}
        # - name: filebeat-conf
        #   configMap:
        #     name: {{ include "common.fullname" . }}-esr-filebeat
        # - name: esr-server-logs
        #   emptyDir: {}
        # - name: esr-server-filebeat
        #   emptyDir: {}
        # - name: esrserver-log
        #   configMap:
        #     name: {{ include "common.fullname" . }}-esr-esrserver-log
      imagePullSecrets:
      - name: "{{ include "common.namespace" . }}-docker-registry-key"
